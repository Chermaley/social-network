{"version":3,"sources":["component/common/spinner/spinner.module.scss","component/login/login.module.scss","component/profile/profile.module.scss","component/profile/myPosts/post/post.module.scss","component/profile/myPosts/myPosts.module.scss","component/404page/pageNotFound.module.scss","component/header/header.module.scss","component/nav/nav.module.scss","api/api.ts","component/common/spinner/spinner.tsx","api/profileApi.ts","redux/sidebarReducer.ts","component/nav/nav.tsx","api/authApi.ts","api/securityApi.ts","redux/authReducer.ts","component/redirectHOC/redirectHOC.tsx","component/redirectHOC/index.js","utils/validators/validators.js","component/settings/index.js","component/settings/settings.tsx","assets/img/avatar.png","component/dialogs/dialogItem/dialog.tsx","component/dialogs/message/index.js","component/dialogs/message/message.tsx","redux/dialogsReducer.ts","component/common/formsControl/formControls.tsx","component/dialogs/dialogsForm/index.js","component/dialogs/dialogsForm/dialogsForm.tsx","component/dialogs/index.js","component/dialogs/dialogs.tsx","component/common/spinner/index.js","component/profile/profileStatus/profileStatusWithHooks.tsx","component/profile/profileInfo/profileDataForm.tsx","component/profile/profileInfo/profileInfo.tsx","component/profile/myPosts/post/index.js","component/profile/myPosts/post/post.tsx","redux/profileReducer.ts","component/profile/myPosts/myPostForm/myPostForm.tsx","component/profile/myPosts/myPostForm/index.js","component/profile/myPosts/myPosts.tsx","component/profile/profile.tsx","component/profile/profileAPI.tsx","component/users/user/Plus-Icon-PNG.png","component/users/user/check.png","component/users/user/index.js","component/users/user/user.tsx","component/users/paginator/next.svg","component/users/paginator/prev.svg","component/users/paginator/index.js","component/users/paginator/paginator.tsx","api/usersApi.ts","redux/usersReducer.ts","redux/userSelectors.ts","component/users/index.js","component/users/Users.tsx","component/users/usersSearchForm/UsersSearchFormik.tsx","component/header/header.tsx","component/header/headerAPI.tsx","component/login/loginForm/index.js","component/login/loginForm/loginForm.tsx","redux/authSelectors.ts","component/login/index.js","component/login/login.tsx","redux/appReducer.ts","redux/reduxStore.ts","component/404page/index.js","component/404page/404page.tsx","component/app/app.tsx","index.js","component/users/paginator/paginator.module.scss","component/login/loginForm/loginForm.module.scss","component/users/user/user.module.scss","component/common/formsControl/formControls.module.scss","component/users/users.module.scss","component/dialogs/dialogs.module.scss","component/dialogs/dialogItem/dialog.module.scss","component/dialogs/message/message.module.scss","component/dialogs/dialogsForm/dialogsForm.module.scss","component/profile/profileInfo/profileInfo.module.scss"],"names":["module","exports","ResultsCodesEnum","ResultsCodeForCaptcha","Spinner","className","classes","preloader","spinner","axiosInstance","axios","create","withCredentials","baseURL","headers","profileApi","id","get","then","res","data","status","put","photo","formData","FormData","append","profile","initialState","profileData","actions","type","sidebarReducer","state","connect","login","useSelector","auth","email","authProfile","sidebar","dispatch","useDispatch","navbar","user","src","photos","small","alt","name","fullName","button","to","interesting","title","content","getState","a","authId","userId","authApi","password","rememberMe","captcha","post","delete","securityApi","isLoading","isAuth","url","getAuth","meData","resultCode","Success","logout","getCaptchaUrl","authReducer","action","withAuthRedirect","Component","props","restProps","maxLength","Settings","onClick","Dialog","person","path","activeClassName","active","dialog","userPhoto","Message","label","classname","ownMessage","message","text","messages","dialogs","dialogsReducer","newMessage","FormControl","meta","touched","error","children","hasError","errorMessage","formControl","Textarea","input","Input","DialogsForm","reduxForm","form","wrapper","onSubmit","handleSubmit","Field","component","Dialogs","compose","dialogsData","dialogsPage","messagesData","addNewMessage","map","dialogsItems","messagesContainer","value","newMessageText","ProfileStatusWithHooks","updateStatus","useState","editMode","setEditMode","setValue","useEffect","onBlur","autoFocus","onChange","e","target","onDoubleClick","requiredField","ProfileDataReduxForm","summaryError","contactsInput","Object","keys","contacts","key","Form","placeholder","validate","Contact","contactTitle","contactValue","ProfileData","toggleEditMode","isOwner","aboutMe","lookingForAJob","lookingForAJobDescription","descr","ProfileInfo","savePhoto","saveProfile","changeEditMode","description","profilePhoto","large","preventDefault","files","length","initialValues","Post","img","likesCount","item","posts","onProfilePage","postText","bool","getProfile","profileReducer","newPost","filter","maxLength10","MyPostForm","MyPosts","memo","postData","addNewPost","postBlock","profilePage","Profile","ProfileAPI","refreshProfileData","match","getStatus","authUserId","params","history","push","this","prevProps","saveProfileData","withRouter","Error","stopSubmit","_error","Promise","reject","User","onFollowClick","followStatus","photoUrl","followingInProgress","user_photo","user_name","user_status","subscribe","disabled","some","check","plus","Paginator","totalItemsCount","pageSize","currentPage","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","portionCount","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","styles","paginator","navBtn","left","prev","p","cn","selectedPage","pageNumber","right","next","usersApi","getUsers","term","friend","followUser","unFollowUser","users","totalUsersCount","usersCount","isFetching","payload","requestUsers","usersPage","totalCount","items","_followUnfollowFlow","apiMethod","usersReducer","followed","getPageSize","getTotalUsersCount","getCurrentPage","getIsLoadingStatus","getIsFollowingInProgress","Users","usersData","followUserClick","unFollowUserClick","usersContent","usersContainer","notFound","UsersSearchForm","values","as","submit","React","HeaderContent","onSearchSubmit","logo","logo_auth","UsersSearchFormik","menu","settings","Header","header","logo_noAuth","setFilter","location","pathname","LoginForm","checkbox","remember","getCaptcha","getIsAuth","Login","initialized","appReducer","rootReducer","combineReducers","app","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","logger","PageNotFound","pageNotFound","News","lazy","Music","App","catchAllUnhandledErrors","alert","initializeApp","addEventListener","removeEventListener","fallback","exact","render","UsersPage","AppContainer","MainApp","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.761ca53a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"spinner_preloader__1jMg2\",\"spinner\":\"spinner_spinner__1Hetg\",\"spin\":\"spinner_spin__A_APw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"login_login__VKdDU\",\"descr\":\"login_descr__u0f4g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"profile_profile__1d7zg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"post_item__1y2Bx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"myPosts_postBlock__1gIeR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageNotFound\":\"pageNotFound_pageNotFound__2eM4K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__18sGI\",\"content\":\"header_content__15Dq1\",\"submit\":\"header_submit__vXiCC\",\"logo\":\"header_logo__esTHP\",\"logo_auth\":\"header_logo_auth__2BghE\",\"logo_noAuth\":\"header_logo_noAuth__emH4y\",\"menu\":\"header_menu__2b9oq\",\"active\":\"header_active__19EXb\",\"settings\":\"header_settings__26DpH\",\"loginBlock\":\"header_loginBlock__2ztlx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"nav_navbar__1sgBY\",\"user\":\"nav_user__1bQo-\",\"photo\":\"nav_photo__2Yr4u\",\"name\":\"nav_name__1Q5pM\",\"button\":\"nav_button__3WJH1\",\"email\":\"nav_email__35rfu\",\"interesting\":\"nav_interesting__2W2LG\",\"title\":\"nav_title__7GmS6\",\"content\":\"nav_content__2rbTP\"};","import axios from \"axios\";\r\nimport {UserType} from \"../types/types\";\r\n\r\n\r\nexport const axiosInstance = axios.create({\r\n    withCredentials: true,\r\n    baseURL:\"https://social-network.samuraijs.com/api/1.0\",\r\n    headers: {\"API-KEY\": \"f68a4cda-2f4c-4785-816b-4190cdf2b12c\"}\r\n});\r\n\r\nexport type GetItemsType = {\r\n    items: Array<UserType>,\r\n    totalCount: number,\r\n    error: string | null\r\n}\r\n\r\nexport type ResponseType<D = {}, RC = ResultsCodesEnum> = {\r\n    data: D,\r\n    messages: Array<string>,\r\n    resultCode: RC,\r\n    totalCount?: number\r\n}\r\n\r\nexport enum ResultsCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\nexport enum ResultsCodeForCaptcha {\r\n    captcha = 10\r\n}\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport classes from './spinner.module.scss';\r\nconst Spinner = () => {\r\n    return (\r\n        <div className={classes.preloader}>\r\n            <div className={classes.spinner}></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Spinner;","import {PhotosType, ProfileType} from \"../types/types\";\r\nimport {axiosInstance, ResponseType} from \"./api\";\r\n\r\ntype savePhotoResDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileApi = {\r\n    getProfile: (id: number) => {\r\n        return axiosInstance.get<ProfileType>(`/profile/${id}`).then(res => res.data);\r\n    },\r\n    getStatus: (id: number) => {\r\n        return axiosInstance.get<string>(`/profile/status/${id}`).then(res => res.data);\r\n    },\r\n    updateStatus: (status: string) => {\r\n        return axiosInstance.put<ResponseType>(`/profile/status`, {status: status});\r\n    },\r\n    uploadUserPhoto: (photo: File) => {\r\n        const formData = new FormData;\r\n        formData.append(\"image\", photo);\r\n        return axiosInstance.put<ResponseType<savePhotoResDataType>>('/profile/photo', formData, {\r\n            headers: {\r\n                'Content-type': 'multipart/form-data'\r\n            }\r\n        }).then(res => res.data);\r\n    },\r\n    uploadUserData: (profile: ProfileType) => {\r\n        return axiosInstance.put<ResponseType>('/profile', profile).then(res => res.data);\r\n    }\r\n};","import {ProfileType} from \"../types/types\";\r\nimport {CommonThunkType, InferActionsTypes} from \"./reduxStore\";\r\nimport {FormAction} from \"redux-form\";\r\nimport {profileApi} from \"../api/profileApi\";\r\n\r\nlet initialState = {\r\n    profileData: null as ProfileType | null\r\n};\r\n\r\n\r\nconst sidebarReducer = (state = initialState, actions: ActionsType): InitialStateType => {\r\n    switch (actions.type) {\r\n        case \"SIDEBAR/SET_PROFILE\":\r\n            return {\r\n                ...state,\r\n                profileData: actions.profile\r\n            };\r\n    }\r\n    return state;\r\n};\r\n\r\nexport const actions = {\r\n    setProfileForSideBar: (profile: ProfileType) => ({type: 'SIDEBAR/SET_PROFILE', profile} as const)\r\n};\r\n\r\nexport const getProfileForSideBar = (): ThunkType => async (dispatch, getState) => {\r\n    const authId = getState().auth.userId;\r\n    if (authId) {\r\n        let profileData = await profileApi.getProfile(authId);\r\n        dispatch(actions.setProfileForSideBar(profileData));\r\n    }\r\n};\r\n\r\nexport default sidebarReducer;\r\n\r\ntype ThunkType = CommonThunkType<ActionsType | FormAction>\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>;","import React from 'react';\r\nimport classes from './nav.module.scss';\r\nimport {connect, useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport Spinner from \"../common/spinner/spinner\";\r\nimport {getProfileForSideBar} from \"../../redux/sidebarReducer\";\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst NavBar = () => {\r\n    const login = useSelector((state:AppStateType) => state.auth.email);\r\n    const authProfile = useSelector((state: AppStateType) => state.sidebar.profileData);\r\n    const dispatch = useDispatch();\r\n    const getAuthUserData = () => {\r\n        dispatch(getProfileForSideBar());\r\n    };\r\n    if(!authProfile) {\r\n        getAuthUserData();\r\n        return <Spinner/>;\r\n    }\r\n        return (\r\n            <nav className={classes.navbar}>\r\n                <div className={classes.user}>\r\n                    <div className={classes.photo}><img src={authProfile.photos.small} alt=\"avatar\"/></div>\r\n                    <p className={classes.name}>{authProfile.fullName}</p>\r\n                    <span className={classes.email}>{login}</span>\r\n                    <div className={classes.button}>\r\n                        <Link to={'/'}>Go to profile</Link>\r\n                    </div>\r\n                </div>\r\n                <div className={classes.interesting}>\r\n                    <span className={classes.title}>CAN BE INTERESTING</span>\r\n                    <div className={classes.content}/>\r\n                </div>\r\n            </nav>\r\n        );\r\n\r\n\r\n};\r\n\r\nexport default connect()(NavBar);","import {axiosInstance, ResponseType, ResultsCodeForCaptcha, ResultsCodesEnum} from \"./api\";\r\n\r\n\r\ntype MeResponseDataType = {\r\n    id: number,\r\n    email: string,\r\n    login: string,\r\n}\r\n\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\n\r\n\r\nexport const authApi = {\r\n    me: () => {\r\n        return axiosInstance.get<ResponseType<MeResponseDataType>>(`/auth/me`).then(res => res.data);\r\n    },\r\n    login: (email: string, password: string, rememberMe = false, captcha: null | string = null) => {\r\n        return axiosInstance.post<ResponseType<LoginResponseDataType, ResultsCodeForCaptcha | ResultsCodesEnum>>(`/auth/login`, {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n            captcha\r\n        });\r\n    },\r\n    logout: () => {\r\n        return axiosInstance.delete('/auth/login');\r\n    },\r\n\r\n};","import {axiosInstance} from \"./api\";\r\n\r\ntype getCaptchaResponseType = {\r\n    url: string\r\n}\r\n\r\nexport const securityApi = {\r\n    getCaptcha: () => {\r\n        return axiosInstance.get<getCaptchaResponseType>('/security/get-captcha-url').then(res => res.data);\r\n    }\r\n};","import {ResultsCodesEnum, ResultsCodeForCaptcha} from \"../api/api\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\nimport {CommonThunkType, InferActionsTypes} from \"./reduxStore\";\r\nimport {authApi} from \"../api/authApi\";\r\nimport {securityApi} from \"../api/securityApi\";\r\n\r\nconst initialState = {\r\n    isLoading: false,\r\n    userId: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captcha: null as string | null\r\n};\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"AUTH/SET_USER_DATA\":\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n                isAuth: true\r\n            };\r\n        case \"AUTH/DELETE_USER_DATA\": {\r\n            return {\r\n                ...state,\r\n                userId: null,\r\n                email: null,\r\n                login: null,\r\n                isAuth: false,\r\n            };\r\n        }\r\n        case \"AUTH/SET_CAPTCHA_URL\": {\r\n            return {\r\n                ...state,\r\n                captcha: action.url\r\n            };\r\n        }\r\n        case \"AUTH/CAPTCHA_SUCCESS\": {\r\n            return {\r\n                ...state,\r\n                captcha: null\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n        }\r\n};\r\n\r\nconst actions = {\r\n    setAuthUserData :(userId: number, email: string, login: string) => ({type: 'AUTH/SET_USER_DATA', data: {userId, email, login}} as const),\r\n    deleteAuthUserData:  () => ({type: 'AUTH/DELETE_USER_DATA'} as const),\r\n    setCaptchaUrl : (url: string) => ({type: 'AUTH/SET_CAPTCHA_URL', url} as const),\r\n    captchaSuccess : () => ({type: 'AUTH/CAPTCHA_SUCCESS'} as const)\r\n};\r\n\r\nexport const getAuth = (): ThunkType => async (dispatch) => {\r\n    let meData = await authApi.me();\r\n    if (meData.resultCode === ResultsCodesEnum.Success) {\r\n        const {id, login, email} = meData.data;\r\n        dispatch(actions.setAuthUserData(id, email, login));\r\n    }\r\n};\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType =>\r\n    async (dispatch) => {\r\n        let res = await authApi.login(email, password, rememberMe, captcha);\r\n        if (res.data.resultCode === ResultsCodesEnum.Success) {\r\n            dispatch(getAuth());\r\n            dispatch(actions.captchaSuccess());\r\n        } else {\r\n            let message = res.data.messages.length !== 0 ? res.data.messages[0] : \"some error\";\r\n            let action = stopSubmit(\"login\", {_error: message});\r\n            if (res.data.resultCode === ResultsCodeForCaptcha.captcha) {\r\n                dispatch(action);\r\n                dispatch(getCaptchaUrl());\r\n            }\r\n            dispatch(action);\r\n        }\r\n    };\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    let res = await authApi.logout();\r\n    if (res.data.resultCode === ResultsCodesEnum.Success) {\r\n        dispatch(actions.deleteAuthUserData());\r\n    }\r\n};\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    let data = await securityApi.getCaptcha();\r\n    if (data.url) {\r\n        dispatch(actions.setCaptchaUrl(data.url));\r\n    }\r\n};\r\n\r\nexport default authReducer;\r\n// Type\r\nexport type InitialStateType = typeof initialState\r\ntype ThunkType = CommonThunkType<ActionsType | FormAction>\r\ntype ActionsType = InferActionsTypes<typeof actions>;\r\n","import {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport React from \"react\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\ntype MapPropsType = {\r\n    isAuth: boolean,\r\n}\r\ntype MapDispatchType = {}\r\nexport function withAuthRedirect<WCP>(Component: React.ComponentType<WCP>){\r\n\r\n    const WithRedirect: React.FC<MapPropsType & MapDispatchType> = (props) => {\r\n        let {isAuth, ...restProps} = props;\r\n        if (!isAuth) return <Redirect to={'/login'}/>;\r\n        return (\r\n            <Component {...restProps as unknown as WCP}/>\r\n        );\r\n    };\r\n    const mapStateToProps = (state: AppStateType): MapPropsType => {\r\n        return {\r\n            isAuth: state.auth.isAuth\r\n        };\r\n    };\r\n    return connect<MapPropsType, MapDispatchType, WCP, AppStateType>(mapStateToProps)(WithRedirect);\r\n}","import {withAuthRedirect} from \"./redirectHOC\";\r\n\r\nexport default withAuthRedirect;","export const requiredField = value => {\r\n    if (value) return undefined;\r\n    return 'Field is required';\r\n};\r\n\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n};","import Settings from \"./settings\";\r\nexport default Settings;","import React from \"react\";\r\nimport {logout} from \"../../redux/authReducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport withAuthRedirect from \"../redirectHOC\";\r\n\r\nconst Settings = () => {\r\n    const dispatch = useDispatch();\r\n    const onLogout = () => {\r\n        dispatch(logout());\r\n    };\r\n    return (\r\n            <div>\r\n                <span onClick={onLogout}>Logout</span>\r\n            </div>\r\n    );\r\n};\r\nexport default withAuthRedirect(Settings);","export default __webpack_public_path__ + \"static/media/avatar.00971467.png\";","import {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport classes from './dialog.module.scss';\r\nimport userPhoto from '../../../assets/img/avatar.png';\r\ntype PropTypes = {\r\n    person: string,\r\n    id: number\r\n}\r\n\r\nconst Dialog: React.FC<PropTypes> = ({person, id}) => {\r\n    let path = `/dialogs/${id}`;\r\n\r\n    return (\r\n        <NavLink to={path} activeClassName={classes.active} className={classes.dialog}>\r\n            <div className={classes.photo}><img src={userPhoto} alt=\"\"/></div>\r\n            <div className={classes.name}>{person}</div>\r\n        </NavLink>\r\n    );\r\n};\r\n\r\n\r\nexport default Dialog;","import Message from \"./message\";\r\nexport default Message;","import classes from \"./message.module.scss\";\nimport React from \"react\";\nimport userPhoto from '../../../assets/img/avatar.png';\ntype PropTypes = {label: string, id: number}\n\nconst Message: React.FC<PropTypes> = ({label, id}) => {\n    const classname = id === 1 ? classes.ownMessage : classes.message;\n    return <div className={classname}>\n        <div className={classes.photo}><img src={userPhoto} alt=\"photo\"/></div>\n        <div className={classes.text}>{label}</div>\n    </div>\n    ;\n};\nexport default Message;","import {InferActionsTypes} from \"./reduxStore\";\r\n\r\ntype MessagesType = {\r\n    id: number,\r\n    message: string\r\n}\r\ntype DialogType = {\r\n    id: number,\r\n    person: string\r\n}\r\nconst initialState = {\r\n        messages: [\r\n            {id: 2, message:'pteurvoluptatem accusantium doloremque laudantium.'},\r\n        ] as Array<MessagesType>,\r\n        dialogs: [\r\n            {person: 'Andrey', id: 1},\r\n            {person: 'Sergey', id: 2}\r\n        ] as Array<DialogType>\r\n};\r\n\r\nexport const dialogsReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    let newMessage;\r\n    switch (action.type) {\r\n        case  'DIALOGS/ADD_MESSAGE':\r\n            newMessage = {\r\n                id: 5,\r\n                message: action.message\r\n            };\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, newMessage]\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    addNewMessage : (message: string) => ({type: 'DIALOGS/ADD_MESSAGE', message} as const)\r\n};\r\nexport default dialogsReducer;\r\n\r\n// Type\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>","import React from \"react\";\r\nimport classes from './formControls.module.scss';\r\nimport {WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl:React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError =  touched && error;\r\n    const errorMessage = hasError ? <span>{error}</span>: null;\r\n\r\n    return (\r\n        <div className={!hasError ? classes.formControl : classes.formControl + ' ' + classes.error}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {errorMessage}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...restProps} {...input}/></FormControl>;\r\n};\r\n\r\nexport const Input: React.FC<WrappedFieldProps>  = (props) => {\r\n    const {input, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>;\r\n};\r\n","import DialogsForm from \"./dialogsForm\";\r\n\r\nexport default DialogsForm;","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../../common/formsControl/formControls\";\r\nimport {DialogsFormValuesType} from \"../dialogs\";\r\nimport classes from './dialogsForm.module.scss';\r\nimport userPhoto from '../../../assets/img/avatar.png';\r\n\r\ntype PropTypes = {}\r\nconst DialogsForm: React.FC<InjectedFormProps<DialogsFormValuesType, PropTypes> & PropTypes> = (props) => {\r\n    return (<div className={classes.wrapper}>\r\n                <div className={classes.photo}><img src={userPhoto} alt=\"userPhoto\"/></div>\r\n                <form className={classes.form} onSubmit={props.handleSubmit}>\r\n                    <Field\r\n                        component={Input}\r\n                        name={'newMessageText'}/>\r\n                        <button/>\r\n                </form>\r\n            </div>\r\n\r\n    );\r\n};\r\n\r\n\r\nexport default reduxForm<DialogsFormValuesType>({form: 'addMessageForm'})(DialogsForm);\r\n","import Dialogs from \"./dialogs\";\r\nexport default Dialogs;","import React, {ComponentType} from 'react';\r\nimport classes from './dialogs.module.scss';\r\nimport Dialog from './dialogItem/dialog';\r\nimport Message from './message';\r\nimport {connect} from \"react-redux\";\r\nimport {actions, InitialStateType} from \"../../redux/dialogsReducer\";\r\nimport {withAuthRedirect} from \"../redirectHOC/redirectHOC\";\r\nimport {compose} from \"redux\";\r\nimport DialogsFormRedux from \"./dialogsForm\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\n\r\ntype PropTypes = MapStateToPropsType & MapDispatchToPropsType\r\ntype MapStateToPropsType = {\r\n    dialogsData: InitialStateType[\"dialogs\"],\r\n    messagesData:  InitialStateType[\"messages\"],\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addNewMessage: (value: string) => void\r\n}\r\nexport type DialogsFormValuesType = {\r\n    newMessageText: string,\r\n}\r\n\r\nconst Dialogs:React.FC<PropTypes> = ({dialogsData, messagesData, addNewMessage}) => {\r\n\r\n    const addMessage = (value: DialogsFormValuesType) => {\r\n        const message = value.newMessageText;\r\n        addNewMessage(message);\r\n    };\r\n\r\n    const dialogs = dialogsData.map(({id, person}) => {\r\n        return <Dialog key={id} id={id} person={person}/>;\r\n    });\r\n\r\n    const messages = messagesData.map(({message,id}) => {\r\n        return <Message id={id} key={id} label={message}/>;\r\n    });\r\n\r\n    return (\r\n            <div className={classes.dialogs}>\r\n                <div className={classes.dialogsItems}>\r\n                    {dialogs}\r\n                </div>\r\n                <div className={classes.messagesContainer}>\r\n                    <div className={classes.messages}>{messages}</div>\r\n                    <DialogsFormRedux onSubmit={addMessage}/>\r\n                </div>\r\n            </div>\r\n    );\r\n};\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsData: state.dialogsPage.dialogs,\r\n        messagesData: state.dialogsPage.messages\r\n    };\r\n};\r\n\r\nexport default compose<ComponentType>(withAuthRedirect, connect(mapStateToProps, {...actions})) (Dialogs);\r\n\r\n","import Spinner from \"./spinner\";\r\nexport default Spinner;","import React, {useEffect, useState} from \"react\";\r\nimport {ChangeEvent} from \"react\";\r\n\r\ntype PropTypes = {\r\n    status: string,\r\n    updateStatus: (value: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropTypes> = ({status, updateStatus}) => {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [value, setValue] = useState(status);\r\n\r\n    useEffect(() => {\r\n        setValue(status);\r\n    }, [status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    };\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        updateStatus(value);\r\n    };\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(e.target.value);\r\n    };\r\n\r\n    const content = editMode\r\n        ? <input\r\n            onBlur={deactivateEditMode}\r\n            autoFocus\r\n            type=\"text\"\r\n            onChange={onStatusChange}\r\n            value={value}/>\r\n        : <span onDoubleClick={activateEditMode}>{status || '...'}</span>;\r\n    return (\r\n        <>\r\n            <div>\r\n                {content}\r\n            </div>\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;","// import classes from \"./profileInfo/profileInfo.module.scss\";\r\nimport React from \"react\";\r\nimport {Field, Form, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input, Textarea} from \"../../common/formsControl/formControls\";\r\nimport {requiredField} from \"../../../utils/validators\";\r\nimport classes from \"../../common/formsControl/formControls.module.scss\";\r\nimport {ProfileType} from \"../../../types/types\";\r\n\r\ntype PropTypes = {\r\n    profile: ProfileType\r\n}\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropTypes> & PropTypes> = ({handleSubmit, profile, error}) => {\r\n\r\n    const summaryError = error ? <div className={classes.summaryError}>{error}</div> : null;\r\n\r\n    const contactsInput = Object.keys(profile.contacts).map((key) => {\r\n        return <div key={key}>{key} <Field name={`contacts.${key}`} component={Input}/></div>;\r\n    });\r\n\r\n\r\n    return (\r\n        <>\r\n            <Form onSubmit={handleSubmit}>\r\n                <div>FullName: <Field name={'fullName'} placeholder={\"Your full name\"} validate={[requiredField]}\r\n                                      component={Input}/></div>\r\n                <div>About me: <Field name={'aboutMe'} placeholder={\"About me\"} component={Input}/></div>\r\n                <div>looking for a job: <Field name={'lookingForAJob'} component={Input} type={'checkbox'}/></div>\r\n                <div>My professional skills: <Field name={'lookingForAJobDescription'}\r\n                                                    placeholder={'Your professional skills ?'} component={Textarea}/>\r\n                </div>\r\n                {contactsInput}\r\n                <div>{summaryError}</div>\r\n                <button>Save</button>\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nconst ProfileDataReduxForm = reduxForm<ProfileType, PropTypes>({form: 'edit-profile'})(ProfileDataForm);\r\nexport default ProfileDataReduxForm;","import classes from \"./profileInfo.module.scss\";\r\nimport React, {ChangeEvent, useState} from \"react\";\r\n\r\nimport Spinner from \"../../common/spinner\";\r\nimport userPhoto from '../../../assets/img/avatar.png';\r\nimport ProfileStatusWithHooks from \"../profileStatus/profileStatusWithHooks\";\r\nimport ProfileDataForm from \"./profileDataForm\";\r\nimport {ContactsType, ProfileType} from \"../../../types/types\";\r\n\r\n\r\ntype ProfileInfoPropTypes = {\r\n    profile: ProfileType | null,\r\n    status: string,\r\n    updateStatus: () => void,\r\n    isOwner: boolean,\r\n    savePhoto: (photo: File) => void,\r\n    saveProfile: (formData: ProfileType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo:React.FC<ProfileInfoPropTypes> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n    const [editMode, changeEditMode] = useState(false);\r\n\r\n    const toggleEditMode = () => {\r\n        if (!editMode) {\r\n            changeEditMode(true);\r\n        } else {\r\n            changeEditMode(false);\r\n        }\r\n    };\r\n\r\n    const onPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        e.preventDefault();\r\n        if (e.target.files?.length === 1) {\r\n            const photo = e.target.files[0];\r\n            savePhoto(photo);\r\n        }\r\n    };\r\n\r\n\r\n    const onFormSubmit = (formData: ProfileType) => {\r\n        saveProfile(formData).then(\r\n            () => {toggleEditMode();}\r\n        );\r\n    };\r\n\r\n    if (!profile) {\r\n        return <Spinner/>;\r\n    }\r\n\r\n    const {photos} = profile;\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={classes.description}>\r\n                <div>\r\n                    <img className={classes.profilePhoto} alt={'user photo'} src={photos.large || userPhoto}/>\r\n                    {isOwner && <input onChange={onPhotoSelected} type=\"file\"/>}\r\n                    <b>status: </b><ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n                </div>\r\n                {editMode\r\n                    ? <ProfileDataForm initialValues={profile}\r\n                                       profile={profile}\r\n                                       onSubmit={onFormSubmit}/>\r\n                    : <ProfileData isOwner={isOwner}\r\n                                   profile={profile}\r\n                                   toggleEditMode={toggleEditMode}/>}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\ntype ContactPropTypes = {\r\n    contactTitle: string,\r\n    contactValue: any\r\n}\r\n\r\nconst Contact: React.FC<ContactPropTypes> = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <div>{contactTitle} : {contactValue}</div>\r\n    );\r\n};\r\n\r\ntype ProfileDataPropTypes = {\r\n    profile: ProfileType,\r\n    toggleEditMode: () => void,\r\n    isOwner: any\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataPropTypes> = ({profile, toggleEditMode, isOwner}) => {\r\n    const {fullName, aboutMe, lookingForAJob, lookingForAJobDescription, contacts} = profile;\r\n    return (\r\n        <div className={classes.descr}>\r\n            data\r\n            {isOwner ? <button onClick={toggleEditMode}>edit</button> : null}\r\n            <div>FullName: {fullName}</div>\r\n            <div>About me: {aboutMe}</div>\r\n            <div>{lookingForAJob ? \"looking for a job\" : \"lol job?\"}</div>\r\n            <div>Skills: {lookingForAJob ? lookingForAJobDescription : null}</div>\r\n            <div>Contacts: {\r\n                Object.keys(contacts)\r\n                    .map((title) => {\r\n                return <Contact key={title} contactTitle={title} contactValue={contacts[title as keyof ContactsType]}/>;\r\n            })}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileInfo;","import Post from './post';\r\nexport default Post;","import React from 'react';\r\nimport classes from './post.module.scss';\r\n\r\ntype PostProps = {\r\n    img: string,\r\n    text: string,\r\n    likesCount: number\r\n}\r\n\r\nconst Post:React.FC<PostProps> = ({img, text, likesCount}) => {\r\n    return (\r\n        <div className={classes.item}>\r\n            <img src={img} alt='avatar'/>\r\n            {text}\r\n            <div>\r\n                <span>like {likesCount}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Post;","import {ResultsCodesEnum} from \"../api/api\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\nimport {PhotosType, PostType, ProfileType} from \"../types/types\";\r\nimport {CommonThunkType, InferActionsTypes} from \"./reduxStore\";\r\nimport {profileApi} from \"../api/profileApi\";\r\n\r\nconst initialState = {\r\n    posts: [\r\n        {\r\n            img: 'https://cdn4.iconfinder.com/data/icons/small-n-flat/24/user-alt-512.png',\r\n            text: 'wow',\r\n            likesCount: 2,\r\n            id: 1\r\n        },\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: '',\r\n    onProfilePage: false\r\n};\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    let newPost;\r\n    switch (action.type) {\r\n        case \"PROFILE/ADD-POST\":\r\n            newPost = {\r\n                img: 'https://cdn4.iconfinder.com/data/icons/small-n-flat/24/user-alt-512.png',\r\n                id: 2,\r\n                text: action.postText,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost]\r\n            };\r\n        case \"PROFILE/SET_PROFILE\":\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            };\r\n        case \"PROFILE/SET_STATUS\":\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n        case \"PROFILE/DELETE_POST\":\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(({id}) => id !== action.id)\r\n            };\r\n        case \"PROFILE/SAVE_PHOTO_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photos} as ProfileType\r\n            };\r\n        case \"PROFILE/SAVE_PROFILE_DATA_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, ...action.profile}\r\n            };\r\n        case \"PROFILE/ON_PROFILE_PAGE\":\r\n            return {\r\n                ...state,\r\n                onProfilePage: action.bool\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    addNewPost : (postText: string) => ({type: 'PROFILE/ADD-POST', postText} as const),\r\n    setProfile : (profile: ProfileType) => ({type: 'PROFILE/SET_PROFILE', profile} as const),\r\n    setStatus : (status: string) => ({type: 'PROFILE/SET_STATUS', status} as const),\r\n    deletePost : (id: number) => ({type: 'PROFILE/DELETE_POST', id} as const),\r\n    savePhotoSuccess : (photos: PhotosType)=> ({\r\n        type: 'PROFILE/SAVE_PHOTO_SUCCESS',\r\n        photos\r\n    } as const),\r\n    saveProfileDataSuccess : (profile: ProfileType) => ({\r\n        type: 'PROFILE/SAVE_PROFILE_DATA_SUCCESS',\r\n        profile\r\n    } as const),\r\n    onProfilePage: (bool: boolean) => ({type: 'PROFILE/ON_PROFILE_PAGE', bool}) as const\r\n};\r\n\r\nexport const getProfile = (id: number ): ThunkType => async (dispatch) => {\r\n    let profileData = await profileApi.getProfile(id);\r\n    dispatch(actions.setProfile(profileData));\r\n};\r\n\r\nexport const getStatus = (id: number): ThunkType => async (dispatch) => {\r\n    let status = await profileApi.getStatus(id);\r\n    dispatch(actions.setStatus(status));\r\n};\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    let res = await profileApi.updateStatus(status);\r\n    if (res.data.resultCode === ResultsCodesEnum.Success) {\r\n        dispatch(actions.setStatus(status));\r\n    }\r\n};\r\n\r\nexport const savePhoto = (photo: any): ThunkType => async (dispatch) => {\r\n    let data = await profileApi.uploadUserPhoto(photo);\r\n    if (data.resultCode === ResultsCodesEnum.Success) {\r\n        dispatch(actions.savePhotoSuccess(data.data.photos));\r\n    }\r\n};\r\n\r\nexport const saveProfileData = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    let data = await profileApi.uploadUserData(profile);\r\n    const userId = getState().auth.userId;\r\n    if (data.resultCode === ResultsCodesEnum.Success) {\r\n        if (userId != null){\r\n            dispatch(getProfile(userId));\r\n        }else {\r\n            throw new Error(\"User id can`t be null\");\r\n        }\r\n    } else {\r\n        let message = data.messages.length !== 0 ? data.messages[0] : \"some error\";\r\n        let action = stopSubmit(\"edit-profile\", {_error: message});\r\n        dispatch(action);\r\n        return Promise.reject(data.messages[0]);\r\n    }\r\n};\r\n\r\nexport default profileReducer;\r\n\r\n// Type\r\ntype ThunkType = CommonThunkType<ActionsType | FormAction>\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>;","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, requiredField} from \"../../../../utils/validators\";\r\nimport {Textarea} from \"../../../common/formsControl/formControls\";\r\nimport {MyPostsFormValuesType} from \"../myPosts\";\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\ntype PropTypes = {}\r\n\r\nconst MyPostForm:React.FC<InjectedFormProps<MyPostsFormValuesType, PropTypes> & PropTypes> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field placeholder={'Enter your post text'} validate={[requiredField, maxLength10]} name={\"postText\"} component={Textarea}/>\r\n            <button>Add post</button>\r\n        </form>);\r\n};\r\n\r\nexport default reduxForm<MyPostsFormValuesType>({form: 'postForm'})(MyPostForm);\r\n","import MyPostForm from \"./myPostForm\";\r\n\r\nexport default MyPostForm;","import React, {memo} from 'react';\r\nimport Post from './post';\r\nimport classes from './myPosts.module.scss';\r\nimport {actions} from \"../../../redux/profileReducer\";\r\nimport {connect} from \"react-redux\";\r\nimport MyPostForm from \"./myPostForm\";\r\nimport {InitialStateType} from \"../../../redux/profileReducer\";\r\nimport {AppStateType} from \"../../../redux/reduxStore\";\r\n\r\n\r\ntype PropTypes= {\r\n    postData: InitialStateType[\"posts\"],\r\n    addNewPost: (value: string) => void\r\n}\r\nexport type MyPostsFormValuesType = {\r\n    postText: string\r\n}\r\n\r\n// eslint-disable-next-line react/display-name\r\nconst MyPosts: React.FC<PropTypes> = memo(props => {\r\n    let {postData, addNewPost} = props;\r\n\r\n    const posts = postData.map(({img, text, id, likesCount}) => {\r\n        return <Post key={id} img={img} text={text} likesCount={likesCount}/>;\r\n    });\r\n\r\n    const addPost = (value: MyPostsFormValuesType) => {\r\n        const post = value.postText;\r\n        addNewPost(post);\r\n    };\r\n    return (\r\n        <div className={classes.postBlock}>\r\n            <h3>My post</h3>\r\n            <div>New post</div>\r\n            <MyPostForm onSubmit={addPost}/>\r\n            <div>\r\n                {posts}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        postData: state.profilePage.posts,\r\n    };\r\n};\r\n\r\nconst {addNewPost} = actions;\r\nexport default connect(mapStateToProps, {addNewPost})(MyPosts);","import React from 'react';\r\nimport classes from './profile.module.scss';\r\nimport ProfileInfo from \"./profileInfo/profileInfo\";\r\nimport MyPosts from \"./myPosts/myPosts\";\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\ntype PropTypes = {\r\n    profile: ProfileType | null,\r\n    status: string,\r\n    updateStatus: () => void,\r\n    isOwner: boolean,\r\n    savePhoto: (file: File) => void,\r\n    saveProfile: (formData: ProfileType) => Promise<any>\r\n}\r\n\r\nconst Profile: React.FC<PropTypes> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n\r\n    return (\r\n        <div className={classes.profile}>\r\n            <ProfileInfo saveProfile={saveProfile} savePhoto={savePhoto} isOwner={isOwner} status={status} profile={profile} updateStatus={updateStatus}/>\r\n            <MyPosts/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;","import Profile from \"./profile\";\r\nimport React, {Component} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {actions, getProfile, getStatus, savePhoto, saveProfileData, updateStatus} from \"../../redux/profileReducer\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\n\r\ntype PathParamsType = {\r\n    id: string\r\n}\r\ntype MapDispatchType = {\r\n    savePhoto: (photo: any) => void,\r\n    getProfile: (id: number ) => void,\r\n    getStatus: (id: number ) => void,\r\n    saveProfileData: () => Promise<void>,\r\n    updateStatus: () => void,\r\n    onProfilePage: (bool: boolean) => void\r\n}\r\ntype MapStateProps = ReturnType<typeof mapStateToProps>\r\n\r\ntype PropTypes = MapStateProps & MapDispatchType & RouteComponentProps<PathParamsType>\r\n\r\nclass ProfileAPI extends Component<PropTypes> {\r\n\r\n    savePhoto = (photo: any) => {\r\n        const {savePhoto} = this.props;\r\n        savePhoto(photo);\r\n    };\r\n\r\n    refreshProfileData = () => {\r\n        const {getProfile, match, getStatus, authUserId} = this.props;\r\n        let id: number | null = +match.params.id;\r\n        if (!id) {\r\n            id = authUserId;\r\n            if (!id) {\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n        getProfile(id as number);\r\n        getStatus(id as number);\r\n    };\r\n\r\n    componentDidMount() {\r\n        const {onProfilePage} = this.props;\r\n        onProfilePage(true);\r\n        this.refreshProfileData();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropTypes) {\r\n        if (prevProps.match.params.id !== this.props.match.params.id) {\r\n            this.refreshProfileData();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount(): void {\r\n        onProfilePage(false);\r\n    }\r\n\r\n    render() {\r\n        const {profile, status, updateStatus, saveProfileData} = this.props;\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.id}\r\n                     profile={profile}\r\n                     status={status}\r\n                     savePhoto={(photo) => this.savePhoto(photo)}\r\n                     updateStatus={updateStatus}\r\n                     saveProfile={saveProfileData}/>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authUserId: state.auth.userId,\r\n    };\r\n};\r\n\r\nconst {onProfilePage} = actions;\r\n\r\nexport default compose<React.ComponentType>(\r\n    withRouter, connect(mapStateToProps, {onProfilePage, getProfile, getStatus, updateStatus, savePhoto, saveProfileData}))(ProfileAPI);\r\n\r\n","export default __webpack_public_path__ + \"static/media/Plus-Icon-PNG.ac4270cf.png\";","export default __webpack_public_path__ + \"static/media/check.c4294ef8.png\";","import User from \"./user\";\r\nexport default User;","\r\nimport React from \"react\";\r\nimport classes from './user.module.scss';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nimport plus from './Plus-Icon-PNG.png';\r\nimport check from './check.png';\r\n\r\ntype PropsType = {\r\n    fullName: string,\r\n    onFollowClick: () => void,\r\n    followStatus: boolean,\r\n    photoUrl: string,\r\n    status: string,\r\n    id: number,\r\n    followingInProgress: Array<number>\r\n}\r\n\r\nconst User:React.FC<PropsType> = ({fullName, onFollowClick, followStatus,\r\n                                       photoUrl, status,\r\n                                      id: userId, followingInProgress}) => {\r\n    return (\r\n        <div className={classes.user}>\r\n            <div className={classes.user}>\r\n                <div>\r\n                    <NavLink to={`/profile/${userId}`}>\r\n                        <img src={photoUrl} alt='user photo' className={classes.user_photo}/>\r\n                    </NavLink>\r\n                </div>\r\n                <div>\r\n                    <div className={classes.user_name}>{fullName}</div><div className={classes.user_status}>{status}</div>\r\n                </div>\r\n                <div>\r\n                    <button className={classes.subscribe}\r\n                            disabled={followingInProgress.some(id => id === userId)}\r\n                            onClick={onFollowClick}>\r\n                            <img src={!followStatus ? plus : check} alt={'follow'}/>\r\n                            </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default User;","export default __webpack_public_path__ + \"static/media/next.43c0e5d8.svg\";","export default __webpack_public_path__ + \"static/media/prev.07f693de.svg\";","import Paginator from \"./paginator\";\r\n\r\nexport default Paginator;","import React, {useState} from 'react';\r\nimport styles from \"./paginator.module.scss\";\r\nimport cn from \"classnames\";\r\nimport next from './next.svg';\r\nimport prev from './prev.svg';\r\ntype PropsType = {\r\n    totalItemsCount: number,\r\n    pageSize: number,\r\n    currentPage: number,\r\n    onPageChanged: (pageNumber: number) => void,\r\n    portionSize?: number\r\n}\r\n\r\nlet Paginator: React.FC<PropsType> = ({\r\n                                          totalItemsCount, pageSize, currentPage\r\n                                          , onPageChanged, portionSize = 10\r\n                                      }) => {\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n\r\n    let pages: Array<number> = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    if (pagesCount < 2) {\r\n        return null;\r\n    }\r\n    return (\r\n        <div className={styles.paginator}>\r\n        {portionNumber > 1 &&\r\n        <span className={styles.navBtn + ' ' + styles.left} onClick={() => {\r\n            setPortionNumber(portionNumber - 1);\r\n        }}><img src={prev} alt=\"next\"/></span>}\r\n\r\n        {pages\r\n            .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n            .map((p) => {\r\n                return <span className={cn({\r\n                    [styles.selectedPage]: currentPage === p\r\n                }, styles.pageNumber)}\r\n                             key={p}\r\n                             onClick={() => {\r\n                                 onPageChanged(p);\r\n                             }}>{p}</span>;\r\n            })}\r\n        {portionCount > portionNumber &&\r\n        <span className={styles.navBtn + ' ' + styles.right} onClick={() => {\r\n            setPortionNumber(portionNumber + 1);\r\n        }}><img src={next} alt=\"next\"/></span>}\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default Paginator;","import {axiosInstance, GetItemsType, ResponseType} from \"./api\";\r\n\r\nexport const usersApi = {\r\n    getUsers: async (currentPage = 1, pageSize = 10, term: string = '', friend: null | boolean = null) => {\r\n        const url =`/users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? '': `&friend=${friend}`);\r\n        return axiosInstance.get<GetItemsType>(url).then(res => res.data);\r\n    },\r\n    followUser: (id: number) => {\r\n        return axiosInstance.post<ResponseType>(`/follow/${id}`).then(res => res.data);\r\n    },\r\n    unFollowUser: (id: number) => {\r\n        return axiosInstance.delete(`/follow/${id}`).then(res => res.data) as Promise<ResponseType>;\r\n    }\r\n};","import {UserType} from \"../types/types\";\r\nimport {CommonThunkType, InferActionsTypes} from \"./reduxStore\";\r\nimport {usersApi} from \"../api/usersApi\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ResultsCodesEnum} from \"../api/api\";\r\n\r\nconst initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 8,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isLoading: false,\r\n    followingInProgress: [] as Array<number>, //array of users ID\r\n    filter: {\r\n        term: '',\r\n        friend: null as null | boolean,\r\n    }\r\n};\r\n\r\nconst usersReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"USERS/SET_USERS\":\r\n            return {\r\n                ...state,\r\n                users: [...action.users]\r\n            };\r\n        case \"USERS/TOGGLE_FOLLOW\":\r\n            return {\r\n                ...state,\r\n                users: state.users.map((user) => {\r\n                    if (user.id === action.id) {\r\n                        return {...user, followed: !user.followed};\r\n                    }\r\n                    return user;\r\n                })\r\n            };\r\n        case \"USERS/SET_TOTAL_USERS_COUNT\":\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.usersCount\r\n            };\r\n        case \"USERS/SET_CURRENT_PAGE\":\r\n            return {\r\n                ...state,\r\n                currentPage: action.pageNumber\r\n            };\r\n        case \"USERS/TOGGLE_LOADING\":\r\n            return {\r\n                ...state,\r\n                isLoading: !state.isLoading\r\n            };\r\n        case \"USERS/TOGGLE_FOLLOWING_PROGRESS\":\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.id]\r\n                    : state.followingInProgress.filter(id => id !== action.id)\r\n            };\r\n        case \"USERS/SET_FILTER\":\r\n            return {\r\n                ...state,\r\n                filter: action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    toggleLoadingStatus : () => ({type: 'USERS/TOGGLE_LOADING'} as const),\r\n    setTotalUsersCount : (usersCount: number) => ({\r\n        type: 'USERS/SET_TOTAL_USERS_COUNT',\r\n        usersCount\r\n    } as const),\r\n    setCurrentPage : (pageNumber: number) => ({type: 'USERS/SET_CURRENT_PAGE', pageNumber} as const),\r\n    setUsers : (users: Array<UserType>) => ({type: 'USERS/SET_USERS', users} as const),\r\n    toggleFollowingProgress : (id: number, isFetching: boolean) => ({\r\n        type: 'USERS/TOGGLE_FOLLOWING_PROGRESS',\r\n        id,\r\n        isFetching\r\n    } as const),\r\n    follow: (id: number) =>  ({type: 'USERS/TOGGLE_FOLLOW', id} as const),\r\n    setFilter: (payload: FilterFormType) => ({type: 'USERS/SET_FILTER', payload} as const),\r\n};\r\n\r\nexport const requestUsers = (currentPage: number, pageSize: number): ThunkType =>\r\n    async (dispatch, getState) => {\r\n        dispatch(actions.toggleLoadingStatus());\r\n        let res;\r\n        let filter = getState().usersPage.filter;\r\n        res = await usersApi.getUsers(currentPage, pageSize, filter.term, filter.friend);\r\n        dispatch(actions.toggleLoadingStatus());\r\n        dispatch(actions.setTotalUsersCount(res.totalCount));\r\n        dispatch(actions.setUsers(res.items));\r\n    };\r\n\r\nconst _followUnfollowFlow = async (dispatch: Dispatch<ActionsType>, id: number, action: (id: number) => ActionsType, apiMethod: any) => {\r\n    dispatch(actions.toggleFollowingProgress(id, true));\r\n    let data = await apiMethod(id);\r\n    if (data.resultCode === ResultsCodesEnum.Success) {\r\n        dispatch(action(id));\r\n        dispatch(actions.toggleFollowingProgress(id, false));\r\n    }\r\n};\r\n\r\nexport const followUser = (id: number): ThunkType => async (dispatch) => {\r\n    _followUnfollowFlow(dispatch, id, actions.follow, usersApi.followUser);\r\n};\r\n\r\nexport const unFollowUser = (id: number): ThunkType => async (dispatch) => {\r\n    _followUnfollowFlow(dispatch, id, actions.follow, usersApi.unFollowUser);\r\n};\r\n\r\n\r\nexport default usersReducer;\r\n\r\n//Type\r\nexport type FilterFormType = typeof initialState.filter\r\ntype ThunkType = CommonThunkType<ActionsType>\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>","import {AppStateType} from \"./reduxStore\";\r\n\r\nexport const getUsers = (state: AppStateType) => {\r\n    return state.usersPage.users;\r\n};\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize;\r\n};\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount;\r\n};\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage;\r\n};\r\nexport const getIsLoadingStatus = (state: AppStateType) => {\r\n    return state.usersPage.isLoading;\r\n};\r\nexport const getIsFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress;\r\n};\r\nexport const getFilter = (state: AppStateType) => {\r\n    return state.usersPage.filter;\r\n};\r\n","import {Users} from \"./Users\";\r\nexport default Users;","import React, {useEffect} from 'react';\nimport User from './user';\nimport userPhoto from '../../assets/img/avatar.png';\nimport Paginator from \"./paginator\";\nimport Spinner from \"../common/spinner\";\n// import UsersSearchForm from './usersSearchForm';\nimport {actions, requestUsers, followUser, unFollowUser} from \"../../redux/usersReducer\";\nimport classes from \"./users.module.scss\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    getCurrentPage,\n    getIsFollowingInProgress,\n    getIsLoadingStatus,\n    getPageSize,\n    getTotalUsersCount,\n    getUsers\n} from \"../../redux/userSelectors\";\n\nexport const Users: React.FC = () => {\n    const totalUsersCount = useSelector(getTotalUsersCount);\n    const currentPage = useSelector(getCurrentPage);\n    const pageSize = useSelector(getPageSize);\n    const usersData = useSelector(getUsers);\n    const isLoading = useSelector(getIsLoadingStatus);\n    const followingInProgress = useSelector(getIsFollowingInProgress);\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(requestUsers(currentPage, pageSize));\n        return () => {\n            dispatch(actions.setFilter({friend: null, term: ''}));\n        };\n    }, []);\n\n    const onPageChanged = (pageNumber: number) => {\n        dispatch(actions.setCurrentPage(pageNumber));\n        dispatch(requestUsers(pageNumber, pageSize));\n    };\n\n\n    const followUserClick = (id: number) => {\n        dispatch(followUser(id));\n    };\n\n    const unFollowUserClick = (id: number) => {\n        dispatch(unFollowUser(id));\n    };\n\n    const users = usersData.map(({id, name, status, followed, photos}) => {\n        return <User\n            onFollowClick={() => followed ? unFollowUserClick(id) : followUserClick(id)}\n            key={id}\n            photoUrl={photos.small ? photos.small : userPhoto}\n            followStatus={followed}\n            fullName={name}\n            status={status}\n            id={id}\n            followingInProgress={followingInProgress}/>;\n    });\n\n    const usersContent = isLoading ? <Spinner/> : users;\n    if (usersData.length === 0 && !isLoading) {\n        return <div className={classes.users}>\n            <div className={classes.notFound}>\n                <img src=\"http://vkclub.su/_data/stickers/gribson/sticker_vk_gribson_019.png\" alt=\"oops\"/>\n                <p>Sorry users not found</p>\n            </div>\n        </div>\n    }\n    return (\n        <div className={classes.users}>\n            <>\n                <div className={classes.usersContainer}>\n                    {usersContent}\n                </div>\n                <div className={classes.paginator}>\n                    <Paginator\n                        totalItemsCount={totalUsersCount}\n                        pageSize={pageSize}\n                        currentPage={currentPage}\n                        onPageChanged={onPageChanged}\n                    />\n                </div>\n            </>\n\n        </div>\n    );\n};\n\n\n","import React from \"react\";\nimport {Form, Formik, Field} from \"formik\";\nimport {FilterFormType} from \"../../../redux/usersReducer\";\nimport classes from '../../header/header.module.scss';\ntype UsersSearchFormPropTypes ={\n    onSubmit: (data: FilterFormType) => void\n}\n\ntype FormType = {\n    term: string,\n    friend: \"true\" | \"false\" | \"null\"\n}\nconst UsersSearchForm: React.FC<UsersSearchFormPropTypes> = ({onSubmit}) => {\n    const onButtonClick = (values: FormType) => {\n        const filter = {\n            term: values.term,\n            friend: values.friend === 'null' ? null : values.friend !== 'false'\n        };\n        onSubmit(filter);\n    };\n    return (\n            <Formik\n                initialValues={{term: '', friend: \"null\"}}\n                onSubmit={onButtonClick}\n            >\n                {() => (\n                    <Form>\n                        <Field type=\"text\" name=\"term\" />\n                        <Field as=\"select\" name=\"friend\">\n                            <option value=\"null\">All</option>\n                            <option value=\"true\">Only followed</option>\n                            <option value=\"false\">Only unfollowed</option>\n                        </Field>\n                             <button className={classes.submit} type=\"submit\"/>\n                    </Form>\n                )}\n            </Formik>\n    );\n};\n\nexport default React.memo(UsersSearchForm);","import React from 'react';\nimport classes from './header.module.scss';\nimport UsersSearchFormik from \"../users/usersSearchForm/UsersSearchFormik\";\nimport {NavLink} from \"react-router-dom\";\nimport {FilterFormType} from \"../../redux/usersReducer\";\n\ntype PropTypes = {\n    isAuth: boolean,\n    login: string | null,\n    logout: () =>  void,\n    onSearchSubmit: (filter: FilterFormType) => void\n}\n\nconst Header: React.FC<PropTypes> = ({login, logout, isAuth, onSearchSubmit}) => {\n    return (\n        <header className={classes.header}>\n            {isAuth ? <HeaderContent onSearchSubmit={onSearchSubmit} login={login} logout={logout}/> : <h1 className={classes.logo + ' ' + classes.logo_noAuth}>mashroom</h1>}\n        </header>\n    );\n};\n\ntype HeaderContentType = {\n    login: string | null,\n    logout: () => void,\n    onSearchSubmit: (filter: FilterFormType) => void\n}\n\nconst HeaderContent: React.FC<HeaderContentType> = ({onSearchSubmit}) => {\n    return (\n        <div >\n            <div className={classes.content}>\n                <h1 className={classes.logo + ' ' +classes.logo_auth}>mashroom</h1>\n                <UsersSearchFormik onSubmit={onSearchSubmit}/>\n                <ul className={classes.menu}>\n                    <li><NavLink activeClassName={classes.active} to='/profile'>PROFILE</NavLink></li>\n                    <li><NavLink activeClassName={classes.active} to='/users'>USERS</NavLink></li>\n                    <li><NavLink activeClassName={classes.active} to='/dialogs'>MESSAGES</NavLink></li>\n                    <NavLink className={classes.settings} activeClassName={classes.active} to='/settings'/>\n                </ul>\n\n            </div>\n        </div>\n\n    );\n};\n\nexport default Header;","import React from 'react';\nimport Header from './header';\nimport {connect} from 'react-redux';\nimport {logout} from \"../../redux/authReducer\";\nimport {AppStateType} from \"../../redux/reduxStore\";\nimport {actions, FilterFormType, requestUsers} from \"../../redux/usersReducer\";\nimport {withRouter} from 'react-router-dom';\n\ntype MapDispatchType = {\n    logout: () => void,\n    setFilter: (filter: FilterFormType) => void,\n    requestUsers: (pageSize: number, currentPage: number) => void,\n}\ntype PathParamsType = {\n    location: any,\n    history: any\n}\n\ntype MapStateProps = ReturnType<typeof mapStateToProps>\ntype PropTypes = MapStateProps & MapDispatchType & PathParamsType\n\n\nconst HeaderAPI: React.FC<PropTypes> = (props) => {\n    const {isAuth, login, logout, pageSize, setFilter, requestUsers} = props;\n    const onFilterChanged = (filter: FilterFormType) => {\n        setFilter(filter);\n        if(props.location.pathname !== '/users') {\n            props.history.push('/users');\n        }\n        requestUsers(1, pageSize);\n    };\n    return (\n        <Header {...props} onSearchSubmit={onFilterChanged} logout={logout} isAuth={isAuth} login={login}/>\n    );\n};\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        isAuth: state.auth.isAuth,\n        login: state.auth.login,\n        pageSize: state.usersPage.pageSize\n    };\n};\n\nconst {setFilter} = actions;\n\n\nexport default withRouter(connect<MapStateProps, MapDispatchType, {}, AppStateType>(mapStateToProps, {logout, requestUsers, setFilter})(HeaderAPI));\n\n\n","import LoginForm from \"./loginForm\";\r\n\r\nexport default LoginForm;","import React from \"react\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Input} from \"../../common/formsControl/formControls\";\nimport {requiredField} from \"../../../utils/validators\";\nimport {LoginFormValuesType} from \"../login\";\nimport classes from './loginForm.module.scss';\n\ntype LoginFormOwnProps = {captcha: string | null}\n\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> = ({error, captcha, handleSubmit}) => {\n    const summaryError = error ? <div className={classes.summaryError}>{error}</div> : null;\n    return (\n        <form className={classes.form} onSubmit={handleSubmit}>\n            <div className={classes.input}>\n                <div>Email</div>\n                <Field validate={[requiredField]} type=\"text\" name={'email'} placeholder={'login'} component={Input}/>\n            </div>\n            <div className={classes.input}>\n                <div>Password</div>\n                <Field validate={[requiredField]} type=\"password\" name={'password'} placeholder={'password'}\n                        component={Input}/>\n            </div>\n            <div className={classes.checkbox}>\n                <Field type=\"checkbox\" name={'rememberMe'} component={Input}/>\n                <div className={classes.remember}>Remember me</div>\n            </div>\n            {summaryError}\n            {captcha ?\n                <div>\n                    <img src={captcha} alt=\"captcha\"/>\n                    <Field placeholder={\"captcha text\"} validate={[requiredField]} type=\"text\" name={\"captcha\"} component={Input}/>\n                </div>\n                : null}\n            <div className={classes.button}>\n                <button>Login</button>\n            </div>\n        </form>\n    );\n};\n\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginForm);\n\nexport default LoginReduxForm;","import {AppStateType} from \"./reduxStore\";\r\n\r\nexport const getCaptcha = (state: AppStateType) => {\r\n    return state.auth.captcha;\r\n};\r\nexport const getIsAuth = (state: AppStateType) => {\r\n    return state.auth.isAuth;\r\n};","import {Login} from \"./login\";\r\nexport default Login;","import React from \"react\";\r\nimport LoginReduxForm from \"./loginForm\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport classes from './login.module.scss';\r\nimport {getCaptcha, getIsAuth} from \"../../redux/authSelectors\";\r\nimport {login} from \"../../redux/authReducer\";\r\n\r\nexport type LoginFormValuesType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    captcha: string\r\n}\r\n\r\nexport const Login: React.FC = () => {\r\n\r\n    const captcha = useSelector(getCaptcha);\r\n    const isAuth = useSelector(getIsAuth);\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        const {email, password, rememberMe, captcha} = formData;\r\n        dispatch(login(email, password, rememberMe, captcha));\r\n    };\r\n\r\n\r\n    if (isAuth) return <Redirect to={'/profile'}/>;\r\n\r\n    return (\r\n        <div className={classes.login}>\r\n            <LoginReduxForm captcha={captcha} onSubmit={onSubmit}/>\r\n            <div className={classes.descr}>\r\n                <p>Welcome to the mashroom</p>\r\n                <ul>\r\n                    <li>Communication</li>\r\n                    <li>News</li>\r\n                    <li>Self-expression</li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n","import {getAuth} from \"./authReducer\";\r\nimport {InferActionsTypes} from \"./reduxStore\";\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    initialized: false\r\n};\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType=> {\r\n\r\n    switch (action.type) {\r\n        case 'APP/INITIALIZED_SUCCESS':\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    initializedSuccess : () => ({type: 'APP/INITIALIZED_SUCCESS'} as const)\r\n};\r\n\r\n\r\nexport default appReducer;\r\n\r\nexport const initializeApp = () => async (dispatch : any) => {\r\n    let dispatchResult = dispatch(getAuth());\r\n    dispatchResult\r\n        .then(() => {\r\n            dispatch(actions.initializedSuccess());\r\n        });\r\n};","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer from \"./profileReducer\";\r\nimport dialogsReducer from \"./dialogsReducer\";\r\nimport sidebarReducer from \"./sidebarReducer\";\r\nimport usersReducer from \"./usersReducer\";\r\nimport authReducer from \"./authReducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport {reducer as formReducer} from 'redux-form';\r\nimport appReducer from \"./appReducer\";\r\nimport logger from 'redux-logger';\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    form: formReducer\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer;\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n\r\nexport type InferActionsTypes<T> = T extends {[keys:string]: (...args: any[]) => infer U} ? U : never\r\n\r\nexport type CommonThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware, logger)));\r\n// @ts-ignore\r\nexport default store;","import PageNotFound from \"./404page\";\n\nexport default PageNotFound;","import React from \"react\";\nimport classes from './pageNotFound.module.scss';\nconst PageNotFound = () => {\n    return (\n        <div className={classes.pageNotFound}>\n            <img src=\"http://vkclub.su/_data/stickers/gribson/sticker_vk_gribson_019.png\" alt=\"\"/>\n            <p>Oooops! <br/> Page not found</p>\n        </div>\n    );\n};\n\nexport default PageNotFound;","import React, {Component, ComponentType, Suspense} from 'react';\nimport NavBar from '../nav/nav';\nimport {Redirect, Switch, withRouter, Route, HashRouter} from \"react-router-dom\";\nimport './app.scss';\nimport Settings from \"../settings\";\nimport Dialogs from \"../dialogs\";\nimport ProfileAPI from \"../profile/profileAPI\";\nimport UsersPage from \"../users\";\nimport HeaderAPI from \"../header/headerAPI\";\nimport Login from \"../login\";\nimport {connect, Provider} from \"react-redux\";\nimport {compose} from \"redux\";\nimport {initializeApp} from \"../../redux/appReducer\";\nimport Spinner from \"../common/spinner\";\nimport store, {AppStateType} from \"../../redux/reduxStore\";\nimport PageNotFound from '../404page';\n\n\n\n\ntype MapStateToPropsType = ReturnType<typeof mapStateToProps>\ntype MapDispatchToProps = {\n    initializeApp: () => void\n}\ntype PropTypes = MapStateToPropsType & MapDispatchToProps\n\nconst News = React.lazy(() => import('../news'));\nconst Music = React.lazy(() => import('../music'));\n\nclass App extends Component<PropTypes> {\n\n    catchAllUnhandledErrors = () => {\n        alert('some error occurred');\n    };\n\n    componentDidMount() {\n        const {initializeApp} = this.props;\n        initializeApp();\n        window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors);\n    }\n\n    render() {\n        if (!this.props.initialized) return <Spinner/>;\n        if (!this.props.isAuth) return <Login/>;\n        return (\n            <>\n            <div className='app _container'>\n                    <HeaderAPI/>\n                    {this.props.isAuth ? <NavBar/> : null}\n                    <div className='app-wrapper-content'>\n                        <Suspense fallback={<Spinner/>}>\n                            <Switch>\n                                <Route exact path='/' render={() => <Redirect to={'/profile'}/>}/>\n                                <Route path='/profile/:id?' render={() => <ProfileAPI />}/>\n                                <Route path='/dialogs' render={() => <Dialogs/>}/>\n                                <Route path='/music' component={Music}/>\n                                <Route path='/news' component={News}/>\n                                <Route path='/users' component={UsersPage}/>\n                                <Route path='/settings' component={Settings}/>\n                                <Route path='/login' component={Login}/>\n                                <Route path='*' component={PageNotFound}/>\n                            </Switch>\n                        </Suspense>\n                    </div>\n            </div>\n\n                </>\n        );\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        initialized: state.app.initialized,\n        isAuth: state.auth.isAuth\n    };\n};\nlet AppContainer = compose<ComponentType>(withRouter, connect(mapStateToProps, {initializeApp}))(App);\nconst MainApp: React.FC = () => {\n    return (\n        <HashRouter>\n            <Provider store={store}>\n                <AppContainer/>\n            </Provider>\n        </HashRouter>\n    );\n};\nexport default MainApp;","import ReactDOM from \"react-dom\";\r\nimport React from \"react\";\r\nimport MainApp from \"./component/app/app\";\r\n\r\n\r\nReactDOM.render(<MainApp/>, document.getElementById('root'));\r\n\r\n\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"paginator_paginator__2ARdb\",\"pageNumber\":\"paginator_pageNumber__2YQgy\",\"selectedPage\":\"paginator_selectedPage__2Px8m\",\"navBtn\":\"paginator_navBtn__3q56V\",\"right\":\"paginator_right__1dCx0\",\"left\":\"paginator_left__1Iv1A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"loginForm_form__3Vb_K\",\"input\":\"loginForm_input__ziBHz\",\"checkbox\":\"loginForm_checkbox__3e9UO\",\"remember\":\"loginForm_remember__jXYoO\",\"button\":\"loginForm_button__1C0af\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"user\":\"user_user__1hjSD\",\"user_photo\":\"user_user_photo__15M4Y\",\"user_name\":\"user_user_name__1beMh\",\"user_status\":\"user_user_status__30yOH\",\"subscribe\":\"user_subscribe__HXmuo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"formControls_formControl__nwszG\",\"error\":\"formControls_error__23Zih\",\"summaryError\":\"formControls_summaryError__4h2HN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"users\":\"users_users__1XLYr\",\"paginator\":\"users_paginator__2pEaW\",\"notFound\":\"users_notFound__2jHfh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"dialogs_dialogs__14W0_\",\"dialogsItems\":\"dialogs_dialogsItems__oSSNC\",\"messagesContainer\":\"dialogs_messagesContainer__DD0fF\",\"messages\":\"dialogs_messages__Odv3N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"dialog_dialog__SgFmC\",\"active\":\"dialog_active__2_S4l\",\"name\":\"dialog_name__Ax5JM\",\"photo\":\"dialog_photo__27FwB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"message_message__2SYi-\",\"text\":\"message_text__3wddD\",\"photo\":\"message_photo__3wU4g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"dialogsForm_wrapper__3Ba7c\",\"form\":\"dialogsForm_form__C9lDk\",\"photo\":\"dialogsForm_photo__2t1e_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"description\":\"profileInfo_description__3o5_0\",\"profilePhoto\":\"profileInfo_profilePhoto__splgS\",\"contacts\":\"profileInfo_contacts__3I2Gx\"};"],"sourceRoot":""}