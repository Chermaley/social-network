{"version":3,"sources":["component/dialogs/dialogItem/dialog.module.scss","component/common/spinner/spinner.module.scss","component/header/header.module.scss","component/login/login.module.scss","component/profile/profile.module.scss","component/profile/myPosts/post/post.module.scss","component/profile/myPosts/myPosts.module.scss","component/users/user/user.module.scss","component/nav/nav.module.scss","component/nav/nav.tsx","component/settings/index.js","component/settings/settings.tsx","component/dialogs/dialogItem/dialog.tsx","component/dialogs/message/index.js","component/dialogs/message/message.tsx","redux/dialogsReducer.ts","component/redirectHOC/redirectHOC.tsx","api/api.ts","component/common/formsControl/formControls.tsx","utils/validators/validators.js","component/dialogs/dialogsForm/index.js","component/dialogs/dialogsForm/dialogsForm.tsx","component/dialogs/index.js","component/dialogs/dialogs.tsx","component/common/spinner/index.js","component/common/spinner/spinner.tsx","assets/img/avatar.png","component/profile/profileStatus/profileStatusWithHooks.tsx","component/profile/profileInfo/profileDataForm.tsx","component/profile/profileInfo/profileInfo.tsx","component/profile/myPosts/post/index.js","component/profile/myPosts/post/post.tsx","api/profileApi.ts","redux/profileReducer.ts","component/profile/myPosts/myPostForm/myPostForm.tsx","component/profile/myPosts/myPostForm/index.js","component/profile/myPosts/myPosts.tsx","component/profile/profile.tsx","component/profile/profileAPI.tsx","api/usersApi.ts","redux/usersReducer.ts","component/users/user/index.js","component/users/user/user.tsx","component/users/paginator/index.js","component/users/paginator/paginator.tsx","component/users/usersSearchForm/UsersSearchFormik.tsx","component/users/usersSearchForm/index.js","component/users/Users.tsx","redux/userSelectors.ts","component/users/usersAPI.tsx","component/header/header.tsx","api/authApi.ts","api/securityApi.ts","redux/authReducer.ts","component/header/headerAPI.tsx","component/login/loginForm/index.js","component/login/loginForm/loginForm.tsx","component/login/index.js","component/login/login.tsx","redux/appReducer.ts","redux/sidebarReducer.ts","redux/reduxStore.ts","component/app/app.tsx","index.js","component/login/loginForm/loginForm.module.scss","component/common/formsControl/formControls.module.scss","component/dialogs/dialogs.module.scss","component/profile/profileInfo/profileInfo.module.scss","component/users/paginator/paginator.module.scss"],"names":["module","exports","connect","className","classes","navbar","items","item","activeClassName","active","to","Settings","Dialog","person","id","path","dialog","Message","label","message","initialState","messages","dialogs","dialogsReducer","newMessage","state","action","type","withAuthRedirect","Component","isAuth","auth","props","restProps","ResultsCodesEnum","ResultsCodeForCaptcha","FormControl","meta","touched","error","children","hasError","errorMessage","formControl","Textarea","input","Input","requiredField","value","DialogsForm","reduxForm","form","onSubmit","handleSubmit","Field","component","name","validate","Dialogs","compose","dialogsData","dialogsPage","messagesData","addNewMessage","map","dialogsItems","newMessageText","Spinner","preloader","spinner","ProfileStatusWithHooks","status","updateStatus","useState","editMode","setEditMode","setValue","useEffect","content","onBlur","autoFocus","onChange","e","target","onDoubleClick","ProfileDataReduxForm","profile","summaryError","contactsInput","Object","keys","contacts","key","Form","placeholder","Contact","contactTitle","contactValue","ProfileData","toggleEditMode","isOwner","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","descr","onClick","title","ProfileInfo","savePhoto","saveProfile","changeEditMode","photos","description","profilePhoto","alt","src","large","userPhoto","preventDefault","files","length","photo","initialValues","formData","then","Post","img","text","likesCount","axiosInstance","axios","create","withCredentials","baseURL","headers","maxLength","profileApi","get","res","data","put","FormData","append","posts","actions","postText","getProfile","dispatch","a","profileData","profileReducer","newPost","filter","maxLength10","MyPostForm","MyPosts","memo","postData","addNewPost","postBlock","post","profilePage","Profile","ProfileAPI","refreshProfileData","match","getStatus","authUserId","params","history","push","this","prevProps","saveProfileData","withRouter","userId","resultCode","Success","getState","Error","stopSubmit","_error","Promise","reject","usersApi","getUsers","currentPage","pageSize","term","friend","url","followUser","unFollowUser","delete","users","totalUsersCount","isLoading","followingInProgress","usersCount","pageNumber","isFetching","payload","_followUnfollowFlow","apiMethod","usersReducer","user","followed","User","onFollowClick","followStatus","location","photoUrl","followUnfollow","disabled","some","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","portionCount","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","styles","paginator","p","cn","selectedPage","UsersSearchForm","values","as","React","Users","usersData","onFilterChanged","small","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsLoadingStatus","getIsFollowingInProgress","getFilter","UsersAPI","requestUsers","setCurrentPage","setFilter","totalCount","Header","login","logout","header","loginBlock","authApi","email","password","rememberMe","captcha","securityApi","getAuth","meData","getCaptchaUrl","authReducer","LoginForm","checkbox","remember","button","Login","reset","initialized","appReducer","friends","sidebarReducer","rootReducer","combineReducers","sidebar","app","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","logger","News","lazy","Music","App","catchAllUnhandledErrors","alert","initializeApp","addEventListener","removeEventListener","fallback","exact","render","AppContainer","MainApp","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.ac10f82b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"dialog_dialog__SgFmC\",\"active\":\"dialog_active__2_S4l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"spinner_preloader__1jMg2\",\"spinner\":\"spinner_spinner__1Hetg\",\"spin\":\"spinner_spin__A_APw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__18sGI\",\"loginBlock\":\"header_loginBlock__2ztlx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"login_login__VKdDU\",\"descr\":\"login_descr__u0f4g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"profile_profile__1d7zg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"post_item__1y2Bx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"myPosts_postBlock__1gIeR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"photo\":\"user_photo__3bUfE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"nav_navbar__1sgBY\",\"items\":\"nav_items__1HLGi\",\"item\":\"nav_item__7oIdo\",\"active\":\"nav_active__1Qdkv\"};","import React from 'react';\r\nimport classes from './nav.module.scss';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nconst NavBar = () => {\r\n    return (\r\n        <nav className={classes.navbar}>\r\n            <div className={classes.items}>\r\n                <div className={classes.item}><NavLink activeClassName={classes.active} to='/profile'>Profile</NavLink></div>\r\n                <div className={classes.item}><NavLink activeClassName={classes.active} to='/dialogs'>Messages</NavLink></div>\r\n                <div className={classes.item}><NavLink activeClassName={classes.active} to='/users'>Users</NavLink></div>\r\n                <div className={classes.item}><NavLink activeClassName={classes.active} to='/news'>News</NavLink></div>\r\n                <div className={classes.item}><NavLink activeClassName={classes.active} to='/music'>Music</NavLink></div>\r\n                <div className={classes.item}><NavLink activeClassName={classes.active} to='/settings'>Settings</NavLink></div>\r\n            </div>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default connect()(NavBar);","import Settings from \"./settings\";\r\nexport default Settings;","import React from \"react\";\r\n\r\nconst Settings = () => {\r\n    return (\r\n        <p>Settings</p>\r\n    );\r\n};\r\nexport default Settings;","import {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport classes from './dialog.module.scss';\r\n\r\ntype PropTypes = {\r\n    person: string,\r\n    id: number\r\n}\r\n\r\nconst Dialog: React.FC<PropTypes> = ({person, id}) => {\r\n    let path = `/dialogs/${id}`;\r\n    return (\r\n        <div className={classes.dialog + ' ' + classes.active}>\r\n            <NavLink to={path}>{person}</NavLink>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Dialog;","import Message from \"./message\";\r\nexport default Message;","import classes from \"./message.module.scss\";\r\nimport React from \"react\";\r\ntype PropTypes = {label: string}\r\nconst Message: React.FC<PropTypes> = ({label}) => {\r\n    return <div className={classes.message}>{label}</div>;\r\n};\r\nexport default Message;","import {InferActionsTypes} from \"./reduxStore\";\r\n\r\ntype MessagesType = {\r\n    id: number,\r\n    message: string\r\n}\r\ntype DialogType = {\r\n    id: number,\r\n    person: string\r\n}\r\nconst initialState = {\r\n        messages: [\r\n            {id: 1, message:'hey'},\r\n            {id: 2, message:'lol'}\r\n        ] as Array<MessagesType>,\r\n        dialogs: [\r\n            {person: 'Andrey', id: 1},\r\n            {person: 'Sergey', id: 2}\r\n        ] as Array<DialogType>\r\n};\r\n\r\nexport const dialogsReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    let newMessage;\r\n    switch (action.type) {\r\n        case  'DIALOGS/ADD_MESSAGE':\r\n            newMessage = {\r\n                id: 5,\r\n                message: action.message\r\n            };\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, newMessage]\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    addNewMessage : (message: string) => ({type: 'DIALOGS/ADD_MESSAGE', message} as const)\r\n};\r\nexport default dialogsReducer;\r\n\r\n// Type\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>","import {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport React from \"react\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\ntype MapPropsType = {\r\n    isAuth: boolean,\r\n}\r\ntype MapDispatchType = {}\r\nexport function withAuthRedirect<WCP>(Component: React.ComponentType<WCP>){\r\n\r\n    const WithRedirect: React.FC<MapPropsType & MapDispatchType> = (props) => {\r\n        let {isAuth, ...restProps} = props;\r\n        if (!isAuth) return <Redirect to={'/login'}/>;\r\n        return (\r\n            <Component {...restProps as unknown as WCP}/>\r\n        );\r\n    };\r\n    const mapStateToProps = (state: AppStateType): MapPropsType => {\r\n        return {\r\n            isAuth: state.auth.isAuth\r\n        };\r\n    };\r\n    return connect<MapPropsType, MapDispatchType, WCP, AppStateType>(mapStateToProps)(WithRedirect);\r\n}","import axios from \"axios\";\r\nimport {UserType} from \"../types/types\";\r\n\r\n\r\nexport const axiosInstance = axios.create({\r\n    withCredentials: true,\r\n    baseURL:\"https://social-network.samuraijs.com/api/1.0\",\r\n    headers: {\"API-KEY\": \"f68a4cda-2f4c-4785-816b-4190cdf2b12c\"}\r\n});\r\n\r\nexport type GetItemsType = {\r\n    items: Array<UserType>,\r\n    totalCount: number,\r\n    error: string | null\r\n}\r\n\r\nexport type ResponseType<D = {}, RC = ResultsCodesEnum> = {\r\n    data: D,\r\n    messages: Array<string>,\r\n    resultCode: RC,\r\n    totalCount?: number\r\n}\r\n\r\nexport enum ResultsCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\nexport enum ResultsCodeForCaptcha {\r\n    captcha = 10\r\n}\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport classes from './formControls.module.scss';\r\nimport {WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl:React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError =  touched && error;\r\n    const errorMessage = hasError ? <span>{error}</span>: null;\r\n\r\n    return (\r\n        <div className={!hasError ? classes.formControl : classes.formControl + ' ' + classes.error}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {errorMessage}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...restProps} {...input}/></FormControl>;\r\n};\r\n\r\nexport const Input: React.FC<WrappedFieldProps>  = (props) => {\r\n    const {input, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>;\r\n};\r\n","export const requiredField = value => {\r\n    if (value) return undefined;\r\n    return 'Field is required';\r\n};\r\n\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n};","import DialogsForm from \"./dialogsForm\";\r\n\r\nexport default DialogsForm;","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../common/formsControl/formControls\";\r\nimport {requiredField} from \"../../../utils/validators\";\r\nimport {DialogsFormValuesType} from \"../dialogs\";\r\n\r\n\r\ntype PropTypes = {}\r\nconst DialogsForm: React.FC<InjectedFormProps<DialogsFormValuesType, PropTypes> & PropTypes> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field\r\n                component={Textarea}\r\n                name={'newMessageText'}\r\n                validate={[requiredField]}/>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\n\r\nexport default reduxForm<DialogsFormValuesType>({form: 'addMessageForm'})(DialogsForm);\r\n","import Dialogs from \"./dialogs\";\r\nexport default Dialogs;","import React, {ComponentType} from 'react';\r\nimport classes from './dialogs.module.scss';\r\nimport Dialog from './dialogItem/dialog';\r\nimport Message from './message';\r\nimport {connect} from \"react-redux\";\r\nimport {actions, InitialStateType} from \"../../redux/dialogsReducer\";\r\nimport {withAuthRedirect} from \"../redirectHOC/redirectHOC\";\r\nimport {compose} from \"redux\";\r\nimport DialogsFormRedux from \"./dialogsForm\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\n\r\ntype PropTypes = MapStateToPropsType & MapDispatchToPropsType\r\ntype MapStateToPropsType = {\r\n    dialogsData: InitialStateType[\"dialogs\"],\r\n    messagesData:  InitialStateType[\"messages\"],\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addNewMessage: (value: string) => void\r\n}\r\nexport type DialogsFormValuesType = {\r\n    newMessageText: string,\r\n}\r\n\r\nconst Dialogs:React.FC<PropTypes> = ({dialogsData, messagesData, addNewMessage}) => {\r\n\r\n    const addMessage = (value: DialogsFormValuesType) => {\r\n        const message = value.newMessageText;\r\n        addNewMessage(message);\r\n    };\r\n\r\n    const dialogs = dialogsData.map(({id, person}) => {\r\n        return <Dialog key={id} id={id} person={person}/>;\r\n    });\r\n\r\n    const messages = messagesData.map(({message,id}) => {\r\n        return <Message key={id} label={message}/>;\r\n    });\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItems}>\r\n                {dialogs}\r\n            </div>\r\n            <div className={classes.messages}>\r\n                <div>{messages}</div>\r\n                <DialogsFormRedux onSubmit={addMessage}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsData: state.dialogsPage.dialogs,\r\n        messagesData: state.dialogsPage.messages\r\n    };\r\n};\r\n\r\nexport default compose<ComponentType>(withAuthRedirect, connect(mapStateToProps, {...actions})) (Dialogs);\r\n\r\n","import Spinner from \"./spinner\";\r\nexport default Spinner;","import React from \"react\";\r\nimport classes from './spinner.module.scss';\r\nconst Spinner = () => {\r\n    return (\r\n        <div className={classes.preloader}>\r\n            <div className={classes.spinner}></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Spinner;","export default __webpack_public_path__ + \"static/media/avatar.00971467.png\";","import React, {useEffect, useState} from \"react\";\r\nimport {ChangeEvent} from \"react\";\r\n\r\ntype PropTypes = {\r\n    status: string,\r\n    updateStatus: (value: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropTypes> = ({status, updateStatus}) => {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [value, setValue] = useState(status);\r\n\r\n    useEffect(() => {\r\n        setValue(status);\r\n    }, [status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    };\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        updateStatus(value);\r\n    };\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(e.target.value);\r\n    };\r\n\r\n    const content = editMode\r\n        ? <input\r\n            onBlur={deactivateEditMode}\r\n            autoFocus\r\n            type=\"text\"\r\n            onChange={onStatusChange}\r\n            value={value}/>\r\n        : <span onDoubleClick={activateEditMode}>{status || '...'}</span>;\r\n    return (\r\n        <>\r\n            <div>\r\n                {content}\r\n            </div>\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;","// import classes from \"./profileInfo/profileInfo.module.scss\";\r\nimport React from \"react\";\r\nimport {Field, Form, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input, Textarea} from \"../../common/formsControl/formControls\";\r\nimport {requiredField} from \"../../../utils/validators\";\r\nimport classes from \"../../common/formsControl/formControls.module.scss\";\r\nimport {ProfileType} from \"../../../types/types\";\r\n\r\ntype PropTypes = {\r\n    profile: ProfileType\r\n}\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropTypes> & PropTypes> = ({handleSubmit, profile, error}) => {\r\n\r\n    const summaryError = error ? <div className={classes.summaryError}>{error}</div> : null;\r\n\r\n    const contactsInput = Object.keys(profile.contacts).map((key) => {\r\n        return <div key={key}>{key} <Field name={`contacts.${key}`} component={Input}/></div>;\r\n    });\r\n\r\n\r\n    return (\r\n        <>\r\n            <Form onSubmit={handleSubmit}>\r\n                <div>FullName: <Field name={'fullName'} placeholder={\"Your full name\"} validate={[requiredField]}\r\n                                      component={Input}/></div>\r\n                <div>About me: <Field name={'aboutMe'} placeholder={\"About me\"} component={Input}/></div>\r\n                <div>looking for a job: <Field name={'lookingForAJob'} component={Input} type={'checkbox'}/></div>\r\n                <div>My professional skills: <Field name={'lookingForAJobDescription'}\r\n                                                    placeholder={'Your professional skills ?'} component={Textarea}/>\r\n                </div>\r\n                {contactsInput}\r\n                <div>{summaryError}</div>\r\n                <button>Save</button>\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nconst ProfileDataReduxForm = reduxForm<ProfileType, PropTypes>({form: 'edit-profile'})(ProfileDataForm);\r\nexport default ProfileDataReduxForm;","import classes from \"./profileInfo.module.scss\";\r\nimport React, {ChangeEvent, useState} from \"react\";\r\n\r\nimport Spinner from \"../../common/spinner\";\r\nimport userPhoto from '../../../assets/img/avatar.png';\r\nimport ProfileStatusWithHooks from \"../profileStatus/profileStatusWithHooks\";\r\nimport ProfileDataForm from \"./profileDataForm\";\r\nimport {ContactsType, ProfileType} from \"../../../types/types\";\r\n\r\n\r\ntype ProfileInfoPropTypes = {\r\n    profile: ProfileType | null,\r\n    status: string,\r\n    updateStatus: () => void,\r\n    isOwner: boolean,\r\n    savePhoto: (photo: File) => void,\r\n    saveProfile: (formData: ProfileType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo:React.FC<ProfileInfoPropTypes> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n    const [editMode, changeEditMode] = useState(false);\r\n\r\n    const toggleEditMode = () => {\r\n        if (!editMode) {\r\n            changeEditMode(true);\r\n        } else {\r\n            changeEditMode(false);\r\n        }\r\n    };\r\n\r\n    const onPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        e.preventDefault();\r\n        if (e.target.files?.length === 1) {\r\n            const photo = e.target.files[0];\r\n            savePhoto(photo);\r\n        }\r\n    };\r\n\r\n\r\n    const onFormSubmit = (formData: ProfileType) => {\r\n        saveProfile(formData).then(\r\n            () => {toggleEditMode();}\r\n        );\r\n    };\r\n\r\n    if (!profile) {\r\n        return <Spinner/>;\r\n    }\r\n\r\n    const {photos} = profile;\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={classes.description}>\r\n                <div>\r\n                    <img className={classes.profilePhoto} alt={'user photo'} src={photos.large || userPhoto}/>\r\n                    {isOwner && <input onChange={onPhotoSelected} type=\"file\"/>}\r\n                    <b>status: </b><ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n                </div>\r\n                {editMode\r\n                    ? <ProfileDataForm initialValues={profile}\r\n                                       profile={profile}\r\n                                       onSubmit={onFormSubmit}/>\r\n                    : <ProfileData isOwner={isOwner}\r\n                                   profile={profile}\r\n                                   toggleEditMode={toggleEditMode}/>}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\ntype ContactPropTypes = {\r\n    contactTitle: string,\r\n    contactValue: any\r\n}\r\n\r\nconst Contact: React.FC<ContactPropTypes> = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <div>{contactTitle} : {contactValue}</div>\r\n    );\r\n};\r\n\r\ntype ProfileDataPropTypes = {\r\n    profile: ProfileType,\r\n    toggleEditMode: () => void,\r\n    isOwner: any\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataPropTypes> = ({profile, toggleEditMode, isOwner}) => {\r\n    const {fullName, aboutMe, lookingForAJob, lookingForAJobDescription, contacts} = profile;\r\n    return (\r\n        <div className={classes.descr}>\r\n            data\r\n            {isOwner ? <button onClick={toggleEditMode}>edit</button> : null}\r\n            <div>FullName: {fullName}</div>\r\n            <div>About me: {aboutMe}</div>\r\n            <div>{lookingForAJob ? \"looking for a job\" : \"job?\"}</div>\r\n            <div>Skills: {lookingForAJob ? lookingForAJobDescription : null}</div>\r\n            <div>Contacts: {\r\n                Object.keys(contacts)\r\n                    .map((title) => {\r\n                return <Contact key={title} contactTitle={title} contactValue={contacts[title as keyof ContactsType]}/>;\r\n            })}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileInfo;","import Post from './post';\r\nexport default Post;","import React from 'react';\r\nimport classes from './post.module.scss';\r\n\r\ntype PostProps = {\r\n    img: string,\r\n    text: string,\r\n    likesCount: number\r\n}\r\n\r\nconst Post:React.FC<PostProps> = ({img, text, likesCount}) => {\r\n    return (\r\n        <div className={classes.item}>\r\n            <img src={img} alt='avatar'/>\r\n            {text}\r\n            <div>\r\n                <span>like {likesCount}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Post;","import {PhotosType, ProfileType} from \"../types/types\";\r\nimport {axiosInstance, ResponseType} from \"./api\";\r\n\r\ntype savePhotoResDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileApi = {\r\n    getProfile: (id: number) => {\r\n        return axiosInstance.get<ProfileType>(`/profile/${id}`).then(res => res.data);\r\n    },\r\n    getStatus: (id: number) => {\r\n        return axiosInstance.get<string>(`/profile/status/${id}`).then(res => res.data);\r\n    },\r\n    updateStatus: (status: string) => {\r\n        return axiosInstance.put<ResponseType>(`/profile/status`, {status: status});\r\n    },\r\n    uploadUserPhoto: (photo: File) => {\r\n        const formData = new FormData;\r\n        formData.append(\"image\", photo);\r\n        return axiosInstance.put<ResponseType<savePhotoResDataType>>('/profile/photo', formData, {\r\n            headers: {\r\n                'Content-type': 'multipart/form-data'\r\n            }\r\n        }).then(res => res.data);\r\n    },\r\n    uploadUserData: (profile: ProfileType) => {\r\n        return axiosInstance.put<ResponseType>('/profile', profile).then(res => res.data);\r\n    }\r\n};","import {ResultsCodesEnum} from \"../api/api\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\nimport {PhotosType, PostType, ProfileType} from \"../types/types\";\r\nimport {CommonThunkType, InferActionsTypes} from \"./reduxStore\";\r\nimport {profileApi} from \"../api/profileApi\";\r\n\r\nconst initialState = {\r\n    posts: [\r\n        {\r\n            img: 'https://cdn4.iconfinder.com/data/icons/small-n-flat/24/user-alt-512.png',\r\n            text: 'wow',\r\n            likesCount: 2,\r\n            id: 1\r\n        },\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: ''\r\n};\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    let newPost;\r\n    switch (action.type) {\r\n        case \"PROFILE/ADD-POST\":\r\n            newPost = {\r\n                img: 'https://cdn4.iconfinder.com/data/icons/small-n-flat/24/user-alt-512.png',\r\n                id: 2,\r\n                text: action.postText,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost]\r\n            };\r\n        case \"PROFILE/SET_PROFILE\":\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            };\r\n        case \"PROFILE/SET_STATUS\":\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n        case \"PROFILE/DELETE_POST\":\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(({id}) => id !== action.id)\r\n            };\r\n        case \"PROFILE/SAVE_PHOTO_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photos} as ProfileType\r\n            };\r\n        case \"PROFILE/SAVE_PROFILE_DATA_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, ...action.profile}\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    addNewPost : (postText: string) => ({type: 'PROFILE/ADD-POST', postText} as const),\r\n    setProfile : (profile: ProfileType) => ({type: 'PROFILE/SET_PROFILE', profile} as const),\r\n    setStatus : (status: string) => ({type: 'PROFILE/SET_STATUS', status} as const),\r\n    deletePost : (id: number) => ({type: 'PROFILE/DELETE_POST', id} as const),\r\n    savePhotoSuccess : (photos: PhotosType)=> ({\r\n        type: 'PROFILE/SAVE_PHOTO_SUCCESS',\r\n        photos\r\n    } as const),\r\n    saveProfileDataSuccess : (profile: ProfileType) => ({\r\n        type: 'PROFILE/SAVE_PROFILE_DATA_SUCCESS',\r\n        profile\r\n    } as const)\r\n};\r\n\r\nexport const getProfile = (id: number ): ThunkType => async (dispatch) => {\r\n    let profileData = await profileApi.getProfile(id);\r\n    dispatch(actions.setProfile(profileData));\r\n};\r\n\r\nexport const getStatus = (id: number): ThunkType => async (dispatch) => {\r\n    let status = await profileApi.getStatus(id);\r\n    dispatch(actions.setStatus(status));\r\n};\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    let res = await profileApi.updateStatus(status);\r\n    if (res.data.resultCode === ResultsCodesEnum.Success) {\r\n        dispatch(actions.setStatus(status));\r\n    }\r\n};\r\n\r\nexport const savePhoto = (photo: any): ThunkType => async (dispatch) => {\r\n    let data = await profileApi.uploadUserPhoto(photo);\r\n    if (data.resultCode === ResultsCodesEnum.Success) {\r\n        dispatch(actions.savePhotoSuccess(data.data.photos));\r\n    }\r\n};\r\n\r\nexport const saveProfileData = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    let data = await profileApi.uploadUserData(profile);\r\n    const userId = getState().auth.userId;\r\n    if (data.resultCode === ResultsCodesEnum.Success) {\r\n        if (userId != null){\r\n            dispatch(getProfile(userId));\r\n        }else {\r\n            throw new Error(\"User id can`t be null\");\r\n        }\r\n    } else {\r\n        let message = data.messages.length !== 0 ? data.messages[0] : \"some error\";\r\n        let action = stopSubmit(\"edit-profile\", {_error: message});\r\n        dispatch(action);\r\n        return Promise.reject(data.messages[0]);\r\n    }\r\n};\r\n\r\nexport default profileReducer;\r\n\r\n// Type\r\ntype ThunkType = CommonThunkType<ActionsType | FormAction>\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>;","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, requiredField} from \"../../../../utils/validators\";\r\nimport {Textarea} from \"../../../common/formsControl/formControls\";\r\nimport {MyPostsFormValuesType} from \"../myPosts\";\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\ntype PropTypes = {}\r\n\r\nconst MyPostForm:React.FC<InjectedFormProps<MyPostsFormValuesType, PropTypes> & PropTypes> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field placeholder={'Enter your post text'} validate={[requiredField, maxLength10]} name={\"postText\"} component={Textarea}/>\r\n            <button>Add post</button>\r\n        </form>);\r\n};\r\n\r\nexport default reduxForm<MyPostsFormValuesType>({form: 'postForm'})(MyPostForm);\r\n","import MyPostForm from \"./myPostForm\";\r\n\r\nexport default MyPostForm;","import React, {memo} from 'react';\r\nimport Post from './post';\r\nimport classes from './myPosts.module.scss';\r\nimport {actions} from \"../../../redux/profileReducer\";\r\nimport {connect} from \"react-redux\";\r\nimport MyPostForm from \"./myPostForm\";\r\nimport {InitialStateType} from \"../../../redux/profileReducer\";\r\nimport {AppStateType} from \"../../../redux/reduxStore\";\r\n\r\n\r\ntype PropTypes= {\r\n    postData: InitialStateType[\"posts\"],\r\n    addNewPost: (value: string) => void\r\n}\r\nexport type MyPostsFormValuesType = {\r\n    postText: string\r\n}\r\n\r\n// eslint-disable-next-line react/display-name\r\nconst MyPosts: React.FC<PropTypes> = memo(props => {\r\n    let {postData, addNewPost} = props;\r\n\r\n    const posts = postData.map(({img, text, id, likesCount}) => {\r\n        return <Post key={id} img={img} text={text} likesCount={likesCount}/>;\r\n    });\r\n\r\n    const addPost = (value: MyPostsFormValuesType) => {\r\n        const post = value.postText;\r\n        addNewPost(post);\r\n    };\r\n    return (\r\n        <div className={classes.postBlock}>\r\n            <h3>My post</h3>\r\n            <div>New post</div>\r\n            <MyPostForm onSubmit={addPost}/>\r\n            <div>\r\n                {posts}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        postData: state.profilePage.posts,\r\n    };\r\n};\r\n\r\nconst {addNewPost} = actions;\r\nexport default connect(mapStateToProps, {addNewPost})(MyPosts);","import React from 'react';\r\nimport classes from './profile.module.scss';\r\nimport ProfileInfo from \"./profileInfo/profileInfo\";\r\nimport MyPosts from \"./myPosts/myPosts\";\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\ntype PropTypes = {\r\n    profile: ProfileType | null,\r\n    status: string,\r\n    updateStatus: () => void,\r\n    isOwner: boolean,\r\n    savePhoto: (file: File) => void,\r\n    saveProfile: (formData: ProfileType) => Promise<any>\r\n}\r\n\r\nconst Profile: React.FC<PropTypes> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n\r\n    return (\r\n        <div className={classes.profile}>\r\n            <ProfileInfo saveProfile={saveProfile} savePhoto={savePhoto} isOwner={isOwner} status={status} profile={profile} updateStatus={updateStatus}/>\r\n            <MyPosts/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;","import Profile from \"./profile\";\r\nimport React, {Component} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../redirectHOC/redirectHOC\";\r\nimport {compose} from \"redux\";\r\nimport {getProfile, getStatus, savePhoto, saveProfileData, updateStatus} from \"../../redux/profileReducer\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\n\r\ntype PathParamsType = {\r\n    id: string\r\n}\r\ntype MapDispatchType = {\r\n    savePhoto: (photo: any) => void,\r\n    getProfile: (id: number ) => void,\r\n    getStatus: (id: number ) => void,\r\n    saveProfileData: () => Promise<void>,\r\n    updateStatus: () => void,\r\n}\r\ntype MapStateProps = ReturnType<typeof mapStateToProps>\r\n\r\ntype PropTypes = MapStateProps & MapDispatchType & RouteComponentProps<PathParamsType>\r\n\r\nclass ProfileAPI extends Component<PropTypes> {\r\n\r\n    savePhoto = (photo: any) => {\r\n        const {savePhoto} = this.props;\r\n        savePhoto(photo);\r\n    };\r\n\r\n    refreshProfileData = () => {\r\n        const {getProfile, match, getStatus, authUserId} = this.props;\r\n        let id: number | null = +match.params.id;\r\n        if (!id) {\r\n            id = authUserId;\r\n            if (!id) {\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n        getProfile(id as number);\r\n        getStatus(id as number);\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.refreshProfileData();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropTypes) {\r\n        if (prevProps.match.params.id !== this.props.match.params.id) {\r\n            this.refreshProfileData();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {profile, status, updateStatus, saveProfileData} = this.props;\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.id}\r\n                     profile={profile}\r\n                     status={status}\r\n                     savePhoto={(photo) => this.savePhoto(photo)}\r\n                     updateStatus={updateStatus}\r\n                     saveProfile={saveProfileData}/>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authUserId: state.auth.userId,\r\n    };\r\n};\r\n\r\nexport default compose<React.ComponentType>(\r\n    withAuthRedirect,\r\n    withRouter, connect(mapStateToProps, {getProfile, getStatus, updateStatus, savePhoto, saveProfileData}))(ProfileAPI);\r\n\r\n","import {axiosInstance, GetItemsType, ResponseType} from \"./api\";\r\n\r\nexport const usersApi = {\r\n    getUsers: async (currentPage = 1, pageSize = 10, term: string = '', friend: null | boolean = null) => {\r\n        const url =`/users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? '': `&friend=${friend}`);\r\n        return axiosInstance.get<GetItemsType>(url).then(res => res.data);\r\n    },\r\n    followUser: (id: number) => {\r\n        return axiosInstance.post<ResponseType>(`/follow/${id}`).then(res => res.data);\r\n    },\r\n    unFollowUser: (id: number) => {\r\n        return axiosInstance.delete(`/follow/${id}`).then(res => res.data) as Promise<ResponseType>;\r\n    }\r\n};","import {UserType} from \"../types/types\";\r\nimport {CommonThunkType, InferActionsTypes} from \"./reduxStore\";\r\nimport {usersApi} from \"../api/usersApi\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ResultsCodesEnum} from \"../api/api\";\r\n\r\nconst initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 100,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isLoading: false,\r\n    followingInProgress: [] as Array<number>, //array of users ID\r\n    filter: {\r\n        term: '',\r\n        friend: null as null | boolean,\r\n    }\r\n};\r\n\r\nconst usersReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"USERS/SET_USERS\":\r\n            return {\r\n                ...state,\r\n                users: [...action.users]\r\n            };\r\n        case \"USERS/TOGGLE_FOLLOW\":\r\n            return {\r\n                ...state,\r\n                users: state.users.map((user) => {\r\n                    if (user.id === action.id) {\r\n                        return {...user, followed: !user.followed};\r\n                    }\r\n                    return user;\r\n                })\r\n            };\r\n        case \"USERS/SET_TOTAL_USERS_COUNT\":\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.usersCount\r\n            };\r\n        case \"USERS/SET_CURRENT_PAGE\":\r\n            return {\r\n                ...state,\r\n                currentPage: action.pageNumber\r\n            };\r\n        case \"USERS/TOGGLE_LOADING\":\r\n            return {\r\n                ...state,\r\n                isLoading: !state.isLoading\r\n            };\r\n        case \"USERS/TOGGLE_FOLLOWING_PROGRESS\":\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.id]\r\n                    : state.followingInProgress.filter(id => id !== action.id)\r\n            };\r\n        case \"USERS/SET_FILTER\":\r\n            return {\r\n                ...state,\r\n                filter: action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    toggleLoadingStatus : () => ({type: 'USERS/TOGGLE_LOADING'} as const),\r\n    setTotalUsersCount : (usersCount: number) => ({\r\n        type: 'USERS/SET_TOTAL_USERS_COUNT',\r\n        usersCount\r\n    } as const),\r\n    setCurrentPage : (pageNumber: number) => ({type: 'USERS/SET_CURRENT_PAGE', pageNumber} as const),\r\n    setUsers : (users: Array<UserType>) => ({type: 'USERS/SET_USERS', users} as const),\r\n    toggleFollowingProgress : (id: number, isFetching: boolean) => ({\r\n        type: 'USERS/TOGGLE_FOLLOWING_PROGRESS',\r\n        id,\r\n        isFetching\r\n    } as const),\r\n    follow: (id: number) =>  ({type: 'USERS/TOGGLE_FOLLOW', id} as const),\r\n    setFilter: (payload: FilterFormType) => ({type: 'USERS/SET_FILTER', payload} as const),\r\n};\r\n\r\nexport const requestUsers = (currentPage: number, pageSize: number): ThunkType =>\r\n    async (dispatch, getState) => {\r\n        dispatch(actions.toggleLoadingStatus());\r\n        let res;\r\n        let filter = getState().usersPage.filter;\r\n        res = await usersApi.getUsers(currentPage, pageSize, filter.term, filter.friend);\r\n        dispatch(actions.toggleLoadingStatus());\r\n        dispatch(actions.setTotalUsersCount(res.totalCount));\r\n        dispatch(actions.setUsers(res.items));\r\n    };\r\n\r\nconst _followUnfollowFlow = async (dispatch: Dispatch<ActionsType>, id: number, action: (id: number) => ActionsType, apiMethod: any) => {\r\n    dispatch(actions.toggleFollowingProgress(id, true));\r\n    let data = await apiMethod(id);\r\n    if (data.resultCode === ResultsCodesEnum.Success) {\r\n        dispatch(action(id));\r\n        dispatch(actions.toggleFollowingProgress(id, false));\r\n    }\r\n};\r\n\r\nexport const followUser = (id: number): ThunkType => async (dispatch) => {\r\n    _followUnfollowFlow(dispatch, id, actions.follow, usersApi.followUser);\r\n};\r\n\r\nexport const unFollowUser = (id: number): ThunkType => async (dispatch) => {\r\n    _followUnfollowFlow(dispatch, id, actions.follow, usersApi.unFollowUser);\r\n};\r\n\r\n\r\nexport default usersReducer;\r\n\r\n//Type\r\nexport type FilterFormType = typeof initialState.filter\r\ntype ThunkType = CommonThunkType<ActionsType>\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>","import User from \"./user\";\r\nexport default User;","import React from \"react\";\r\nimport classes from './user.module.scss';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    fullName: string,\r\n    onFollowClick: () => void,\r\n    followStatus: boolean,\r\n    location: string,\r\n    photoUrl: string,\r\n    status: string,\r\n    id: number,\r\n    followingInProgress: Array<number>\r\n}\r\n\r\nconst User:React.FC<PropsType> = ({fullName, onFollowClick, followStatus,\r\n                                      location, photoUrl, status,\r\n                                      id: userId, followingInProgress}) => {\r\n\r\n    const followUnfollow = followStatus ? 'unfollow' : 'follow';\r\n    return (\r\n        <div>\r\n            <span>\r\n                <div>\r\n                    <NavLink to={`/profile/${userId}`}>\r\n                        <img src={photoUrl} alt='user photo' className={classes.photo}/>\r\n                    </NavLink>\r\n                </div>\r\n                <div>\r\n                    <button disabled={followingInProgress.some(id => id === userId)} onClick={onFollowClick}>{followUnfollow}</button>\r\n                </div>\r\n            </span>\r\n            <span>\r\n                <span>\r\n                    <div>{fullName}</div><div>{status}</div>\r\n                </span>\r\n                <span>\r\n                    <div>{location}</div>\r\n                </span>\r\n            </span>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default User;","import Paginator from \"./paginator\";\r\n\r\nexport default Paginator;","import React, {useState} from 'react';\r\nimport styles from \"./paginator.module.scss\";\r\nimport cn from \"classnames\";\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number,\r\n    pageSize: number,\r\n    currentPage: number,\r\n    onPageChanged: (pageNumber: number) => void,\r\n    portionSize?: number\r\n}\r\n\r\nlet Paginator: React.FC<PropsType> = ({totalItemsCount, pageSize, currentPage\r\n                                                    , onPageChanged, portionSize = 10}) => {\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n\r\n    let pages: Array<number> = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n\r\n    return <div className={styles.paginator}>\r\n        {portionNumber > 1 &&\r\n        <button onClick={() => {\r\n            setPortionNumber(portionNumber - 1);\r\n        }}>PREV</button>}\r\n\r\n        {pages\r\n            .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n            .map((p) => {\r\n                return <span className={cn({\r\n                    [styles.selectedPage]: currentPage === p\r\n                }, styles.pageNumber)}\r\n                             key={p}\r\n                             onClick={() => {\r\n                                 onPageChanged(p);\r\n                             }}>{p}</span>;\r\n            })}\r\n        {portionCount > portionNumber &&\r\n        <button onClick={() => {\r\n            setPortionNumber(portionNumber + 1);\r\n        }}>NEXT</button>}\r\n\r\n\r\n    </div>;\r\n};\r\n\r\nexport default Paginator;","import React from \"react\";\r\nimport {Form, Formik, Field} from \"formik\";\r\nimport {FilterFormType} from \"../../../redux/usersReducer\";\r\n\r\ntype UsersSearchFormPropTypes ={\r\n    onSubmit: (data: FilterFormType) => void\r\n}\r\n\r\ntype FormType = {\r\n    term: string,\r\n    friend: \"true\" | \"false\" | \"null\"\r\n}\r\nconst UsersSearchForm: React.FC<UsersSearchFormPropTypes> = ({onSubmit}) => {\r\n    const onButtonClick = (values: FormType) => {\r\n        const filter = {\r\n            term: values.term,\r\n            friend: values.friend === 'null' ? null : values.friend !== 'false'\r\n        };\r\n        onSubmit(filter);\r\n\r\n    };\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={{term: '', friend: \"null\"}}\r\n                onSubmit={onButtonClick}\r\n            >\r\n                {() => (\r\n                    <Form>\r\n                        <Field type=\"text\" name=\"term\" />\r\n                        <Field as=\"select\" name=\"friend\">\r\n                            <option value=\"null\">All</option>\r\n                            <option value=\"true\">Only followed</option>\r\n                            <option value=\"false\">Only unfollowed</option>\r\n                        </Field>\r\n                        <button type=\"submit\">\r\n                            Find!\r\n                        </button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default React.memo(UsersSearchForm);","import UsersSearchForm from \"./UsersSearchFormik\";\r\n\r\nexport default UsersSearchForm;","import React from 'react';\r\nimport User from './user';\r\nimport userPhoto from '../../assets/img/avatar.png';\r\nimport Paginator from \"./paginator\";\r\nimport Spinner from \"../common/spinner\";\r\nimport {UserType} from \"../../types/types\";\r\n\r\nimport UsersSearchForm from './usersSearchForm';\r\nimport {FilterFormType} from \"../../redux/usersReducer\";\r\n\r\n\r\ntype PropsType = {\r\n    usersData: Array<UserType>,\r\n    totalUsersCount: number,\r\n    pageSize: number,\r\n    currentPage: number,\r\n    onPageChanged: (pageNumber: number) => void,\r\n    followingInProgress: Array<number>,\r\n    followUser: (id: number) => void,\r\n    unFollowUser: (id: number) => void,\r\n    isLoading: boolean,\r\n    onFilterChanged: (data: FilterFormType) => void\r\n}\r\n\r\nconst Users: React.FC<PropsType> = (props) => {\r\n    const {\r\n        usersData, totalUsersCount,\r\n        pageSize, currentPage,\r\n        onPageChanged, followingInProgress,\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        followUser, unFollowUser, isLoading, onFilterChanged\r\n    } = props;\r\n\r\n    const users = usersData.map(({id, name, status, followed, photos}) => {\r\n        return <User\r\n            onFollowClick={() => followed ? unFollowUser(id) : followUser(id)}\r\n            key={id}\r\n            photoUrl={photos.small ? photos.small : userPhoto}\r\n            followStatus={followed}\r\n            fullName={name}\r\n            location={'Russia'}\r\n            status={status}\r\n            id={id}\r\n            followingInProgress={followingInProgress}/>;\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <UsersSearchForm onSubmit={onFilterChanged}/>\r\n            <Paginator totalItemsCount={totalUsersCount}\r\n                       pageSize={pageSize}\r\n                       currentPage={currentPage}\r\n                       onPageChanged={onPageChanged}\r\n            />\r\n            {isLoading ? <Spinner/> : users}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Users;","import {AppStateType} from \"./reduxStore\";\r\n\r\nexport const getUsers = (state: AppStateType) => {\r\n    return state.usersPage.users;\r\n};\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize;\r\n};\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount;\r\n};\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage;\r\n};\r\nexport const getIsLoadingStatus = (state: AppStateType) => {\r\n    return state.usersPage.isLoading;\r\n};\r\nexport const getIsFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress;\r\n};\r\nexport const getFilter = (state: AppStateType) => {\r\n    return state.usersPage.filter;\r\n};\r\n","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {\r\n    followUser,\r\n    requestUsers,\r\n    unFollowUser,\r\n    actions, FilterFormType\r\n} from '../../redux/usersReducer';\r\nimport Users from './Users';\r\n\r\nimport {\r\n    getCurrentPage,\r\n    getFilter,\r\n    getIsFollowingInProgress,\r\n    getIsLoadingStatus,\r\n    getPageSize,\r\n    getTotalUsersCount, getUsers\r\n} from \"../../redux/userSelectors\";\r\nimport {UserType} from \"../../types/types\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport {compose} from 'redux';\r\n\r\n\r\n\r\ntype MapDispatchToPropsType = {\r\n    requestUsers: (currentPage: number, pageSize: number) => void,\r\n    setCurrentPage: (pageNumber: number) => void,\r\n    followUser: (id: number) => void,\r\n    unFollowUser: (id: number) => void,\r\n    setFilter: (data: FilterFormType) => void\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    usersData: Array<UserType>,\r\n    totalUsersCount: number,\r\n    pageSize: number,\r\n    currentPage: number,\r\n    isLoading: boolean,\r\n    followingInProgress: Array<number>,\r\n    filter: FilterFormType\r\n}\r\n\r\ntype OwnProps = {\r\n\r\n}\r\ntype PropType = MapDispatchToPropsType & MapStateToPropsType;\r\n\r\nclass UsersAPI extends Component<PropType> {\r\n    componentDidMount() {\r\n        const {currentPage, pageSize, requestUsers} = this.props;\r\n        requestUsers(currentPage, pageSize);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.setFilter(this.props.filter);\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        const {pageSize, requestUsers, setCurrentPage} = this.props;\r\n        setCurrentPage(pageNumber);\r\n        requestUsers(pageNumber, pageSize);\r\n\r\n    };\r\n\r\n    onFilterChanged = (filter: FilterFormType) => {\r\n        const {setFilter, requestUsers, pageSize} = this.props;\r\n        setFilter(filter);\r\n        requestUsers(1, pageSize);\r\n    };\r\n\r\n    render() {\r\n        const {usersData, followUser, unFollowUser, totalUsersCount, pageSize, currentPage, isLoading, followingInProgress} = this.props;\r\n        return (\r\n            <>\r\n                <Users\r\n                    onFilterChanged={this.onFilterChanged}\r\n                    isLoading={isLoading}\r\n                    usersData={usersData}\r\n                    totalUsersCount={totalUsersCount}\r\n                    pageSize={pageSize}\r\n                    currentPage={currentPage}\r\n                    onPageChanged={this.onPageChanged}\r\n                    followingInProgress={followingInProgress}\r\n                    followUser={followUser}\r\n                    unFollowUser={unFollowUser}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        usersData: getUsers(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        pageSize: getPageSize(state),\r\n        currentPage: getCurrentPage(state),\r\n        isLoading: getIsLoadingStatus(state),\r\n        followingInProgress: getIsFollowingInProgress(state),\r\n        filter: getFilter(state)\r\n    };\r\n};\r\n\r\nconst {setCurrentPage, setFilter} = actions;\r\n\r\nexport default compose(\r\n    connect<MapStateToPropsType, MapDispatchToPropsType, OwnProps, AppStateType>(mapStateToProps, {\r\n        requestUsers,\r\n        followUser,\r\n        unFollowUser,\r\n        setCurrentPage,\r\n        setFilter\r\n    })\r\n)(UsersAPI);\r\n","import React from 'react';\r\nimport classes from './header.module.scss';\r\n\r\ntype PropTypes = {\r\n    isAuth: boolean,\r\n    login: string | null,\r\n    logout: () =>  void\r\n}\r\n\r\nconst Header: React.FC<PropTypes> = ({isAuth, login, logout}) => {\r\n    return (\r\n        <header className={classes.header}>\r\n            <h1>mashroom</h1>\r\n            <div className={classes.loginBlock}>\r\n                {isAuth ? <div><div>{login}</div> <span onClick={logout}>Logout</span></div> : null}\r\n            </div>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;","import {axiosInstance, ResponseType, ResultsCodeForCaptcha, ResultsCodesEnum} from \"./api\";\r\n\r\n\r\ntype MeResponseDataType = {\r\n    id: number,\r\n    email: string,\r\n    login: string,\r\n}\r\n\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\n\r\n\r\nexport const authApi = {\r\n    me: () => {\r\n        return axiosInstance.get<ResponseType<MeResponseDataType>>(`/auth/me`).then(res => res.data);\r\n    },\r\n    login: (email: string, password: string, rememberMe = false, captcha: null | string = null) => {\r\n        return axiosInstance.post<ResponseType<LoginResponseDataType, ResultsCodeForCaptcha | ResultsCodesEnum>>(`/auth/login`, {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n            captcha\r\n        });\r\n    },\r\n    logout: () => {\r\n        return axiosInstance.delete('/auth/login');\r\n    },\r\n\r\n};","import {axiosInstance} from \"./api\";\r\n\r\ntype getCaptchaResponseType = {\r\n    url: string\r\n}\r\n\r\nexport const securityApi = {\r\n    getCaptcha: () => {\r\n        return axiosInstance.get<getCaptchaResponseType>('/security/get-captcha-url').then(res => res.data);\r\n    }\r\n};","import {ResultsCodesEnum, ResultsCodeForCaptcha} from \"../api/api\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\nimport {CommonThunkType, InferActionsTypes} from \"./reduxStore\";\r\nimport {authApi} from \"../api/authApi\";\r\nimport {securityApi} from \"../api/securityApi\";\r\n\r\nconst initialState = {\r\n    isLoading: false,\r\n    userId: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captcha: null as string | null\r\n};\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"AUTH/SET_USER_DATA\":\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n                isAuth: true\r\n            };\r\n        case \"AUTH/DELETE_USER_DATA\": {\r\n            return {\r\n                ...state,\r\n                userId: null,\r\n                email: null,\r\n                login: null,\r\n                isAuth: false,\r\n            };\r\n        }\r\n        case \"AUTH/SET_CAPTCHA_URL\": {\r\n            return {\r\n                ...state,\r\n                captcha: action.url\r\n            };\r\n        }\r\n        case \"AUTH/CAPTCHA_SUCCESS\": {\r\n            return {\r\n                ...state,\r\n                captcha: null\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n        }\r\n};\r\n\r\nconst actions = {\r\n    setAuthUserData :(userId: number, email: string, login: string) => ({type: 'AUTH/SET_USER_DATA', data: {userId, email, login}} as const),\r\n    deleteAuthUserData:  () => ({type: 'AUTH/DELETE_USER_DATA'} as const),\r\n    setCaptchaUrl : (url: string) => ({type: 'AUTH/SET_CAPTCHA_URL', url} as const),\r\n    captchaSuccess : () => ({type: 'AUTH/CAPTCHA_SUCCESS'} as const)\r\n};\r\n\r\nexport const getAuth = (): ThunkType => async (dispatch) => {\r\n    let meData = await authApi.me();\r\n    if (meData.resultCode === ResultsCodesEnum.Success) {\r\n        const {id, login, email} = meData.data;\r\n        dispatch(actions.setAuthUserData(id, email, login));\r\n    }\r\n};\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType =>\r\n    async (dispatch) => {\r\n        let res = await authApi.login(email, password, rememberMe, captcha);\r\n        if (res.data.resultCode === ResultsCodesEnum.Success) {\r\n            dispatch(getAuth());\r\n            dispatch(actions.captchaSuccess());\r\n        } else {\r\n            let message = res.data.messages.length !== 0 ? res.data.messages[0] : \"some error\";\r\n            let action = stopSubmit(\"login\", {_error: message});\r\n            if (res.data.resultCode === ResultsCodeForCaptcha.captcha) {\r\n                dispatch(action);\r\n                dispatch(getCaptchaUrl());\r\n            }\r\n            dispatch(action);\r\n        }\r\n    };\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    let res = await authApi.logout();\r\n    if (res.data.resultCode === ResultsCodesEnum.Success) {\r\n        dispatch(actions.deleteAuthUserData());\r\n    }\r\n};\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    let data = await securityApi.getCaptcha();\r\n    if (data.url) {\r\n        dispatch(actions.setCaptchaUrl(data.url));\r\n    }\r\n};\r\n\r\nexport default authReducer;\r\n// Type\r\nexport type InitialStateType = typeof initialState\r\ntype ThunkType = CommonThunkType<ActionsType | FormAction>\r\ntype ActionsType = InferActionsTypes<typeof actions>;\r\n","import React from 'react';\r\nimport Header from './header';\r\nimport {connect} from 'react-redux';\r\nimport {logout} from \"../../redux/authReducer\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\n\r\ntype MapDispatchType = {\r\n    logout: () => void\r\n}\r\ntype MapStateProps = ReturnType<typeof mapStateToProps>\r\ntype PropTypes = MapStateProps & MapDispatchType\r\n\r\nconst HeaderAPI: React.FC<PropTypes> = (props) => {\r\n    const {isAuth, login, logout} = props;\r\n    return (\r\n        <Header {...props} logout={logout} isAuth={isAuth} login={login}/>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login,\r\n    };\r\n};\r\n\r\n\r\nexport default connect<MapStateProps, MapDispatchType, {}, AppStateType>(mapStateToProps, {logout})(HeaderAPI);","import LoginForm from \"./loginForm\";\r\n\r\nexport default LoginForm;","import React from \"react\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Input} from \"../../common/formsControl/formControls\";\nimport {requiredField} from \"../../../utils/validators\";\nimport {LoginFormValuesType} from \"../login\";\nimport classes from './loginForm.module.scss';\n\ntype LoginFormOwnProps = {captcha: string | null}\n\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> = ({error, captcha, handleSubmit}) => {\n    const summaryError = error ? <div className={classes.summaryError}>{error}</div> : null;\n    return (\n        <form className={classes.form} onSubmit={handleSubmit}>\n            <div className={classes.input}>\n                <div>Email</div>\n                <Field validate={[requiredField]} type=\"text\" name={'email'} placeholder={'login'} component={Input}/>\n            </div>\n            <div className={classes.input}>\n                <div>Password</div>\n                <Field validate={[requiredField]} type=\"password\" name={'password'} placeholder={'password'}\n                        component={Input}/>\n            </div>\n            <div className={classes.checkbox}>\n                <Field type=\"checkbox\" name={'rememberMe'} component={Input}/>\n                <div className={classes.remember}>Remember me</div>\n            </div>\n            {summaryError}\n            {captcha ?\n                <div>\n                    <img src={captcha} alt=\"captcha\"/>\n                    <Field placeholder={\"captcha text\"} validate={[requiredField]} type=\"text\" name={\"captcha\"} component={Input}/>\n                </div>\n                : null}\n            <div className={classes.button}>\n                <button>Login</button>\n            </div>\n        </form>\n    );\n};\n\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginForm);\n\nexport default LoginReduxForm;","import Login from \"./login\";\r\nexport default Login;","import React from \"react\";\r\nimport LoginReduxForm from \"./loginForm\";\r\nimport {login} from \"../../redux/authReducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {reset} from \"redux-form\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport classes from './login.module.scss';\r\n\r\ntype MapStateToPropsType = {\r\n    captcha: string | null,\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n}\r\n\r\ntype LoginPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nexport type LoginFormValuesType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    captcha: string\r\n}\r\n\r\nconst Login: React.FC<LoginPropsType> = ({login, isAuth, captcha}) => {\r\n\r\n    const onSubmit = (formData: LoginFormValuesType, dispatch: any) => {\r\n        dispatch(reset(\"login\"));\r\n        const {email, password, rememberMe, captcha} = formData;\r\n        login(email, password, rememberMe, captcha);\r\n    };\r\n\r\n    if (isAuth) return <Redirect to={'/profile'}/>;\r\n\r\n    return (\r\n        <div className={classes.login}>\r\n            <LoginReduxForm captcha={captcha} onSubmit={onSubmit}/>\r\n            <div className={classes.descr}>\r\n                <p>Welcome to the mashroom</p>\r\n                <ul>\r\n                    <li>Communication</li>\r\n                    <li>News</li>\r\n                    <li>Self-expression</li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        captcha: state.auth.captcha\r\n    };\r\n};\r\nexport default connect(mapStateToProps ,{login})(Login);","import {getAuth} from \"./authReducer\";\r\nimport {InferActionsTypes} from \"./reduxStore\";\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    initialized: false\r\n};\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType=> {\r\n\r\n    switch (action.type) {\r\n        case 'APP/INITIALIZED_SUCCESS':\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    initializedSuccess : () => ({type: 'APP/INITIALIZED_SUCCESS'} as const)\r\n};\r\n\r\n\r\nexport default appReducer;\r\n\r\nexport const initializeApp = () => async (dispatch : any) => {\r\n    let dispatchResult = dispatch(getAuth());\r\n    dispatchResult\r\n        .then(() => {\r\n            dispatch(actions.initializedSuccess());\r\n        });\r\n};","type FriendType = {\r\n    id: number,\r\n    name: string,\r\n    photo: string\r\n}\r\nlet initialState = {\r\n    friends: [\r\n        {id: 4, name:'Anton', photo: 'https://im.kommersant.ru/Issues.photo/CORP/2019/03/01/KMO_111307_24199_1_t218_162046.jpg'},\r\n        {id: 4, name:'Anton', photo: 'https://im.kommersant.ru/Issues.photo/CORP/2019/03/01/KMO_111307_24199_1_t218_162046.jpg'},\r\n        {id: 4, name:'Anton', photo: 'https://im.kommersant.ru/Issues.photo/CORP/2019/03/01/KMO_111307_24199_1_t218_162046.jpg'},\r\n        {id: 4, name:'Anton', photo: 'https://im.kommersant.ru/Issues.photo/CORP/2019/03/01/KMO_111307_24199_1_t218_162046.jpg'},\r\n    ] as Array<FriendType>\r\n};\r\nexport type InitialStateType = typeof initialState;\r\n\r\nconst sidebarReducer = (state = initialState): InitialStateType => {\r\n    return state;\r\n};\r\n\r\nexport default sidebarReducer;","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer from \"./profileReducer\";\r\nimport dialogsReducer from \"./dialogsReducer\";\r\nimport sidebarReducer from \"./sidebarReducer\";\r\nimport usersReducer from \"./usersReducer\";\r\nimport authReducer from \"./authReducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport {reducer as formReducer} from 'redux-form';\r\nimport appReducer from \"./appReducer\";\r\nimport logger from 'redux-logger';\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    form: formReducer\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer;\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n\r\nexport type InferActionsTypes<T> = T extends {[keys:string]: (...args: any[]) => infer U} ? U : never\r\n\r\nexport type CommonThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware, logger)));\r\n// @ts-ignore\r\nexport default store;","import React, {Component, ComponentType, Suspense} from 'react';\r\nimport NavBar from '../nav/nav';\r\nimport {Redirect, Switch, withRouter, Route, HashRouter} from \"react-router-dom\";\r\nimport './app.scss';\r\nimport Settings from \"../settings\";\r\nimport Dialogs from \"../dialogs\";\r\nimport ProfileAPI from \"../profile/profileAPI\";\r\nimport UsersAPI from \"../users/usersAPI\";\r\nimport HeaderAPI from \"../header/headerAPI\";\r\nimport Login from \"../login\";\r\nimport {connect, Provider} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {initializeApp} from \"../../redux/appReducer\";\r\nimport Spinner from \"../common/spinner\";\r\nimport store, {AppStateType} from \"../../redux/reduxStore\";\r\n\r\n\r\n\r\n\r\ntype MapStateToPropsType = ReturnType<typeof mapStateToProps>\r\ntype MapDispatchToProps = {\r\n    initializeApp: () => void\r\n}\r\ntype PropTypes = MapStateToPropsType & MapDispatchToProps\r\n\r\nconst News = React.lazy(() => import('../news'));\r\nconst Music = React.lazy(() => import('../music'));\r\n\r\nclass App extends Component<PropTypes> {\r\n\r\n    catchAllUnhandledErrors = () => {\r\n        alert('some error occurred');\r\n    };\r\n\r\n    componentDidMount() {\r\n        const {initializeApp} = this.props;\r\n        initializeApp();\r\n        window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors);\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) return <Spinner/>;\r\n        return (\r\n            <div className='app'>\r\n                <HeaderAPI/>\r\n                {this.props.isAuth ? <NavBar/> : null}\r\n                <div className='app-wrapper-content'>\r\n                    <Suspense fallback={<Spinner/>}>\r\n                        <Switch>\r\n                            <Route exact path='/' render={() => <Redirect to={'/profile'}/>}/>\r\n                            <Route path='/profile/:id?' render={() => <ProfileAPI />}/>\r\n                            <Route path='/dialogs' render={() => <Dialogs/>}/>\r\n                            <Route path='/music' component={Music}/>\r\n                            <Route path='/news' component={News}/>\r\n                            <Route path='/users' component={UsersAPI}/>\r\n                            <Route path='/settings' component={Settings}/>\r\n                            <Route path='/login' component={Login}/>\r\n                            <Route path='*' render={() => <div>404 PAGE NOT FOUND :(</div>}/>\r\n                        </Switch>\r\n                    </Suspense>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        initialized: state.app.initialized,\r\n        isAuth: state.auth.isAuth\r\n    };\r\n};\r\nlet AppContainer = compose<ComponentType>(withRouter, connect(mapStateToProps, {initializeApp}))(App);\r\nconst MainApp: React.FC = () => {\r\n    return (\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <AppContainer/>\r\n            </Provider>\r\n        </HashRouter>\r\n    );\r\n};\r\nexport default MainApp;","import ReactDOM from \"react-dom\";\r\nimport React from \"react\";\r\nimport MainApp from \"./component/app/app\";\r\n\r\n\r\nReactDOM.render(<MainApp/>, document.getElementById('root'));\r\n\r\n\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"loginForm_form__3Vb_K\",\"input\":\"loginForm_input__ziBHz\",\"checkbox\":\"loginForm_checkbox__3e9UO\",\"remember\":\"loginForm_remember__jXYoO\",\"button\":\"loginForm_button__1C0af\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"formControls_formControl__nwszG\",\"error\":\"formControls_error__23Zih\",\"summaryError\":\"formControls_summaryError__4h2HN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"dialogs_dialogs__14W0_\",\"messages\":\"dialogs_messages__Odv3N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"description\":\"profileInfo_description__3o5_0\",\"profilePhoto\":\"profileInfo_profilePhoto__splgS\",\"contacts\":\"profileInfo_contacts__3I2Gx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"paginator_paginator__2ARdb\",\"pageNumber\":\"paginator_pageNumber__2YQgy\",\"selectedPage\":\"paginator_selectedPage__2Px8m\"};"],"sourceRoot":""}