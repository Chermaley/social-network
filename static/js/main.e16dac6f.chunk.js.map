{"version":3,"sources":["component/common/spinner/spinner.module.scss","component/login/login.module.scss","component/profile/profile.module.scss","component/nav/chat/chatPage.tsx","component/404page/pageNotFound.module.scss","component/profile/profileInfo/profileInfo.module.scss","component/header/header.module.scss","component/nav/nav.module.scss","api/api.ts","component/common/spinner/spinner.tsx","api/profileApi.ts","redux/sidebarReducer.ts","component/nav/nav.tsx","api/authApi.ts","api/securityApi.ts","redux/authReducer.ts","component/redirectHOC/index.js","component/settings/index.js","component/redirectHOC/redirectHOC.tsx","component/settings/settings.tsx","assets/img/avatar.png","component/dialogs/dialogItem/dialog.tsx","redux/authSelectors.ts","component/dialogs/message/index.js","component/dialogs/message/message.tsx","api/dialogsApi.ts","redux/dialogsReducer.ts","component/common/formsControl/formControls.tsx","component/dialogs/dialogsForm/index.js","component/dialogs/dialogsForm/dialogsForm.tsx","redux/dialogsSelector.ts","component/dialogs/dialogs.tsx","component/dialogs/index.js","component/users/user/Plus-Icon-PNG.png","component/users/user/check.png","component/users/user/index.js","component/users/user/user.tsx","component/users/paginator/next.svg","component/users/paginator/prev.svg","component/users/paginator/index.js","component/users/paginator/paginator.tsx","component/common/spinner/index.js","api/usersApi.ts","redux/usersReducer.ts","redux/userSelectors.ts","component/users/index.js","component/users/Users.tsx","component/users/usersSearchForm/UsersSearchFormik.tsx","component/header/header.tsx","component/header/headerAPI.tsx","utils/validators/validators.js","component/login/loginForm/index.js","component/login/loginForm/loginForm.tsx","component/login/index.js","component/login/login.tsx","redux/appReducer.ts","redux/profileReducer.ts","redux/reduxStore.ts","component/404page/index.js","component/404page/404page.tsx","component/profile/profileInfo/profileDataForm.tsx","component/profile/profileInfo/upload.svg","component/profile/profileInfo/profileLeftSide.tsx","component/profile/profileStatus/profileStatusWithHooks.tsx","component/profile/profileInfo/ProfileData.tsx","redux/profileSelectors.ts","component/profile/profileInfo/profileInfo.tsx","component/profile/profile.tsx","component/app/app.tsx","index.js","component/users/user/user.module.scss","component/users/paginator/paginator.module.scss","component/login/loginForm/loginForm.module.scss","component/common/formsControl/formControls.module.scss","component/dialogs/message/message.module.scss","component/users/users.module.scss","component/nav/chat/chatPage.module.scss","component/dialogs/dialogs.module.scss","component/dialogs/dialogItem/dialog.module.scss","component/dialogs/dialogsForm/dialogsForm.module.scss"],"names":["module","exports","ws","WebSocket","ChatPage","Chat","className","classes","chat","Messages","AddMessageForm","useState","messages","setMessages","setMessagesFromApi","e","prevState","JSON","parse","data","useEffect","console","log","addEventListener","map","m","index","Message","message","photo","src","alt","text","setMessage","onChange","target","value","onClick","send","ResultsCodesEnum","ResultsCodeForCaptcha","Spinner","preloader","spinner","axiosInstance","axios","create","withCredentials","baseURL","headers","profileApi","id","get","then","res","status","put","formData","FormData","append","profile","initialState","profileData","actions","type","sidebarReducer","state","InfoPage","onChatButtonCLick","login","useSelector","auth","email","authProfile","sidebar","dispatch","useDispatch","navbar","user","photos","small","name","fullName","button","to","interesting","title","content","getState","a","authId","userId","NavBar","toggleContent","chatContainer","authApi","password","rememberMe","captcha","post","delete","securityApi","isLoading","isAuth","url","getAuth","meData","resultCode","Success","getCaptchaUrl","authReducer","action","withAuthRedirect","Settings","Component","connect","props","restProps","Dialog","person","path","length","slice","activeClassName","active","dialog","userPhoto","getCaptcha","getIsAuth","getUserId","ownId","classname","senderId","own","noOwn","senderName","body","dialogsApi","dialogs","getDialogsFromApi","getMessagesFromApi","items","dialogsReducer","FormControl","meta","touched","error","children","hasError","errorMessage","formControl","Input","input","DialogsForm","reduxForm","form","wrapper","onSubmit","handleSubmit","Field","component","getDialogs","dialogsPage","getMessages","MessagesPage","messagesData","useParams","messagesContainer","newMessageText","sendMessage","Dialogs","dialogsData","userName","dialogsItems","User","onFollowClick","followStatus","photoUrl","followingInProgress","startDialog","user_photo","user_name","user_status","buttons","subscribe","disabled","some","check","plus","Paginator","totalItemsCount","pageSize","currentPage","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","styles","paginator","navBtn","left","prev","filter","p","cn","selectedPage","pageNumber","right","next","usersApi","getUsers","term","friend","followUser","unFollowUser","users","totalUsersCount","usersCount","isFetching","payload","requestUsers","usersPage","totalCount","_followUnfollowFlow","apiMethod","usersReducer","followed","getPageSize","getTotalUsersCount","getCurrentPage","getIsLoadingStatus","getIsFollowingInProgress","getFilter","Users","usersData","history","useHistory","queryString","location","search","substr","actualFilter","actualPage","page","query","String","pathname","onStartDialog","followUserClick","unFollowUserClick","usersContent","container","usersContainer","notFound","UsersSearchForm","enableReinitialize","initialValues","values","placeholder","as","submit","React","memo","HeaderContent","onSearchSubmit","logo","logo_auth","UsersSearchFormik","menu","settings","Header","header","HeaderAPI","useLocation","requiredField","LoginForm","summaryError","validate","checkbox","remember","Login","stopSubmit","_error","descr","initialized","appReducer","posts","img","likesCount","onProfilePage","getProfile","profileReducer","newPost","postText","bool","rootReducer","combineReducers","profilePage","app","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","logger","PageNotFound","pageNotFound","ProfileDataReduxForm","contactsInput","Object","keys","contacts","key","Form","ProfileLeftSide","isOwner","onPhotoSelected","leftSide","profilePhoto","large","upload","hidden","htmlFor","ProfileStatusWithHooks","updateStatus","editMode","setEditMode","setValue","onBlur","autoFocus","onDoubleClick","Contact","contactTitle","contactValue","contact","ProfileData","toggleEditMode","aboutMe","social","edit","getStatusSelector","getProfileSelector","ProfileInfo","changeEditMode","onSaveProfileData","Error","Promise","reject","saveProfileData","info","preventDefault","files","savePhoto","rightSide","Profile","params","authUserId","refreshProfileData","getStatus","News","lazy","Music","App","catchAllUnhandledErrors","alert","initializeApp","this","removeEventListener","fallback","exact","render","UsersPage","AppContainer","withRouter","MainApp","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.e16dac6f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"spinner_preloader__1jMg2\",\"spinner\":\"spinner_spinner__1Hetg\",\"spin\":\"spinner_spin__A_APw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"login_login__VKdDU\",\"descr\":\"login_descr__u0f4g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"profile_wrapper__o3N96\",\"profile\":\"profile_profile__1d7zg\"};","import React, {useEffect, useState} from \"react\";\r\nimport classes from './chatPage.module.scss';\r\n\r\nconst ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx');\r\n\r\nexport type ChatMessageType = {\r\n    message: string,\r\n    photo: string,\r\n    userId: number,\r\n    userName: string\r\n}\r\n\r\n\r\nconst ChatPage: React.FC = () => {\r\n    return (\r\n        <Chat/>\r\n    );\r\n};\r\n\r\nexport default ChatPage;\r\n\r\n\r\nconst Chat: React.FC = () => {\r\n\r\n    return (\r\n        <div className={classes.chat}>\r\n            <Messages/>\r\n            <AddMessageForm/>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Messages: React.FC = () => {\r\n\r\n    const [messages, setMessages] = useState<ChatMessageType[]>([]);\r\n\r\n    const setMessagesFromApi = (e: any) => {\r\n        setMessages(prevState => [...prevState, ...JSON.parse(e.data)]);\r\n    };\r\n\r\n    useEffect(() => {\r\n        console.log(1);\r\n        ws.addEventListener('message', setMessagesFromApi);\r\n    }, []);\r\n\r\n    return (\r\n        <div className={classes.messages}>\r\n            {messages.map((m, index) => {\r\n                return <Message key={index} message={m} />;\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nconst Message: React.FC<{message: ChatMessageType}> = ({message}) => {\r\n    return (\r\n        <div className={classes.message}>\r\n            <div className={classes.photo}><img src={message.photo} alt=\"userPhoto\"/></div>\r\n            <div className={classes.text}>{message.message}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst AddMessageForm: React.FC = () => {\r\n    const [message, setMessage] = useState('');\r\n    const sendMessage = () => {\r\n        if (!message) {\r\n            return;\r\n        }\r\n        ws.send(message);\r\n        setMessage('');\r\n    };\r\n    return (\r\n        <div>\r\n            <div>\r\n                <textarea onChange={(e) => setMessage(e.target.value)} value={message}/>\r\n            </div>\r\n            <div>\r\n                <button onClick={sendMessage}>Send</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageNotFound\":\"pageNotFound_pageNotFound__2eM4K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"info\":\"profileInfo_info__1fYDq\",\"leftSide\":\"profileInfo_leftSide__bO-6c\",\"upload\":\"profileInfo_upload__1kV6T\",\"profilePhoto\":\"profileInfo_profilePhoto__splgS\",\"follow\":\"profileInfo_follow__3rv86\",\"rightSide\":\"profileInfo_rightSide__Y3IuS\",\"name\":\"profileInfo_name__12nhB\",\"aboutMe\":\"profileInfo_aboutMe__nrfMw\",\"status\":\"profileInfo_status__3v-hs\",\"social\":\"profileInfo_social__3mhSL\",\"contact\":\"profileInfo_contact__23I1g\",\"edit\":\"profileInfo_edit__34Kbm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__18sGI\",\"content\":\"header_content__15Dq1\",\"submit\":\"header_submit__vXiCC\",\"logo\":\"header_logo__esTHP\",\"logo_auth\":\"header_logo_auth__2BghE\",\"logo_noAuth\":\"header_logo_noAuth__emH4y\",\"menu\":\"header_menu__2b9oq\",\"active\":\"header_active__19EXb\",\"settings\":\"header_settings__26DpH\",\"loginBlock\":\"header_loginBlock__2ztlx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"nav_navbar__1sgBY\",\"user\":\"nav_user__1bQo-\",\"photo\":\"nav_photo__2Yr4u\",\"name\":\"nav_name__1Q5pM\",\"button\":\"nav_button__3WJH1\",\"email\":\"nav_email__35rfu\",\"interesting\":\"nav_interesting__2W2LG\",\"title\":\"nav_title__7GmS6\",\"content\":\"nav_content__2rbTP\",\"chatContainer\":\"nav_chatContainer__1RIda\"};","import axios from \"axios\";\r\n\r\n\r\nexport const axiosInstance = axios.create({\r\n    withCredentials: true,\r\n    baseURL:\"https://social-network.samuraijs.com/api/1.0\",\r\n    headers: {\"API-KEY\": \"f68a4cda-2f4c-4785-816b-4190cdf2b12c\"}\r\n});\r\n\r\nexport type GetItemsType<items> = {\r\n    items: Array<items>,\r\n    totalCount: number,\r\n    error: string | null\r\n}\r\n\r\nexport type ResponseType<D = {}, RC = ResultsCodesEnum> = {\r\n    data: D,\r\n    messages: Array<string>,\r\n    resultCode: RC,\r\n    totalCount?: number\r\n}\r\n\r\nexport enum ResultsCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\nexport enum ResultsCodeForCaptcha {\r\n    captcha = 10\r\n}\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport classes from './spinner.module.scss';\r\nconst Spinner = () => {\r\n    return (\r\n        <div className={classes.preloader}>\r\n            <div className={classes.spinner}></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Spinner;","import {PhotosType, ProfileType} from \"../types/types\";\r\nimport {axiosInstance, ResponseType} from \"./api\";\r\n\r\ntype savePhotoResDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileApi = {\r\n    getProfile: (id: number) => {\r\n        return axiosInstance.get<ProfileType>(`/profile/${id}`).then(res => res.data);\r\n    },\r\n    getStatus: (id: number) => {\r\n        return axiosInstance.get<string>(`/profile/status/${id}`).then(res => res.data);\r\n    },\r\n    updateStatus: (status: string) => {\r\n        return axiosInstance.put<ResponseType>(`/profile/status`, {status: status});\r\n    },\r\n    uploadUserPhoto: (photo: File) => {\r\n        const formData = new FormData;\r\n        formData.append(\"image\", photo);\r\n        return axiosInstance.put<ResponseType<savePhotoResDataType>>('/profile/photo', formData, {\r\n            headers: {\r\n                'Content-type': 'multipart/form-data'\r\n            }\r\n        }).then(res => res.data);\r\n    },\r\n    uploadUserData: (profile: ProfileType) => {\r\n        return axiosInstance.put<ResponseType>('/profile', profile).then(res => res.data);\r\n    }\r\n};","import {ProfileType} from \"../types/types\";\r\nimport {CommonThunkType, InferActionsTypes} from \"./reduxStore\";\r\nimport {FormAction} from \"redux-form\";\r\nimport {profileApi} from \"../api/profileApi\";\r\n\r\nlet initialState = {\r\n    profileData: null as ProfileType | null\r\n};\r\n\r\n\r\nconst sidebarReducer = (state = initialState, actions: ActionsType): InitialStateType => {\r\n    switch (actions.type) {\r\n        case \"SIDEBAR/SET_PROFILE\":\r\n            return {\r\n                ...state,\r\n                profileData: actions.profile\r\n            };\r\n    }\r\n    return state;\r\n};\r\n\r\nexport const actions = {\r\n    setProfileForSideBar: (profile: ProfileType) => ({type: 'SIDEBAR/SET_PROFILE', profile} as const)\r\n};\r\n\r\nexport const getProfileForSideBar = (): ThunkType => async (dispatch, getState) => {\r\n    const authId = getState().auth.userId;\r\n    if (authId) {\r\n        let profileData = await profileApi.getProfile(authId);\r\n        dispatch(actions.setProfileForSideBar(profileData));\r\n    }\r\n};\r\n\r\nexport default sidebarReducer;\r\n\r\ntype ThunkType = CommonThunkType<ActionsType | FormAction>\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>;","import React, {useState} from 'react';\r\nimport classes from './nav.module.scss';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport Spinner from \"../common/spinner/spinner\";\r\nimport {getProfileForSideBar} from \"../../redux/sidebarReducer\";\r\nimport {Link} from 'react-router-dom';\r\nimport ChatPage from \"./chat/chatPage\";\r\n\r\nconst NavBar = () => {\r\n    const [content, toggleContent] = useState('info');\r\n\r\n    if (content === 'chat') {\r\n        return <div className={classes.chatContainer}>\r\n            <ChatPage/>\r\n        </div>;\r\n    }\r\n    else {\r\n        return <InfoPage onChatButtonCLick={() => toggleContent('chat')}/>;\r\n    }\r\n};\r\n\r\ntype InfoPagePropsType = {\r\n    onChatButtonCLick: () => void\r\n}\r\nconst InfoPage: React.FC<InfoPagePropsType> = ({onChatButtonCLick}) => {\r\n    const login = useSelector((state:AppStateType) => state.auth.email);\r\n    const authProfile = useSelector((state: AppStateType) => state.sidebar.profileData);\r\n    const dispatch = useDispatch();\r\n    const getAuthUserData = () => {\r\n        dispatch(getProfileForSideBar());\r\n    };\r\n\r\n    if(!authProfile) {\r\n        getAuthUserData();\r\n        return <Spinner/>;\r\n    }\r\n\r\n    return (\r\n        <nav className={classes.navbar}>\r\n            <div className={classes.user}>\r\n                <div className={classes.photo}><img src={authProfile.photos.small} alt=\"avatar\"/></div>\r\n                <p className={classes.name}>{authProfile.fullName}</p>\r\n                <span className={classes.email}>{login}</span>\r\n                <div className={classes.button}>\r\n                    <Link to={'/'}>Go to profile</Link>\r\n                </div>\r\n                <button onClick={onChatButtonCLick}>click to chat</button>\r\n            </div>\r\n            <div className={classes.interesting}>\r\n                <span className={classes.title}>Chat</span>\r\n                <div className={classes.content}/>\r\n            </div>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default NavBar;","import {axiosInstance, ResponseType, ResultsCodeForCaptcha, ResultsCodesEnum} from \"./api\";\r\n\r\n\r\ntype MeResponseDataType = {\r\n    id: number,\r\n    email: string,\r\n    login: string,\r\n}\r\n\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\n\r\n\r\nexport const authApi = {\r\n    me: () => {\r\n        return axiosInstance.get<ResponseType<MeResponseDataType>>(`/auth/me`).then(res => res.data);\r\n    },\r\n    login: (email: string, password: string, rememberMe = false, captcha: null | string = null) => {\r\n        return axiosInstance.post<ResponseType<LoginResponseDataType, ResultsCodeForCaptcha | ResultsCodesEnum>>(`/auth/login`, {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n            captcha\r\n        });\r\n    },\r\n    logout: () => {\r\n        return axiosInstance.delete('/auth/login');\r\n    },\r\n\r\n};","import {axiosInstance} from \"./api\";\r\n\r\ntype getCaptchaResponseType = {\r\n    url: string\r\n}\r\n\r\nexport const securityApi = {\r\n    getCaptcha: () => {\r\n        return axiosInstance.get<getCaptchaResponseType>('/security/get-captcha-url').then(res => res.data);\r\n    }\r\n};","import {ResultsCodesEnum, ResultsCodeForCaptcha} from \"../api/api\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\nimport {CommonThunkType, InferActionsTypes} from \"./reduxStore\";\r\nimport {authApi} from \"../api/authApi\";\r\nimport {securityApi} from \"../api/securityApi\";\r\n\r\nconst initialState = {\r\n    isLoading: false,\r\n    userId: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captcha: null as string | null\r\n};\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"AUTH/SET_USER_DATA\":\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n                isAuth: true\r\n            };\r\n        case \"AUTH/DELETE_USER_DATA\": {\r\n            return {\r\n                ...state,\r\n                userId: null,\r\n                email: null,\r\n                login: null,\r\n                isAuth: false,\r\n            };\r\n        }\r\n        case \"AUTH/SET_CAPTCHA_URL\": {\r\n            return {\r\n                ...state,\r\n                captcha: action.url\r\n            };\r\n        }\r\n        case \"AUTH/CAPTCHA_SUCCESS\": {\r\n            return {\r\n                ...state,\r\n                captcha: null\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n        }\r\n};\r\n\r\nconst actions = {\r\n    setAuthUserData :(userId: number, email: string, login: string) => ({type: 'AUTH/SET_USER_DATA', data: {userId, email, login}} as const),\r\n    deleteAuthUserData:  () => ({type: 'AUTH/DELETE_USER_DATA'} as const),\r\n    setCaptchaUrl : (url: string) => ({type: 'AUTH/SET_CAPTCHA_URL', url} as const),\r\n    captchaSuccess : () => ({type: 'AUTH/CAPTCHA_SUCCESS'} as const)\r\n};\r\n\r\nexport const getAuth = (): ThunkType => async (dispatch) => {\r\n    let meData = await authApi.me();\r\n    if (meData.resultCode === ResultsCodesEnum.Success) {\r\n        const {id, login, email} = meData.data;\r\n        dispatch(actions.setAuthUserData(id, email, login));\r\n    }\r\n};\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType =>\r\n    async (dispatch) => {\r\n        let res = await authApi.login(email, password, rememberMe, captcha);\r\n        if (res.data.resultCode === ResultsCodesEnum.Success) {\r\n            dispatch(getAuth());\r\n            dispatch(actions.captchaSuccess());\r\n        } else {\r\n            let message = res.data.messages.length !== 0 ? res.data.messages[0] : \"some error\";\r\n            let action = stopSubmit(\"login\", {_error: message});\r\n            if (res.data.resultCode === ResultsCodeForCaptcha.captcha) {\r\n                dispatch(action);\r\n                dispatch(getCaptchaUrl());\r\n            }\r\n            dispatch(action);\r\n        }\r\n    };\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    let res = await authApi.logout();\r\n    if (res.data.resultCode === ResultsCodesEnum.Success) {\r\n        dispatch(actions.deleteAuthUserData());\r\n    }\r\n};\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    let data = await securityApi.getCaptcha();\r\n    if (data.url) {\r\n        dispatch(actions.setCaptchaUrl(data.url));\r\n    }\r\n};\r\n\r\nexport default authReducer;\r\n// Type\r\nexport type InitialStateType = typeof initialState\r\ntype ThunkType = CommonThunkType<ActionsType | FormAction>\r\ntype ActionsType = InferActionsTypes<typeof actions>;\r\n","import {withAuthRedirect} from \"./redirectHOC\";\r\n\r\nexport default withAuthRedirect;","import Settings from \"./settings\";\r\nexport default Settings;","import {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport React from \"react\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\ntype MapPropsType = {\r\n    isAuth: boolean,\r\n}\r\ntype MapDispatchType = {}\r\nexport function withAuthRedirect<WCP>(Component: React.ComponentType<WCP>){\r\n\r\n    const WithRedirect: React.FC<MapPropsType & MapDispatchType> = (props) => {\r\n        let {isAuth, ...restProps} = props;\r\n        if (!isAuth) return <Redirect to={'/login'}/>;\r\n        return (\r\n            <Component {...restProps as unknown as WCP}/>\r\n        );\r\n    };\r\n    const mapStateToProps = (state: AppStateType): MapPropsType => {\r\n        return {\r\n            isAuth: state.auth.isAuth\r\n        };\r\n    };\r\n    return connect<MapPropsType, MapDispatchType, WCP, AppStateType>(mapStateToProps)(WithRedirect);\r\n}","import React from \"react\";\r\nimport {logout} from \"../../redux/authReducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport withAuthRedirect from \"../redirectHOC\";\r\n\r\nconst Settings = () => {\r\n    const dispatch = useDispatch();\r\n    const onLogout = () => {\r\n        dispatch(logout());\r\n    };\r\n    return (\r\n            <div>\r\n                <span onClick={onLogout}>Logout</span>\r\n            </div>\r\n    );\r\n};\r\nexport default withAuthRedirect(Settings);","export default __webpack_public_path__ + \"static/media/avatar.00971467.png\";","import {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport classes from './dialog.module.scss';\r\nimport userPhoto from '../../../assets/img/avatar.png';\r\nimport {PhotosType} from \"../../../types/types\";\r\ntype PropTypes = {\r\n    person: string,\r\n    photos: PhotosType,\r\n    id: number\r\n}\r\n\r\nconst Dialog: React.FC<PropTypes> = ({person, id, photos}) => {\r\n    let path = `/dialogs/${id}`;\r\n    if (person.length > 15) {\r\n        person = person.slice(0,15) + '...';\r\n    }\r\n    return (\r\n        <NavLink to={path} activeClassName={classes.active} className={classes.dialog}>\r\n            <div className={classes.photo}><img src={photos.small || userPhoto} alt=\"\"/></div>\r\n            <div className={classes.name}>{person}</div>\r\n        </NavLink>\r\n    );\r\n};\r\n\r\n\r\nexport default Dialog;","import {AppStateType} from \"./reduxStore\";\r\n\r\nexport const getCaptcha = (state: AppStateType) => {\r\n    return state.auth.captcha;\r\n};\r\nexport const getIsAuth = (state: AppStateType) => {\r\n    return state.auth.isAuth;\r\n};\r\nexport const getLogin = (state: AppStateType) => {\r\n    return state.auth.login;\r\n};\r\nexport const getUserId = (state: AppStateType) => {\r\n    return state.auth.userId;\r\n};\r\n","import Message from \"./message\";\r\nexport default Message;","import classes from \"./message.module.scss\";\r\nimport React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getUserId} from \"../../../redux/authSelectors\";\r\nimport {MessageType} from \"../../../redux/dialogsReducer\";\r\ntype PropTypes = {message: MessageType}\r\n\r\nconst Message: React.FC<PropTypes> = ({message}) => {\r\n    const ownId = useSelector(getUserId);\r\n    const classname = message.senderId === ownId ? classes.message + ' ' + classes.own : classes.message + ' ' + classes.noOwn;\r\n    \r\n    return <div className={classname}>\r\n        <div className={classes.senderName}><p>{message.senderName}</p></div>\r\n        <div className={classes.text}>{message.body}</div>\r\n    </div>\r\n    ;\r\n};\r\nexport default Message;","import {DialogType, MessageType} from \"../redux/dialogsReducer\";\r\nimport {axiosInstance, GetItemsType, ResponseType} from \"./api\";\r\n\r\nexport const dialogsApi = {\r\n    getDialogs: () => {\r\n        return axiosInstance.get<GetItemsType<DialogType>>(`/dialogs`).then(res => res.data);\r\n    },\r\n    startDialog: (id: number) => {\r\n        return axiosInstance.put<ResponseType>(`/dialogs/${id}`).then(res => res.data);\r\n    },\r\n    getMessages: (id: number) => {\r\n        return axiosInstance.get<GetItemsType<MessageType>>(`/dialogs/${id}/messages`).then(res => res.data);\r\n    },\r\n    sendMessage: (id: number, body: string) => {\r\n        return axiosInstance.post<ResponseType>(`/dialogs/${id}/messages` , {body}).then(res => res.data);\r\n    }\r\n}","import {CommonThunkType, InferActionsTypes} from \"./reduxStore\";\r\nimport {FormAction} from \"redux-form\";\r\nimport {dialogsApi} from \"../api/dialogsApi\";\r\nimport {PhotosType} from \"../types/types\";\r\nimport {ResultsCodesEnum} from \"../api/api\";\r\n\r\nexport type MessageType = {\r\n    addedAt: string,\r\n    body: string,\r\n    id: string,\r\n    recipientId: number,\r\n    senderId: number,\r\n    senderName: string,\r\n    translatedBody: any,\r\n    viewed: boolean\r\n}\r\n\r\nexport type DialogType = {\r\n    hasNewMessages: boolean,\r\n    id: number,\r\n    lastDialogActivityDate: \"2020-12-30T10:41:41.887\",\r\n    lastUserActivityDate: \"2020-12-27T17:05:23.097\",\r\n    newMessagesCount: 0,\r\n    photos: PhotosType,\r\n    userName: string\r\n}\r\nconst initialState = {\r\n        messages: [\r\n        ] as Array<MessageType>,\r\n        dialogs: [\r\n        ] as Array<DialogType>\r\n};\r\n\r\nexport const dialogsReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'DIALOGS/SET_MESSAGES':\r\n            return {\r\n                ...state,\r\n                messages: action.messages\r\n            };\r\n        case \"DIALOGS/SET_DIALOGS\":\r\n            return {\r\n                ...state,\r\n                dialogs: action.dialogs\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    setMessages : (messages: Array<MessageType>) => ({type: 'DIALOGS/SET_MESSAGES', messages} as const),\r\n    setDialogs: (dialogs: any) => ({type: 'DIALOGS/SET_DIALOGS', dialogs} as const)\r\n};\r\n\r\nexport const getDialogsFromApi = (): ThunkType => async (dispatch) => {\r\n    let data = await dialogsApi.getDialogs();\r\n    dispatch(actions.setDialogs(data));\r\n};\r\n\r\nexport const getMessagesFromApi = (id: number): ThunkType => async (dispatch) => {\r\n    let data = await dialogsApi.getMessages(id);\r\n    dispatch(actions.setMessages(data.items));\r\n};\r\n\r\nexport const startDialog = (id: number): ThunkType => async (dispatch) => {\r\n    const res = await dialogsApi.startDialog(id);\r\n    if(res.resultCode === ResultsCodesEnum.Success) {\r\n        dispatch(getDialogsFromApi());\r\n    }\r\n};\r\n\r\nexport const sendMessage = (id: number, body: string): ThunkType => async (dispatch) => {\r\n    let res = await dialogsApi.sendMessage(id, body);\r\n    if (res.resultCode === ResultsCodesEnum.Success) {\r\n        dispatch(getMessagesFromApi(id));\r\n    }\r\n};\r\n\r\nexport default dialogsReducer;\r\n\r\n// Type\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = CommonThunkType<ActionsType | FormAction>","import React from \"react\";\r\nimport classes from './formControls.module.scss';\r\nimport {WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl:React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError =  touched && error;\r\n    const errorMessage = hasError ? <span>{error}</span>: null;\r\n\r\n    return (\r\n        <div className={!hasError ? classes.formControl : classes.formControl + ' ' + classes.error}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {errorMessage}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...restProps} {...input}/></FormControl>;\r\n};\r\n\r\nexport const Input: React.FC<WrappedFieldProps>  = (props) => {\r\n    const {input, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>;\r\n};\r\n","import DialogsForm from \"./dialogsForm\";\r\n\r\nexport default DialogsForm;","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../../common/formsControl/formControls\";\r\nimport {DialogsFormValuesType} from \"../dialogs\";\r\nimport classes from './dialogsForm.module.scss';\r\nimport userPhoto from '../../../assets/img/avatar.png';\r\n\r\ntype PropTypes = {}\r\nconst DialogsForm: React.FC<InjectedFormProps<DialogsFormValuesType, PropTypes> & PropTypes> = (props) => {\r\n    return (<div className={classes.wrapper}>\r\n                <div className={classes.photo}><img src={userPhoto} alt=\"userPhoto\"/></div>\r\n                <form className={classes.form} onSubmit={props.handleSubmit}>\r\n                    <Field\r\n                        component={Input}\r\n                        name={'newMessageText'}/>\r\n                        <button/>\r\n                </form>\r\n            </div>\r\n\r\n    );\r\n};\r\n\r\n\r\nexport default reduxForm<DialogsFormValuesType>({form: 'addMessageForm'})(DialogsForm);\r\n","import {AppStateType} from \"./reduxStore\";\r\n\r\nexport const getDialogs = (state: AppStateType) => {\r\n    return state.dialogsPage.dialogs;\r\n};\r\n\r\nexport const getMessages = (state: AppStateType) => {\r\n    return state.dialogsPage.messages;\r\n};","// /* eslint-disable */\r\nimport React, {useEffect} from 'react';\r\nimport classes from './dialogs.module.scss';\r\nimport Dialog from './dialogItem/dialog';\r\nimport Message from './message';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getDialogsFromApi, getMessagesFromApi, sendMessage} from \"../../redux/dialogsReducer\";\r\n\r\nimport DialogsFormRedux from \"./dialogsForm\";\r\n\r\nimport {getDialogs, getMessages} from \"../../redux/dialogsSelector\";\r\nimport {useParams} from 'react-router-dom';\r\n\r\n\r\nexport type DialogsFormValuesType = {\r\n    newMessageText: string,\r\n}\r\n\r\nconst Dialogs:React.FC = () => {\r\n\r\n    const dialogsData = useSelector(getDialogs);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getDialogsFromApi());\r\n    },[]);\r\n\r\n\r\n\r\n    const dialogs = dialogsData.map(({id, userName, photos}) => {\r\n        return <Dialog key={id} id={id} person={userName} photos={photos}/>;\r\n    });\r\n\r\n\r\n    return (\r\n            <div className={classes.dialogs}>\r\n                <div className={classes.dialogsItems}>\r\n                    {dialogs}\r\n                </div>\r\n                <MessagesPage />\r\n            </div>\r\n    );\r\n};\r\n\r\n\r\nconst MessagesPage: React.FC = () => {\r\n    const messagesData = useSelector(getMessages);\r\n    const {id} = useParams<any>();\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            dispatch(getMessagesFromApi(id));\r\n        }\r\n    }, [id]);\r\n\r\n    const addMessage = (value: DialogsFormValuesType) => {\r\n        const message = value.newMessageText;\r\n        dispatch(sendMessage(id, message));\r\n    };\r\n\r\n    const messages = messagesData.map((m) => {\r\n        return <Message key={m.id} message={m}/>;\r\n    });\r\n\r\n    return (\r\n        <div className={classes.messagesContainer}>\r\n            <div className={classes.messages}>{messages}</div>\r\n            <DialogsFormRedux onSubmit={addMessage}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dialogs;\r\n\r\n","import Dialogs from \"./dialogs\";\r\nexport default Dialogs;","export default __webpack_public_path__ + \"static/media/Plus-Icon-PNG.ac4270cf.png\";","export default __webpack_public_path__ + \"static/media/check.c4294ef8.png\";","import User from \"./user\";\r\nexport default User;","\r\nimport React from \"react\";\r\nimport classes from './user.module.scss';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nimport plus from './Plus-Icon-PNG.png';\r\nimport check from './check.png';\r\n\r\ntype PropsType = {\r\n    fullName: string,\r\n    onFollowClick: () => void,\r\n    startDialog: (id: number) => void,\r\n    followStatus: boolean,\r\n    photoUrl: string,\r\n    status: string,\r\n    id: number,\r\n    followingInProgress: Array<number>\r\n}\r\n\r\nconst User:React.FC<PropsType> = ({fullName, onFollowClick, followStatus,\r\n                                       photoUrl, status,\r\n                                      id: userId, followingInProgress, startDialog}) => {\r\n    return (\r\n        <div className={classes.user}>\r\n            <div className={classes.user}>\r\n                <div>\r\n                    <NavLink to={`/profile/${userId}`}>\r\n                        <img src={photoUrl} alt='user photo' className={classes.user_photo}/>\r\n                    </NavLink>\r\n                </div>\r\n                <div>\r\n                    <div className={classes.user_name}>{fullName}</div><div className={classes.user_status}>{status}</div>\r\n                </div>\r\n                <div className={classes.buttons}>\r\n                    {followStatus ? <button className={classes.send}\r\n                                            onClick={() => startDialog(userId)}>\r\n                        Send\r\n                    </button> : null}\r\n                    <button className={classes.subscribe}\r\n                            disabled={followingInProgress.some(id => id === userId)}\r\n                            onClick={onFollowClick}>\r\n                            <img src={!followStatus ? plus : check} alt={'follow'}/>\r\n                            </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default User;","export default __webpack_public_path__ + \"static/media/next.43c0e5d8.svg\";","export default __webpack_public_path__ + \"static/media/prev.07f693de.svg\";","import Paginator from \"./paginator\";\r\n\r\nexport default Paginator;","import React, {useState} from 'react';\r\nimport styles from \"./paginator.module.scss\";\r\nimport cn from \"classnames\";\r\nimport next from './next.svg';\r\nimport prev from './prev.svg';\r\ntype PropsType = {\r\n    totalItemsCount: number,\r\n    pageSize: number,\r\n    currentPage: number,\r\n    onPageChanged: (pageNumber: number) => void,\r\n    portionSize?: number\r\n}\r\n\r\nlet Paginator: React.FC<PropsType> = ({\r\n                                          totalItemsCount, pageSize, currentPage\r\n                                          , onPageChanged, portionSize = 10\r\n                                      }) => {\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n\r\n    let pages: Array<number> = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    if (pagesCount < 2) {\r\n        return null;\r\n    }\r\n    return (\r\n        <div className={styles.paginator}>\r\n        {portionNumber > 1 &&\r\n        <span className={styles.navBtn + ' ' + styles.left} onClick={() => {\r\n            setPortionNumber(portionNumber - 1);\r\n        }}><img src={prev} alt=\"next\"/></span>}\r\n\r\n        {pages\r\n            .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n            .map((p) => {\r\n                return <span className={cn({\r\n                    [styles.selectedPage]: currentPage === p\r\n                }, styles.pageNumber)}\r\n                             key={p}\r\n                             onClick={() => {\r\n                                 onPageChanged(p);\r\n                             }}>{p}</span>;\r\n            })}\r\n        {portionCount > portionNumber &&\r\n        <span className={styles.navBtn + ' ' + styles.right} onClick={() => {\r\n            setPortionNumber(portionNumber + 1);\r\n        }}><img src={next} alt=\"next\"/></span>}\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default Paginator;","import Spinner from \"./spinner\";\r\nexport default Spinner;","import {axiosInstance, GetItemsType, ResponseType} from \"./api\";\r\nimport {UserType} from \"../types/types\";\r\n\r\nexport const usersApi = {\r\n    getUsers: async (currentPage = 1, pageSize = 10, term: string = '', friend: null | boolean = null) => {\r\n        const url =`/users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? '': `&friend=${friend}`);\r\n        return axiosInstance.get<GetItemsType<UserType>>(url).then(res => res.data);\r\n    },\r\n    followUser: (id: number) => {\r\n        return axiosInstance.post<ResponseType>(`/follow/${id}`).then(res => res.data);\r\n    },\r\n    unFollowUser: (id: number) => {\r\n        return axiosInstance.delete(`/follow/${id}`).then(res => res.data) as Promise<ResponseType>;\r\n    }\r\n};","import {UserType} from \"../types/types\";\r\nimport {CommonThunkType, InferActionsTypes} from \"./reduxStore\";\r\nimport {usersApi} from \"../api/usersApi\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ResultsCodesEnum} from \"../api/api\";\r\n\r\nconst initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 8,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isLoading: false,\r\n    followingInProgress: [] as Array<number>, //array of users ID\r\n    filter: {\r\n        term: '',\r\n        friend: null as null | boolean,\r\n    }\r\n};\r\n\r\nconst usersReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"USERS/SET_USERS\":\r\n            return {\r\n                ...state,\r\n                users: [...action.users]\r\n            };\r\n        case \"USERS/TOGGLE_FOLLOW\":\r\n            return {\r\n                ...state,\r\n                users: state.users.map((user) => {\r\n                    if (user.id === action.id) {\r\n                        return {...user, followed: !user.followed};\r\n                    }\r\n                    return user;\r\n                })\r\n            };\r\n        case \"USERS/SET_TOTAL_USERS_COUNT\":\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.usersCount\r\n            };\r\n        case \"USERS/SET_CURRENT_PAGE\":\r\n            return {\r\n                ...state,\r\n                currentPage: action.pageNumber\r\n            };\r\n        case \"USERS/TOGGLE_LOADING\":\r\n            return {\r\n                ...state,\r\n                isLoading: !state.isLoading\r\n            };\r\n        case \"USERS/TOGGLE_FOLLOWING_PROGRESS\":\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.id]\r\n                    : state.followingInProgress.filter(id => id !== action.id)\r\n            };\r\n        case \"USERS/SET_FILTER\":\r\n            return {\r\n                ...state,\r\n                filter: action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    toggleLoadingStatus : () => ({type: 'USERS/TOGGLE_LOADING'} as const),\r\n    setTotalUsersCount : (usersCount: number) => ({\r\n        type: 'USERS/SET_TOTAL_USERS_COUNT',\r\n        usersCount\r\n    } as const),\r\n    setCurrentPage : (pageNumber: number) => ({type: 'USERS/SET_CURRENT_PAGE', pageNumber} as const),\r\n    setUsers : (users: Array<UserType>) => ({type: 'USERS/SET_USERS', users} as const),\r\n    toggleFollowingProgress : (id: number, isFetching: boolean) => ({\r\n        type: 'USERS/TOGGLE_FOLLOWING_PROGRESS',\r\n        id,\r\n        isFetching\r\n    } as const),\r\n    follow: (id: number) =>  ({type: 'USERS/TOGGLE_FOLLOW', id} as const),\r\n    setFilter: (payload: FilterFormType) => ({type: 'USERS/SET_FILTER', payload} as const),\r\n};\r\n\r\nexport const requestUsers = (currentPage: number, pageSize: number): ThunkType =>\r\n    async (dispatch, getState) => {\r\n        dispatch(actions.toggleLoadingStatus());\r\n        let res;\r\n        let filter = getState().usersPage.filter;\r\n        res = await usersApi.getUsers(currentPage, pageSize, filter.term, filter.friend);\r\n        dispatch(actions.toggleLoadingStatus());\r\n        dispatch(actions.setTotalUsersCount(res.totalCount));\r\n        dispatch(actions.setUsers(res.items));\r\n    };\r\n\r\nconst _followUnfollowFlow = async (dispatch: Dispatch<ActionsType>, id: number, action: (id: number) => ActionsType, apiMethod: any) => {\r\n    dispatch(actions.toggleFollowingProgress(id, true));\r\n    let data = await apiMethod(id);\r\n    if (data.resultCode === ResultsCodesEnum.Success) {\r\n        dispatch(action(id));\r\n        dispatch(actions.toggleFollowingProgress(id, false));\r\n    }\r\n};\r\n\r\nexport const followUser = (id: number): ThunkType => async (dispatch) => {\r\n    _followUnfollowFlow(dispatch, id, actions.follow, usersApi.followUser);\r\n};\r\n\r\nexport const unFollowUser = (id: number): ThunkType => async (dispatch) => {\r\n    _followUnfollowFlow(dispatch, id, actions.follow, usersApi.unFollowUser);\r\n};\r\n\r\n\r\nexport default usersReducer;\r\n\r\n//Type\r\nexport type FilterFormType = typeof initialState.filter\r\ntype ThunkType = CommonThunkType<ActionsType>\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>","import {AppStateType} from \"./reduxStore\";\r\n\r\nexport const getUsers = (state: AppStateType) => {\r\n    return state.usersPage.users;\r\n};\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize;\r\n};\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount;\r\n};\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage;\r\n};\r\nexport const getIsLoadingStatus = (state: AppStateType) => {\r\n    return state.usersPage.isLoading;\r\n};\r\nexport const getIsFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress;\r\n};\r\nexport const getFilter = (state: AppStateType) => {\r\n    return state.usersPage.filter;\r\n};\r\n","import {Users} from \"./Users\";\r\nexport default Users;","/* eslint-disable */\r\nimport React, {useEffect} from 'react';\r\nimport User from './user';\r\nimport userPhoto from '../../assets/img/avatar.png';\r\nimport Paginator from \"./paginator\";\r\nimport Spinner from \"../common/spinner\";\r\nimport {actions, requestUsers, followUser, unFollowUser} from \"../../redux/usersReducer\";\r\nimport classes from \"./users.module.scss\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentPage, getFilter,\r\n    getIsFollowingInProgress,\r\n    getIsLoadingStatus,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers\r\n} from \"../../redux/userSelectors\";\r\nimport {useHistory} from 'react-router-dom';\r\nimport * as queryString from \"querystring\";\r\nimport {startDialog} from \"../../redux/dialogsReducer\";\r\n\r\ntype QueryParamType = { term?: string, friend?: string, page?: string };\r\nexport const Users: React.FC = () => {\r\n    const totalUsersCount = useSelector(getTotalUsersCount);\r\n    const currentPage = useSelector(getCurrentPage);\r\n    const pageSize = useSelector(getPageSize);\r\n    const usersData = useSelector(getUsers);\r\n    const isLoading = useSelector(getIsLoadingStatus);\r\n    const followingInProgress = useSelector(getIsFollowingInProgress);\r\n    const filter = useSelector(getFilter);\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        //query param initialize\r\n            const parse = queryString.parse(history.location.search.substr(1)) as QueryParamType;\r\n            let actualFilter = filter;\r\n            let actualPage = currentPage;\r\n\r\n            if (parse.page) actualPage = +parse.page;\r\n            if (parse.term) actualFilter = {...actualFilter, term: parse.term as string};\r\n            if (parse.friend) actualFilter = {\r\n                ...actualFilter,\r\n                friend: parse.friend === 'null' ? null : parse.friend !== 'false'\r\n            };\r\n            dispatch(actions.setCurrentPage(actualPage));\r\n            dispatch(actions.setFilter(actualFilter));\r\n            dispatch(requestUsers(actualPage, pageSize));\r\n            return () => {\r\n                dispatch(actions.setFilter({term: '', friend: null}))\r\n            }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        let query: QueryParamType = {};\r\n        if (!!filter.term) query.term = filter.term;\r\n        if (filter.friend !== null) query.friend = String(filter.friend);\r\n        if (currentPage !== 1) query.page = String(currentPage);\r\n\r\n        history.push({\r\n            pathname: '/users',\r\n            search: queryString.encode(query)\r\n        });\r\n    }, [filter, currentPage]);\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(actions.setCurrentPage(pageNumber));\r\n        dispatch(requestUsers(pageNumber, pageSize));\r\n    };\r\n\r\n    const onStartDialog = (id: number) => {\r\n        history.push(`/dialogs/${id}`)\r\n        dispatch(startDialog(id));\r\n    }\r\n\r\n    const followUserClick = (id: number) => {\r\n        dispatch(followUser(id));\r\n    };\r\n\r\n    const unFollowUserClick = (id: number) => {\r\n        dispatch(unFollowUser(id));\r\n    };\r\n\r\n    const users = usersData.map(({id, name, status, followed, photos}) => {\r\n        return <User\r\n            onFollowClick={() => followed ? unFollowUserClick(id) : followUserClick(id)}\r\n            key={id}\r\n            photoUrl={photos.small ? photos.small : userPhoto}\r\n            followStatus={followed}\r\n            fullName={name}\r\n            status={status}\r\n            startDialog={onStartDialog}\r\n            id={id}\r\n            followingInProgress={followingInProgress}/>;\r\n    });\r\n\r\n    const usersContent = isLoading ? <Spinner/> : users;\r\n    if (usersData.length === 0 && !isLoading) {\r\n        return <div className={classes.users}>\r\n            <div className={classes.notFound}>\r\n                <img src=\"http://vkclub.su/_data/stickers/gribson/sticker_vk_gribson_019.png\" alt=\"oops\"/>\r\n                <p>Sorry users not found</p>\r\n            </div>\r\n        </div>;\r\n    }\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <div className={classes.users}>\r\n                <div className={classes.usersContainer}>\r\n                    {usersContent}\r\n                </div>\r\n                <div className={classes.paginator}>\r\n                    <Paginator\r\n                        totalItemsCount={totalUsersCount}\r\n                        pageSize={pageSize}\r\n                        currentPage={currentPage}\r\n                        onPageChanged={onPageChanged}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\n\r\n","import React from \"react\";\r\nimport {Form, Formik, Field} from \"formik\";\r\nimport {FilterFormType} from \"../../../redux/usersReducer\";\r\nimport classes from '../../header/header.module.scss';\r\nimport {useSelector} from \"react-redux\";\r\nimport {getFilter} from \"../../../redux/userSelectors\";\r\ntype UsersSearchFormPropTypes ={\r\n    onSubmit: (data: FilterFormType) => void\r\n}\r\n\r\ntype FriendFormType = \"true\" | \"false\" | \"null\";\r\ntype FormType = {\r\n    term: string,\r\n    friend: FriendFormType\r\n}\r\nconst UsersSearchForm: React.FC<UsersSearchFormPropTypes> = ({onSubmit}) => {\r\n    const filter = useSelector(getFilter);\r\n\r\n    const onButtonClick = (values: FormType) => {\r\n        const filter = {\r\n            term: values.term,\r\n            friend: values.friend === 'null' ? null : values.friend !== 'false'\r\n        };\r\n        onSubmit(filter);\r\n    };\r\n    return (\r\n            <Formik\r\n                enableReinitialize\r\n                initialValues={{term: filter.term, friend: String(filter.friend) as FriendFormType}}\r\n                onSubmit={onButtonClick}\r\n                placeholder={'s'}\r\n            >\r\n                {() => (\r\n                    <Form>\r\n                        <Field as=\"select\" name=\"friend\">\r\n                            <option value=\"null\">All</option>\r\n                            <option value=\"true\">Only followed</option>\r\n                            <option value=\"false\">Only unfollowed</option>\r\n                        </Field>\r\n                        <Field placeholder={'Find users'} type=\"text\" name=\"term\"/>\r\n                        <button className={classes.submit} type=\"submit\"/>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n    );\r\n};\r\n\r\nexport default React.memo(UsersSearchForm);","import React from 'react';\nimport classes from './header.module.scss';\nimport UsersSearchFormik from \"../users/usersSearchForm/UsersSearchFormik\";\nimport {NavLink} from \"react-router-dom\";\nimport {FilterFormType} from \"../../redux/usersReducer\";\n\ntype PropTypes = {\n    onSearchSubmit: (filter: FilterFormType) => void\n}\n\nconst Header: React.FC<PropTypes> = ({onSearchSubmit}) => {\n\n    return (\n        <header className={classes.header}>\n            <HeaderContent onSearchSubmit={onSearchSubmit}/>\n        </header>\n    );\n};\n\ntype HeaderContentType = {\n    onSearchSubmit: (filter: FilterFormType) => void\n}\n\nconst HeaderContent: React.FC<HeaderContentType> = ({onSearchSubmit}) => {\n    return (\n        <div>\n            <div className={classes.content}>\n                <h1 className={classes.logo + ' ' + classes.logo_auth}>mashroom</h1>\n                <UsersSearchFormik onSubmit={onSearchSubmit}/>\n                <ul className={classes.menu}>\n                    <li><NavLink activeClassName={classes.active} to='/profile'>PROFILE</NavLink></li>\n                    <li><NavLink activeClassName={classes.active} to='/users'>USERS</NavLink></li>\n                    <li><NavLink activeClassName={classes.active} to='/dialogs'>MESSAGES</NavLink></li>\n                    <NavLink className={classes.settings} activeClassName={classes.active} to='/settings'/>\n                </ul>\n\n            </div>\n        </div>\n\n    );\n};\n\nexport default Header;","\nimport React from 'react';\nimport Header from './header';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {actions, FilterFormType, requestUsers} from \"../../redux/usersReducer\";\nimport {getPageSize} from \"../../redux/userSelectors\";\nimport {useHistory, useLocation} from 'react-router-dom';\n\n\n\nconst HeaderAPI: React.FC = (props) => {\n    const dispatch = useDispatch();\n    const pageSize = useSelector(getPageSize);\n    const history = useHistory();\n    const location = useLocation();\n\n\n\n    const onFilterChanged = (filter: FilterFormType) => {\n        if(location.pathname !== '/users' ) {\n            history.push('/users');\n        }\n\n        dispatch(actions.setCurrentPage(1));\n        dispatch(actions.setFilter(filter));\n\n        dispatch(requestUsers(1, pageSize));\n    };\n    return (\n        <Header {...props} onSearchSubmit={onFilterChanged}/>\n    );\n};\n\nexport default HeaderAPI;\n\n\n","export const requiredField = value => {\r\n    if (value) return undefined;\r\n    return 'Field is required';\r\n};\r\n\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n};","import LoginForm from \"./loginForm\";\r\n\r\nexport default LoginForm;","import React from \"react\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Input} from \"../../common/formsControl/formControls\";\nimport {requiredField} from \"../../../utils/validators\";\nimport {LoginFormValuesType} from \"../login\";\nimport classes from './loginForm.module.scss';\n\ntype LoginFormOwnProps = {captcha: string | null}\n\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> = ({error, captcha, handleSubmit}) => {\n    const summaryError = error ? <div className={classes.summaryError}>{error}</div> : null;\n    return (\n        <form className={classes.form} onSubmit={handleSubmit}>\n            <div className={classes.input}>\n                <div>Email</div>\n                <Field validate={[requiredField]} type=\"text\" name={'email'} placeholder={'login'} component={Input}/>\n            </div>\n            <div className={classes.input}>\n                <div>Password</div>\n                <Field validate={[requiredField]} type=\"password\" name={'password'} placeholder={'password'}\n                        component={Input}/>\n            </div>\n            <div className={classes.checkbox}>\n                <Field type=\"checkbox\" name={'rememberMe'} component={Input}/>\n                <div className={classes.remember}>Remember me</div>\n            </div>\n            {summaryError}\n            {captcha ?\n                <div>\n                    <img src={captcha} alt=\"captcha\"/>\n                    <Field placeholder={\"captcha text\"} validate={[requiredField]} type=\"text\" name={\"captcha\"} component={Input}/>\n                </div>\n                : null}\n            <div className={classes.button}>\n                <button>Login</button>\n            </div>\n        </form>\n    );\n};\n\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginForm);\n\nexport default LoginReduxForm;","import {Login} from \"./login\";\r\nexport default Login;","import React from \"react\";\r\nimport LoginReduxForm from \"./loginForm\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport classes from './login.module.scss';\r\nimport {getCaptcha, getIsAuth} from \"../../redux/authSelectors\";\r\nimport {login} from \"../../redux/authReducer\";\r\n\r\nexport type LoginFormValuesType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    captcha: string\r\n}\r\n\r\nexport const Login: React.FC = () => {\r\n\r\n    const captcha = useSelector(getCaptcha);\r\n    const isAuth = useSelector(getIsAuth);\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        const {email, password, rememberMe, captcha} = formData;\r\n        dispatch(login(email, password, rememberMe, captcha));\r\n    };\r\n\r\n\r\n    if (isAuth) return <Redirect to={'/profile'}/>;\r\n\r\n    return (\r\n        <div className={classes.login}>\r\n            <LoginReduxForm captcha={captcha} onSubmit={onSubmit}/>\r\n            <div className={classes.descr}>\r\n                <p>Welcome to the mashroom</p>\r\n                <ul>\r\n                    <li>Communication</li>\r\n                    <li>News</li>\r\n                    <li>Self-expression</li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n","import {getAuth} from \"./authReducer\";\r\nimport {InferActionsTypes} from \"./reduxStore\";\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    initialized: false\r\n};\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType=> {\r\n\r\n    switch (action.type) {\r\n        case 'APP/INITIALIZED_SUCCESS':\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    initializedSuccess : () => ({type: 'APP/INITIALIZED_SUCCESS'} as const)\r\n};\r\n\r\n\r\nexport default appReducer;\r\n\r\nexport const initializeApp = () => async (dispatch : any) => {\r\n    let dispatchResult = dispatch(getAuth());\r\n    dispatchResult\r\n        .then(() => {\r\n            dispatch(actions.initializedSuccess());\r\n        });\r\n};","import {ResultsCodesEnum} from \"../api/api\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\nimport {PhotosType, PostType, ProfileType} from \"../types/types\";\r\nimport {CommonThunkType, InferActionsTypes} from \"./reduxStore\";\r\nimport {profileApi} from \"../api/profileApi\";\r\n\r\nconst initialState = {\r\n    posts: [\r\n        {\r\n            img: 'https://cdn4.iconfinder.com/data/icons/small-n-flat/24/user-alt-512.png',\r\n            text: 'wow',\r\n            likesCount: 2,\r\n            id: 1\r\n        },\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: '',\r\n    onProfilePage: false\r\n};\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    let newPost;\r\n    switch (action.type) {\r\n        case \"PROFILE/ADD-POST\":\r\n            newPost = {\r\n                img: 'https://cdn4.iconfinder.com/data/icons/small-n-flat/24/user-alt-512.png',\r\n                id: 2,\r\n                text: action.postText,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost]\r\n            };\r\n        case \"PROFILE/SET_PROFILE\":\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            };\r\n        case \"PROFILE/SET_STATUS\":\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n        case \"PROFILE/DELETE_POST\":\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(({id}) => id !== action.id)\r\n            };\r\n        case \"PROFILE/SAVE_PHOTO_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photos} as ProfileType\r\n            };\r\n        case \"PROFILE/SAVE_PROFILE_DATA_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, ...action.profile}\r\n            };\r\n        case \"PROFILE/ON_PROFILE_PAGE\":\r\n            return {\r\n                ...state,\r\n                onProfilePage: action.bool\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    addNewPost : (postText: string) => ({type: 'PROFILE/ADD-POST', postText} as const),\r\n    setProfile : (profile: ProfileType) => ({type: 'PROFILE/SET_PROFILE', profile} as const),\r\n    setStatus : (status: string) => ({type: 'PROFILE/SET_STATUS', status} as const),\r\n    deletePost : (id: number) => ({type: 'PROFILE/DELETE_POST', id} as const),\r\n    savePhotoSuccess : (photos: PhotosType)=> ({\r\n        type: 'PROFILE/SAVE_PHOTO_SUCCESS',\r\n        photos\r\n    } as const),\r\n    saveProfileDataSuccess : (profile: ProfileType) => ({\r\n        type: 'PROFILE/SAVE_PROFILE_DATA_SUCCESS',\r\n        profile\r\n    } as const),\r\n    onProfilePage: (bool: boolean) => ({type: 'PROFILE/ON_PROFILE_PAGE', bool}) as const\r\n};\r\n\r\nexport const getProfile = (id: number ): ThunkType => async (dispatch) => {\r\n    let profileData = await profileApi.getProfile(id);\r\n    dispatch(actions.setProfile(profileData));\r\n};\r\n\r\nexport const getStatus = (id: number): ThunkType => async (dispatch) => {\r\n    let status = await profileApi.getStatus(id);\r\n    dispatch(actions.setStatus(status));\r\n};\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    let res = await profileApi.updateStatus(status);\r\n    if (res.data.resultCode === ResultsCodesEnum.Success) {\r\n        dispatch(actions.setStatus(status));\r\n    }\r\n};\r\n\r\nexport const savePhoto = (photo: any): ThunkType => async (dispatch) => {\r\n    let data = await profileApi.uploadUserPhoto(photo);\r\n    if (data.resultCode === ResultsCodesEnum.Success) {\r\n        dispatch(actions.savePhotoSuccess(data.data.photos));\r\n    }\r\n};\r\n\r\nexport const saveProfileData = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    let data = await profileApi.uploadUserData(profile);\r\n    const userId = getState().auth.userId;\r\n    if (data.resultCode === ResultsCodesEnum.Success) {\r\n        if (userId != null){\r\n            dispatch(getProfile(userId));\r\n        }else {\r\n            throw new Error(\"User id can`t be null\");\r\n        }\r\n    } else {\r\n        let message = data.messages.length !== 0 ? data.messages[0] : \"some error\";\r\n        let action = stopSubmit(\"edit-profile\", {_error: message});\r\n        dispatch(action);\r\n        return Promise.reject(data.messages[0]);\r\n    }\r\n};\r\n\r\nexport default profileReducer;\r\n\r\n// Type\r\ntype ThunkType = CommonThunkType<ActionsType | FormAction>\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>;","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer from \"./profileReducer\";\r\nimport dialogsReducer from \"./dialogsReducer\";\r\nimport sidebarReducer from \"./sidebarReducer\";\r\nimport usersReducer from \"./usersReducer\";\r\nimport authReducer from \"./authReducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport {reducer as formReducer} from 'redux-form';\r\nimport appReducer from \"./appReducer\";\r\nimport logger from 'redux-logger';\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    form: formReducer\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer;\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n\r\nexport type InferActionsTypes<T> = T extends {[keys:string]: (...args: any[]) => infer U} ? U : never\r\n\r\nexport type CommonThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware, logger)));\r\n// @ts-ignore\r\nexport default store;","import PageNotFound from \"./404page\";\n\nexport default PageNotFound;","import React from \"react\";\nimport classes from './pageNotFound.module.scss';\nconst PageNotFound = () => {\n    return (\n        <div className={classes.pageNotFound}>\n            <img src=\"http://vkclub.su/_data/stickers/gribson/sticker_vk_gribson_019.png\" alt=\"\"/>\n            <p>Oooops! <br/> Page not found</p>\n        </div>\n    );\n};\n\nexport default PageNotFound;","// import classes from \"./profileInfo/profileInfo.module.scss\";\r\nimport React from \"react\";\r\nimport {Field, Form, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../../common/formsControl/formControls\";\r\nimport {requiredField} from \"../../../utils/validators\";\r\nimport classes from \"../../common/formsControl/formControls.module.scss\";\r\nimport {ProfileType} from \"../../../types/types\";\r\n\r\ntype PropTypes = {\r\n    profile: ProfileType\r\n}\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropTypes> & PropTypes> = ({handleSubmit, profile, error}) => {\r\n\r\n    const summaryError = error ? <div className={classes.summaryError}>{error}</div> : null;\r\n\r\n    const contactsInput = Object.keys(profile.contacts).map((key) => {\r\n        return <div key={key}>{key} <Field name={`contacts.${key}`} component={Input}/></div>;\r\n    });\r\n\r\n\r\n    return (\r\n        <>\r\n            <Form onSubmit={handleSubmit} className={classes.input}>\r\n                <div>FullName: <Field name={'fullName'} placeholder={\"Your full name\"} validate={[requiredField]}\r\n                                      component={Input}/></div>\r\n                <div>About me: <Field name={'aboutMe'} placeholder={\"About me\"} component={Input}/></div>\r\n                {contactsInput}\r\n                <div>{summaryError}</div>\r\n                <button>Save</button>\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nconst ProfileDataReduxForm = reduxForm<ProfileType, PropTypes>({form: 'edit-profile'})(ProfileDataForm);\r\nexport default ProfileDataReduxForm;","export default __webpack_public_path__ + \"static/media/upload.e06f3339.svg\";","import classes from \"./profileInfo.module.scss\";\r\nimport userPhoto from \"../../../assets/img/avatar.png\";\r\nimport React, {ChangeEvent} from \"react\";\r\nimport {PhotosType} from \"../../../types/types\";\r\nimport upload from \"./upload.svg\";\r\n\r\ntype ProfileLeftSideType = {\r\n    isOwner: boolean,\r\n    id: number,\r\n    photos: PhotosType,\r\n    onPhotoSelected: (e: ChangeEvent<HTMLInputElement>) => void,\r\n}\r\n\r\nexport const ProfileLeftSide: React.FC<ProfileLeftSideType> = ({isOwner, photos, onPhotoSelected}) => {\r\n    return <div className={classes.leftSide}>\r\n        <div className={classes.profilePhoto}>\r\n            <img alt={'user photo'} src={photos.large || userPhoto}/>\r\n        </div>\r\n        {isOwner && <div className={classes.upload}>\r\n            <input  onChange={onPhotoSelected} type=\"file\" id=\"actual-btn\" hidden/>\r\n            <label htmlFor=\"actual-btn\"><img src={upload} alt=\"upload\"/></label>\r\n        </div>\r\n        }\r\n    </div>;\r\n};","import React, {useEffect, useState} from \"react\";\r\nimport {ChangeEvent} from \"react\";\r\n\r\ntype PropTypes = {\r\n    status: string,\r\n    updateStatus: (value: string) => void,\r\n    isOwner: boolean\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropTypes> = ({status, updateStatus, isOwner}) => {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [value, setValue] = useState(status);\r\n\r\n    useEffect(() => {\r\n        setValue(status);\r\n    }, [status]);\r\n\r\n    const activateEditMode = () => {\r\n        if (isOwner) {\r\n            setEditMode(true);\r\n        }\r\n    };\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        updateStatus(value);\r\n    };\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(e.target.value);\r\n    };\r\n\r\n    const content = editMode\r\n        ? <input\r\n            onBlur={deactivateEditMode}\r\n            autoFocus\r\n            type=\"text\"\r\n            onChange={onStatusChange}\r\n            value={value}/>\r\n        : <span onDoubleClick={activateEditMode}>{status || '...'}</span>;\r\n    return (\r\n        <>\r\n            <div>\r\n                {content}\r\n            </div>\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport classes from \"./profileInfo.module.scss\";\r\nimport ProfileStatusWithHooks from \"../profileStatus/profileStatusWithHooks\";\r\nimport {ContactsType, ProfileType} from \"../../../types/types\";\r\n\r\ntype ContactPropTypes = {\r\n    contactTitle: string,\r\n    contactValue: any\r\n}\r\n\r\nconst Contact: React.FC<ContactPropTypes> = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <div className={classes.contact}>{contactTitle} : {contactValue}</div>\r\n    );\r\n};\r\n\r\ntype ProfileDataPropTypes = {\r\n    profile: ProfileType,\r\n    toggleEditMode: () => void,\r\n    isOwner: any,\r\n    updateStatus: (status: string) => void,\r\n    status: string\r\n}\r\n\r\nexport const ProfileData: React.FC<ProfileDataPropTypes> = ({profile, toggleEditMode, isOwner, updateStatus, status}) => {\r\n    const {fullName, aboutMe, contacts} = profile;\r\n    return (\r\n        <div className={classes.profileData}>\r\n            <div className={classes.name}>{fullName}</div>\r\n            <div className={classes.status}>\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus} isOwner={isOwner}/>\r\n            </div>\r\n            <div className={classes.aboutMe}>{aboutMe}</div>\r\n            <div className={classes.social}>\r\n                <span>Social Networks</span>\r\n                {\r\n                    Object.keys(contacts)\r\n                        .map((title) => {\r\n                            if (!contacts[title as keyof ContactsType]) return null;\r\n                            return (\r\n                                <Contact key={title} contactTitle={title}\r\n                                         contactValue={contacts[title as keyof ContactsType]}/>\r\n                            )\r\n                                ;\r\n                        })}\r\n            </div>\r\n            {isOwner ? <button className={classes.edit} onClick={toggleEditMode}>edit</button> : null}\r\n        </div>\r\n    );\r\n};","import {AppStateType} from \"./reduxStore\";\r\n\r\nexport const getStatusSelector = (state: AppStateType) => {\r\n    return state.profilePage.status;\r\n};\r\nexport const getProfileSelector = (state: AppStateType) => {\r\n    return state.profilePage.profile;\r\n};\r\n","import classes from \"./profileInfo.module.scss\";\r\nimport React, {ChangeEvent, useState} from \"react\";\r\nimport Spinner from \"../../common/spinner\";\r\nimport ProfileDataForm from \"./profileDataForm\";\r\nimport {ProfileType} from \"../../../types/types\";\r\nimport {ProfileLeftSide} from \"./profileLeftSide\";\r\nimport {ProfileData} from \"./ProfileData\";\r\nimport {savePhoto, saveProfileData, updateStatus} from \"../../../redux/profileReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getProfileSelector, getStatusSelector} from \"../../../redux/profileSelectors\";\r\n\r\ntype ProfileInfoPropTypes = {id: number}\r\nconst ProfileInfo: React.FC<ProfileInfoPropTypes> = ({id}) => {\r\n    const isOwner = !id;\r\n    const dispatch = useDispatch();\r\n    const profile = useSelector(getProfileSelector);\r\n    const status = useSelector(getStatusSelector);\r\n\r\n    const [editMode, changeEditMode] = useState(false);\r\n\r\n    const onUpdateStatus = (status: string) => {\r\n        dispatch(updateStatus(status));\r\n    };\r\n\r\n    const onSaveProfileData = (formData: ProfileType): any => {\r\n        return dispatch(saveProfileData(formData));\r\n    };\r\n\r\n    const toggleEditMode = () => {\r\n        if (!editMode) {\r\n            changeEditMode(true);\r\n        } else {\r\n            changeEditMode(false);\r\n        }\r\n    };\r\n\r\n\r\n    const onFormSubmit = (formData: ProfileType) => {\r\n        onSaveProfileData(formData).then(\r\n            () => {\r\n                toggleEditMode();\r\n            }\r\n        );\r\n    };\r\n\r\n\r\n    const onPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        e.preventDefault();\r\n        if (e.target.files?.length === 1) {\r\n            const photo = e.target.files[0];\r\n            dispatch(savePhoto(photo));\r\n        }\r\n    };\r\n\r\n\r\n    if (!profile) {\r\n        return <Spinner/>;\r\n    }\r\n\r\n    const {photos} = profile;\r\n\r\n    return (\r\n        <>\r\n            <div className={classes.info}>\r\n                <ProfileLeftSide\r\n                                 photos={photos}\r\n                                 isOwner={isOwner}\r\n                                 id={id}\r\n                                 onPhotoSelected={onPhotoSelected}/>\r\n                <div className={classes.rightSide}>\r\n                    {editMode\r\n                        ? <ProfileDataForm initialValues={profile}\r\n                                           profile={profile}\r\n                                           onSubmit={onFormSubmit}/>\r\n                        : <ProfileData isOwner={isOwner}\r\n                                       updateStatus={onUpdateStatus}\r\n                                       status={status}\r\n                                       profile={profile}\r\n                                       toggleEditMode={toggleEditMode}/>}\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ProfileInfo;","import React, {useEffect} from 'react';\r\nimport classes from './profile.module.scss';\r\nimport ProfileInfo from \"./profileInfo/profileInfo\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useHistory, useParams} from \"react-router-dom\";\r\nimport {getUserId} from \"../../redux/authSelectors\";\r\nimport {getProfile, getStatus} from \"../../redux/profileReducer\";\r\n\r\nexport const Profile: React.FC = () => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const params = useParams<any>();\r\n    const authUserId = useSelector(getUserId);\r\n\r\n    const refreshProfileData = () => {\r\n        let id: number | null = +params.id;\r\n        if (!id) {\r\n            id = authUserId;\r\n            if (!id) {\r\n                history.push(\"/login\");\r\n            }\r\n        }\r\n        dispatch(getProfile(id as number));\r\n        dispatch(getStatus(id as number));\r\n    };\r\n\r\n    useEffect(() => {\r\n        refreshProfileData();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        refreshProfileData();\r\n    }, [params.id]);\r\n\r\n    return (\r\n        <div className={classes.wrapper}>\r\n            <div className={classes.profile}>\r\n                <ProfileInfo id={params.id}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, {Component, ComponentType, Suspense} from 'react';\r\nimport NavBar from '../nav/nav';\r\nimport {Redirect, Switch, withRouter, Route, HashRouter} from \"react-router-dom\";\r\nimport './app.scss';\r\nimport Settings from \"../settings\";\r\nimport Dialogs from \"../dialogs\";\r\nimport UsersPage from \"../users\";\r\nimport HeaderAPI from \"../header/headerAPI\";\r\nimport Login from \"../login\";\r\nimport {connect, Provider} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {initializeApp} from \"../../redux/appReducer\";\r\nimport Spinner from \"../common/spinner\";\r\nimport store, {AppStateType} from \"../../redux/reduxStore\";\r\nimport PageNotFound from '../404page';\r\nimport {Profile} from \"../profile/profile\";\r\n\r\n\r\n\r\n\r\ntype MapStateToPropsType = ReturnType<typeof mapStateToProps>\r\ntype MapDispatchToProps = {\r\n    initializeApp: () => void\r\n}\r\ntype PropTypes = MapStateToPropsType & MapDispatchToProps\r\n\r\nconst News = React.lazy(() => import('../news'));\r\nconst Music = React.lazy(() => import('../music'));\r\nconst ChatPage = React.lazy(() => import('../nav/chat/chatPage'));\r\nclass App extends Component<PropTypes> {\r\n\r\n    catchAllUnhandledErrors = () => {\r\n        alert('some error occurred');\r\n    };\r\n\r\n    componentDidMount() {\r\n        const {initializeApp} = this.props;\r\n        initializeApp();\r\n        window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors);\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) return <Spinner/>;\r\n        if (!this.props.isAuth) return <Login/>;\r\n        return (\r\n            <>\r\n            <div className='app _container'>\r\n                    <HeaderAPI/>\r\n                    {this.props.isAuth ? <NavBar/> : null}\r\n                    <div className='app-wrapper-content'>\r\n                        <Suspense fallback={<Spinner/>}>\r\n                            <Switch>\r\n                                <Route exact path='/' render={() => <Redirect to={'/profile'}/>}/>\r\n                                <Route path='/profile/:id?' render={() => <Profile />}/>\r\n                                <Route path='/dialogs/:id?' render={() => <Dialogs/>}/>\r\n                                <Route path='/chat' render={() => <ChatPage/>}/>\r\n                                <Route path='/music' component={Music}/>\r\n                                <Route path='/news' component={News}/>\r\n                                <Route path='/users' component={UsersPage}/>\r\n                                <Route path='/settings' component={Settings}/>\r\n                                <Route path='/login' component={Login}/>\r\n                                <Route path='*' component={PageNotFound}/>\r\n                            </Switch>\r\n                        </Suspense>\r\n                    </div>\r\n            </div>\r\n\r\n                </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        initialized: state.app.initialized,\r\n        isAuth: state.auth.isAuth\r\n    };\r\n};\r\nlet AppContainer = compose<ComponentType>(withRouter, connect(mapStateToProps, {initializeApp}))(App);\r\nconst MainApp: React.FC = () => {\r\n    return (\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <AppContainer/>\r\n            </Provider>\r\n        </HashRouter>\r\n    );\r\n};\r\nexport default MainApp;","import ReactDOM from \"react-dom\";\r\nimport React from \"react\";\r\nimport MainApp from \"./component/app/app\";\r\n\r\n\r\nReactDOM.render(<MainApp/>, document.getElementById('root'));\r\n\r\n\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"user\":\"user_user__1hjSD\",\"user_photo\":\"user_user_photo__15M4Y\",\"user_name\":\"user_user_name__1beMh\",\"user_status\":\"user_user_status__30yOH\",\"buttons\":\"user_buttons__1P78X\",\"subscribe\":\"user_subscribe__HXmuo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"paginator_paginator__2ARdb\",\"pageNumber\":\"paginator_pageNumber__2YQgy\",\"selectedPage\":\"paginator_selectedPage__2Px8m\",\"navBtn\":\"paginator_navBtn__3q56V\",\"right\":\"paginator_right__1dCx0\",\"left\":\"paginator_left__1Iv1A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"loginForm_form__3Vb_K\",\"input\":\"loginForm_input__ziBHz\",\"checkbox\":\"loginForm_checkbox__3e9UO\",\"remember\":\"loginForm_remember__jXYoO\",\"button\":\"loginForm_button__1C0af\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"formControls_formControl__nwszG\",\"error\":\"formControls_error__23Zih\",\"summaryError\":\"formControls_summaryError__4h2HN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"message_message__2SYi-\",\"own\":\"message_own__2ClmB\",\"noOwn\":\"message_noOwn__GZpCA\",\"text\":\"message_text__3wddD\",\"senderName\":\"message_senderName__3wTCt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"users_container__3AbK-\",\"users\":\"users_users__1XLYr\",\"paginator\":\"users_paginator__2pEaW\",\"notFound\":\"users_notFound__2jHfh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chat\":\"chatPage_chat__UGm6C\",\"messages\":\"chatPage_messages__1rzWI\",\"message\":\"chatPage_message__1KTs_\",\"photo\":\"chatPage_photo__3AVl5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"dialogs_dialogs__14W0_\",\"dialogsItems\":\"dialogs_dialogsItems__oSSNC\",\"messagesContainer\":\"dialogs_messagesContainer__DD0fF\",\"messages\":\"dialogs_messages__Odv3N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"dialog_dialog__SgFmC\",\"active\":\"dialog_active__2_S4l\",\"name\":\"dialog_name__Ax5JM\",\"photo\":\"dialog_photo__27FwB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"dialogsForm_wrapper__3Ba7c\",\"form\":\"dialogsForm_form__C9lDk\",\"photo\":\"dialogsForm_photo__2t1e_\"};"],"sourceRoot":""}