{"version":3,"sources":["component/common/spinner/spinner.module.scss","component/login/login.module.scss","component/profile/profile.module.scss","component/profile/myPosts/post/post.module.scss","component/profile/myPosts/myPosts.module.scss","component/404page/pageNotFound.module.scss","component/header/header.module.scss","component/nav/nav.module.scss","api/api.ts","component/common/spinner/spinner.tsx","api/profileApi.ts","redux/sidebarReducer.ts","component/nav/nav.tsx","api/authApi.ts","api/securityApi.ts","redux/authReducer.ts","component/redirectHOC/index.js","utils/validators/validators.js","component/settings/index.js","component/redirectHOC/redirectHOC.tsx","component/settings/settings.tsx","assets/img/avatar.png","component/dialogs/dialogItem/dialog.tsx","redux/authSelectors.ts","component/dialogs/message/index.js","component/dialogs/message/message.tsx","api/dialogsApi.ts","redux/dialogsReducer.ts","component/common/formsControl/formControls.tsx","component/dialogs/dialogsForm/index.js","component/dialogs/dialogsForm/dialogsForm.tsx","redux/dialogsSelector.ts","component/dialogs/dialogs.tsx","component/dialogs/index.js","component/common/spinner/index.js","component/profile/profileStatus/profileStatusWithHooks.tsx","component/profile/profileInfo/profileDataForm.tsx","component/profile/profileInfo/profileInfo.tsx","component/profile/myPosts/post/index.js","component/profile/myPosts/post/post.tsx","redux/profileReducer.ts","component/profile/myPosts/myPostForm/myPostForm.tsx","component/profile/myPosts/myPostForm/index.js","component/profile/myPosts/myPosts.tsx","component/profile/profile.tsx","component/profile/profileAPI.tsx","component/users/user/Plus-Icon-PNG.png","component/users/user/check.png","component/users/user/index.js","component/users/user/user.tsx","component/users/paginator/next.svg","component/users/paginator/prev.svg","component/users/paginator/index.js","component/users/paginator/paginator.tsx","api/usersApi.ts","redux/usersReducer.ts","redux/userSelectors.ts","component/users/index.js","component/users/Users.tsx","component/users/usersSearchForm/UsersSearchFormik.tsx","component/header/header.tsx","component/header/headerAPI.tsx","component/login/loginForm/index.js","component/login/loginForm/loginForm.tsx","component/login/index.js","component/login/login.tsx","redux/appReducer.ts","redux/reduxStore.ts","component/404page/index.js","component/404page/404page.tsx","component/app/app.tsx","index.js","component/users/paginator/paginator.module.scss","component/login/loginForm/loginForm.module.scss","component/dialogs/message/message.module.scss","component/users/user/user.module.scss","component/common/formsControl/formControls.module.scss","component/users/users.module.scss","component/dialogs/dialogs.module.scss","component/dialogs/dialogItem/dialog.module.scss","component/dialogs/dialogsForm/dialogsForm.module.scss","component/profile/profileInfo/profileInfo.module.scss"],"names":["module","exports","ResultsCodesEnum","ResultsCodeForCaptcha","Spinner","className","classes","preloader","spinner","axiosInstance","axios","create","withCredentials","baseURL","headers","profileApi","id","get","then","res","data","status","put","photo","formData","FormData","append","profile","initialState","profileData","actions","type","sidebarReducer","state","NavBar","login","useSelector","auth","email","authProfile","sidebar","dispatch","useDispatch","navbar","user","src","photos","small","alt","name","fullName","button","to","interesting","title","content","getState","a","authId","userId","authApi","password","rememberMe","captcha","post","delete","securityApi","isLoading","isAuth","url","getAuth","meData","resultCode","Success","getCaptchaUrl","authReducer","action","withAuthRedirect","maxLength","Settings","Component","connect","props","restProps","onClick","Dialog","person","path","length","slice","activeClassName","active","dialog","userPhoto","getCaptcha","getIsAuth","getUserId","Message","message","ownId","classname","senderId","own","noOwn","senderName","text","body","dialogsApi","messages","dialogs","getDialogsFromApi","getMessagesFromApi","items","dialogsReducer","FormControl","meta","touched","error","children","hasError","errorMessage","formControl","Textarea","input","Input","DialogsForm","reduxForm","form","wrapper","onSubmit","handleSubmit","Field","component","getDialogs","dialogsPage","getMessages","MessagesPage","messagesData","useParams","useEffect","map","m","messagesContainer","value","newMessageText","sendMessage","Dialogs","dialogsData","userName","dialogsItems","ProfileStatusWithHooks","updateStatus","useState","editMode","setEditMode","setValue","onBlur","autoFocus","onChange","e","target","onDoubleClick","requiredField","ProfileDataReduxForm","summaryError","contactsInput","Object","keys","contacts","key","Form","placeholder","validate","Contact","contactTitle","contactValue","ProfileData","toggleEditMode","isOwner","aboutMe","lookingForAJob","lookingForAJobDescription","descr","ProfileInfo","savePhoto","saveProfile","changeEditMode","description","profilePhoto","large","preventDefault","files","initialValues","Post","img","likesCount","item","posts","onProfilePage","postText","bool","getProfile","profileReducer","newPost","filter","maxLength10","MyPostForm","MyPosts","memo","postData","addNewPost","postBlock","profilePage","Profile","ProfileAPI","refreshProfileData","match","getStatus","authUserId","params","history","push","this","prevProps","saveProfileData","compose","withRouter","Error","stopSubmit","_error","Promise","reject","User","onFollowClick","followStatus","photoUrl","followingInProgress","startDialog","user_photo","user_name","user_status","subscribe","disabled","some","check","plus","Paginator","totalItemsCount","pageSize","currentPage","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","portionCount","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","styles","paginator","navBtn","left","prev","p","cn","selectedPage","pageNumber","right","next","usersApi","getUsers","term","friend","followUser","unFollowUser","users","totalUsersCount","usersCount","isFetching","payload","requestUsers","usersPage","totalCount","_followUnfollowFlow","apiMethod","usersReducer","followed","getPageSize","getTotalUsersCount","getCurrentPage","getIsLoadingStatus","getIsFollowingInProgress","getFilter","Users","usersData","useHistory","parse","queryString","location","search","substr","actualFilter","actualPage","page","query","String","pathname","onStartDialog","followUserClick","unFollowUserClick","usersContent","usersContainer","notFound","UsersSearchForm","enableReinitialize","values","as","submit","React","HeaderContent","onSearchSubmit","logo","logo_auth","UsersSearchFormik","menu","settings","Header","header","HeaderAPI","useLocation","LoginForm","checkbox","remember","Login","initialized","appReducer","rootReducer","combineReducers","app","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","logger","PageNotFound","pageNotFound","News","lazy","Music","ChatPage","App","catchAllUnhandledErrors","alert","initializeApp","addEventListener","removeEventListener","fallback","exact","render","UsersPage","AppContainer","MainApp","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.56083678.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"spinner_preloader__1jMg2\",\"spinner\":\"spinner_spinner__1Hetg\",\"spin\":\"spinner_spin__A_APw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"login_login__VKdDU\",\"descr\":\"login_descr__u0f4g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"profile_profile__1d7zg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"post_item__1y2Bx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"myPosts_postBlock__1gIeR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageNotFound\":\"pageNotFound_pageNotFound__2eM4K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__18sGI\",\"content\":\"header_content__15Dq1\",\"submit\":\"header_submit__vXiCC\",\"logo\":\"header_logo__esTHP\",\"logo_auth\":\"header_logo_auth__2BghE\",\"logo_noAuth\":\"header_logo_noAuth__emH4y\",\"menu\":\"header_menu__2b9oq\",\"active\":\"header_active__19EXb\",\"settings\":\"header_settings__26DpH\",\"loginBlock\":\"header_loginBlock__2ztlx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"nav_navbar__1sgBY\",\"user\":\"nav_user__1bQo-\",\"photo\":\"nav_photo__2Yr4u\",\"name\":\"nav_name__1Q5pM\",\"button\":\"nav_button__3WJH1\",\"email\":\"nav_email__35rfu\",\"interesting\":\"nav_interesting__2W2LG\",\"title\":\"nav_title__7GmS6\",\"content\":\"nav_content__2rbTP\"};","import axios from \"axios\";\r\n\r\n\r\nexport const axiosInstance = axios.create({\r\n    withCredentials: true,\r\n    baseURL:\"https://social-network.samuraijs.com/api/1.0\",\r\n    headers: {\"API-KEY\": \"f68a4cda-2f4c-4785-816b-4190cdf2b12c\"}\r\n});\r\n\r\nexport type GetItemsType<items> = {\r\n    items: Array<items>,\r\n    totalCount: number,\r\n    error: string | null\r\n}\r\n\r\nexport type ResponseType<D = {}, RC = ResultsCodesEnum> = {\r\n    data: D,\r\n    messages: Array<string>,\r\n    resultCode: RC,\r\n    totalCount?: number\r\n}\r\n\r\nexport enum ResultsCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\nexport enum ResultsCodeForCaptcha {\r\n    captcha = 10\r\n}\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport classes from './spinner.module.scss';\r\nconst Spinner = () => {\r\n    return (\r\n        <div className={classes.preloader}>\r\n            <div className={classes.spinner}></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Spinner;","import {PhotosType, ProfileType} from \"../types/types\";\r\nimport {axiosInstance, ResponseType} from \"./api\";\r\n\r\ntype savePhotoResDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileApi = {\r\n    getProfile: (id: number) => {\r\n        return axiosInstance.get<ProfileType>(`/profile/${id}`).then(res => res.data);\r\n    },\r\n    getStatus: (id: number) => {\r\n        return axiosInstance.get<string>(`/profile/status/${id}`).then(res => res.data);\r\n    },\r\n    updateStatus: (status: string) => {\r\n        return axiosInstance.put<ResponseType>(`/profile/status`, {status: status});\r\n    },\r\n    uploadUserPhoto: (photo: File) => {\r\n        const formData = new FormData;\r\n        formData.append(\"image\", photo);\r\n        return axiosInstance.put<ResponseType<savePhotoResDataType>>('/profile/photo', formData, {\r\n            headers: {\r\n                'Content-type': 'multipart/form-data'\r\n            }\r\n        }).then(res => res.data);\r\n    },\r\n    uploadUserData: (profile: ProfileType) => {\r\n        return axiosInstance.put<ResponseType>('/profile', profile).then(res => res.data);\r\n    }\r\n};","import {ProfileType} from \"../types/types\";\r\nimport {CommonThunkType, InferActionsTypes} from \"./reduxStore\";\r\nimport {FormAction} from \"redux-form\";\r\nimport {profileApi} from \"../api/profileApi\";\r\n\r\nlet initialState = {\r\n    profileData: null as ProfileType | null\r\n};\r\n\r\n\r\nconst sidebarReducer = (state = initialState, actions: ActionsType): InitialStateType => {\r\n    switch (actions.type) {\r\n        case \"SIDEBAR/SET_PROFILE\":\r\n            return {\r\n                ...state,\r\n                profileData: actions.profile\r\n            };\r\n    }\r\n    return state;\r\n};\r\n\r\nexport const actions = {\r\n    setProfileForSideBar: (profile: ProfileType) => ({type: 'SIDEBAR/SET_PROFILE', profile} as const)\r\n};\r\n\r\nexport const getProfileForSideBar = (): ThunkType => async (dispatch, getState) => {\r\n    const authId = getState().auth.userId;\r\n    if (authId) {\r\n        let profileData = await profileApi.getProfile(authId);\r\n        dispatch(actions.setProfileForSideBar(profileData));\r\n    }\r\n};\r\n\r\nexport default sidebarReducer;\r\n\r\ntype ThunkType = CommonThunkType<ActionsType | FormAction>\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>;","import React from 'react';\r\nimport classes from './nav.module.scss';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport Spinner from \"../common/spinner/spinner\";\r\nimport {getProfileForSideBar} from \"../../redux/sidebarReducer\";\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst NavBar = () => {\r\n    const login = useSelector((state:AppStateType) => state.auth.email);\r\n    const authProfile = useSelector((state: AppStateType) => state.sidebar.profileData);\r\n    const dispatch = useDispatch();\r\n    const getAuthUserData = () => {\r\n        dispatch(getProfileForSideBar());\r\n    };\r\n    if(!authProfile) {\r\n        getAuthUserData();\r\n        return <Spinner/>;\r\n    }\r\n        return (\r\n            <nav className={classes.navbar}>\r\n                <div className={classes.user}>\r\n                    <div className={classes.photo}><img src={authProfile.photos.small} alt=\"avatar\"/></div>\r\n                    <p className={classes.name}>{authProfile.fullName}</p>\r\n                    <span className={classes.email}>{login}</span>\r\n                    <div className={classes.button}>\r\n                        <Link to={'/'}>Go to profile</Link>\r\n                    </div>\r\n                </div>\r\n                <div className={classes.interesting}>\r\n                    <span className={classes.title}>CAN BE INTERESTING</span>\r\n                    <div className={classes.content}/>\r\n                </div>\r\n            </nav>\r\n        );\r\n\r\n\r\n};\r\n\r\nexport default NavBar;","import {axiosInstance, ResponseType, ResultsCodeForCaptcha, ResultsCodesEnum} from \"./api\";\r\n\r\n\r\ntype MeResponseDataType = {\r\n    id: number,\r\n    email: string,\r\n    login: string,\r\n}\r\n\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\n\r\n\r\nexport const authApi = {\r\n    me: () => {\r\n        return axiosInstance.get<ResponseType<MeResponseDataType>>(`/auth/me`).then(res => res.data);\r\n    },\r\n    login: (email: string, password: string, rememberMe = false, captcha: null | string = null) => {\r\n        return axiosInstance.post<ResponseType<LoginResponseDataType, ResultsCodeForCaptcha | ResultsCodesEnum>>(`/auth/login`, {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n            captcha\r\n        });\r\n    },\r\n    logout: () => {\r\n        return axiosInstance.delete('/auth/login');\r\n    },\r\n\r\n};","import {axiosInstance} from \"./api\";\r\n\r\ntype getCaptchaResponseType = {\r\n    url: string\r\n}\r\n\r\nexport const securityApi = {\r\n    getCaptcha: () => {\r\n        return axiosInstance.get<getCaptchaResponseType>('/security/get-captcha-url').then(res => res.data);\r\n    }\r\n};","import {ResultsCodesEnum, ResultsCodeForCaptcha} from \"../api/api\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\nimport {CommonThunkType, InferActionsTypes} from \"./reduxStore\";\r\nimport {authApi} from \"../api/authApi\";\r\nimport {securityApi} from \"../api/securityApi\";\r\n\r\nconst initialState = {\r\n    isLoading: false,\r\n    userId: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captcha: null as string | null\r\n};\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"AUTH/SET_USER_DATA\":\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n                isAuth: true\r\n            };\r\n        case \"AUTH/DELETE_USER_DATA\": {\r\n            return {\r\n                ...state,\r\n                userId: null,\r\n                email: null,\r\n                login: null,\r\n                isAuth: false,\r\n            };\r\n        }\r\n        case \"AUTH/SET_CAPTCHA_URL\": {\r\n            return {\r\n                ...state,\r\n                captcha: action.url\r\n            };\r\n        }\r\n        case \"AUTH/CAPTCHA_SUCCESS\": {\r\n            return {\r\n                ...state,\r\n                captcha: null\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n        }\r\n};\r\n\r\nconst actions = {\r\n    setAuthUserData :(userId: number, email: string, login: string) => ({type: 'AUTH/SET_USER_DATA', data: {userId, email, login}} as const),\r\n    deleteAuthUserData:  () => ({type: 'AUTH/DELETE_USER_DATA'} as const),\r\n    setCaptchaUrl : (url: string) => ({type: 'AUTH/SET_CAPTCHA_URL', url} as const),\r\n    captchaSuccess : () => ({type: 'AUTH/CAPTCHA_SUCCESS'} as const)\r\n};\r\n\r\nexport const getAuth = (): ThunkType => async (dispatch) => {\r\n    let meData = await authApi.me();\r\n    if (meData.resultCode === ResultsCodesEnum.Success) {\r\n        const {id, login, email} = meData.data;\r\n        dispatch(actions.setAuthUserData(id, email, login));\r\n    }\r\n};\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType =>\r\n    async (dispatch) => {\r\n        let res = await authApi.login(email, password, rememberMe, captcha);\r\n        if (res.data.resultCode === ResultsCodesEnum.Success) {\r\n            dispatch(getAuth());\r\n            dispatch(actions.captchaSuccess());\r\n        } else {\r\n            let message = res.data.messages.length !== 0 ? res.data.messages[0] : \"some error\";\r\n            let action = stopSubmit(\"login\", {_error: message});\r\n            if (res.data.resultCode === ResultsCodeForCaptcha.captcha) {\r\n                dispatch(action);\r\n                dispatch(getCaptchaUrl());\r\n            }\r\n            dispatch(action);\r\n        }\r\n    };\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    let res = await authApi.logout();\r\n    if (res.data.resultCode === ResultsCodesEnum.Success) {\r\n        dispatch(actions.deleteAuthUserData());\r\n    }\r\n};\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    let data = await securityApi.getCaptcha();\r\n    if (data.url) {\r\n        dispatch(actions.setCaptchaUrl(data.url));\r\n    }\r\n};\r\n\r\nexport default authReducer;\r\n// Type\r\nexport type InitialStateType = typeof initialState\r\ntype ThunkType = CommonThunkType<ActionsType | FormAction>\r\ntype ActionsType = InferActionsTypes<typeof actions>;\r\n","import {withAuthRedirect} from \"./redirectHOC\";\r\n\r\nexport default withAuthRedirect;","export const requiredField = value => {\r\n    if (value) return undefined;\r\n    return 'Field is required';\r\n};\r\n\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n};","import Settings from \"./settings\";\r\nexport default Settings;","import {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport React from \"react\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\ntype MapPropsType = {\r\n    isAuth: boolean,\r\n}\r\ntype MapDispatchType = {}\r\nexport function withAuthRedirect<WCP>(Component: React.ComponentType<WCP>){\r\n\r\n    const WithRedirect: React.FC<MapPropsType & MapDispatchType> = (props) => {\r\n        let {isAuth, ...restProps} = props;\r\n        if (!isAuth) return <Redirect to={'/login'}/>;\r\n        return (\r\n            <Component {...restProps as unknown as WCP}/>\r\n        );\r\n    };\r\n    const mapStateToProps = (state: AppStateType): MapPropsType => {\r\n        return {\r\n            isAuth: state.auth.isAuth\r\n        };\r\n    };\r\n    return connect<MapPropsType, MapDispatchType, WCP, AppStateType>(mapStateToProps)(WithRedirect);\r\n}","import React from \"react\";\r\nimport {logout} from \"../../redux/authReducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport withAuthRedirect from \"../redirectHOC\";\r\n\r\nconst Settings = () => {\r\n    const dispatch = useDispatch();\r\n    const onLogout = () => {\r\n        dispatch(logout());\r\n    };\r\n    return (\r\n            <div>\r\n                <span onClick={onLogout}>Logout</span>\r\n            </div>\r\n    );\r\n};\r\nexport default withAuthRedirect(Settings);","export default __webpack_public_path__ + \"static/media/avatar.00971467.png\";","import {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport classes from './dialog.module.scss';\r\nimport userPhoto from '../../../assets/img/avatar.png';\r\nimport {PhotosType} from \"../../../types/types\";\r\ntype PropTypes = {\r\n    person: string,\r\n    photos: PhotosType,\r\n    id: number\r\n}\r\n\r\nconst Dialog: React.FC<PropTypes> = ({person, id, photos}) => {\r\n    let path = `/dialogs/${id}`;\r\n    if (person.length > 8) {\r\n        person = person.slice(8) + '...';\r\n    }\r\n    return (\r\n        <NavLink to={path} activeClassName={classes.active} className={classes.dialog}>\r\n            <div className={classes.photo}><img src={photos.small || userPhoto} alt=\"\"/></div>\r\n            <div className={classes.name}>{person}</div>\r\n        </NavLink>\r\n    );\r\n};\r\n\r\n\r\nexport default Dialog;","import {AppStateType} from \"./reduxStore\";\r\n\r\nexport const getCaptcha = (state: AppStateType) => {\r\n    return state.auth.captcha;\r\n};\r\nexport const getIsAuth = (state: AppStateType) => {\r\n    return state.auth.isAuth;\r\n};\r\nexport const getLogin = (state: AppStateType) => {\r\n    return state.auth.login;\r\n};\r\nexport const getUserId = (state: AppStateType) => {\r\n    return state.auth.userId;\r\n};\r\n","import Message from \"./message\";\r\nexport default Message;","import classes from \"./message.module.scss\";\r\nimport React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getUserId} from \"../../../redux/authSelectors\";\r\nimport {MessageType} from \"../../../redux/dialogsReducer\";\r\ntype PropTypes = {message: MessageType}\r\n\r\nconst Message: React.FC<PropTypes> = ({message}) => {\r\n    const ownId = useSelector(getUserId);\r\n    const classname = message.senderId === ownId ? classes.message + ' ' + classes.own : classes.message + ' ' + classes.noOwn;\r\n    \r\n    return <div className={classname}>\r\n        <div className={classes.senderName}><p>{message.senderName}</p></div>\r\n        <div className={classes.text}>{message.body}</div>\r\n    </div>\r\n    ;\r\n};\r\nexport default Message;","import {DialogType, MessageType} from \"../redux/dialogsReducer\";\r\nimport {axiosInstance, GetItemsType, ResponseType} from \"./api\";\r\n\r\nexport const dialogsApi = {\r\n    getDialogs: () => {\r\n        return axiosInstance.get<GetItemsType<DialogType>>(`/dialogs`).then(res => res.data);\r\n    },\r\n    startDialog: (id: number) => {\r\n        return axiosInstance.put<ResponseType>(`/dialogs/${id}`).then(res => res.data);\r\n    },\r\n    getMessages: (id: number) => {\r\n        return axiosInstance.get<GetItemsType<MessageType>>(`/dialogs/${id}/messages`).then(res => res.data);\r\n    },\r\n    sendMessage: (id: number, body: string) => {\r\n        return axiosInstance.post<ResponseType>(`/dialogs/${id}/messages` , {body}).then(res => res.data);\r\n    }\r\n}","import {CommonThunkType, InferActionsTypes} from \"./reduxStore\";\r\nimport {FormAction} from \"redux-form\";\r\nimport {dialogsApi} from \"../api/dialogsApi\";\r\nimport {PhotosType} from \"../types/types\";\r\nimport {ResultsCodesEnum} from \"../api/api\";\r\n\r\nexport type MessageType = {\r\n    addedAt: string,\r\n    body: string,\r\n    id: string,\r\n    recipientId: number,\r\n    senderId: number,\r\n    senderName: string,\r\n    translatedBody: any,\r\n    viewed: boolean\r\n}\r\n\r\nexport type DialogType = {\r\n    hasNewMessages: boolean,\r\n    id: number,\r\n    lastDialogActivityDate: \"2020-12-30T10:41:41.887\",\r\n    lastUserActivityDate: \"2020-12-27T17:05:23.097\",\r\n    newMessagesCount: 0,\r\n    photos: PhotosType,\r\n    userName: string\r\n}\r\nconst initialState = {\r\n        messages: [\r\n        ] as Array<MessageType>,\r\n        dialogs: [\r\n        ] as Array<DialogType>\r\n};\r\n\r\nexport const dialogsReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'DIALOGS/SET_MESSAGES':\r\n            return {\r\n                ...state,\r\n                messages: action.messages\r\n            };\r\n        case \"DIALOGS/SET_DIALOGS\":\r\n            return {\r\n                ...state,\r\n                dialogs: action.dialogs\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    setMessages : (messages: Array<MessageType>) => ({type: 'DIALOGS/SET_MESSAGES', messages} as const),\r\n    setDialogs: (dialogs: any) => ({type: 'DIALOGS/SET_DIALOGS', dialogs} as const)\r\n};\r\n\r\nexport const getDialogsFromApi = (): ThunkType => async (dispatch) => {\r\n    let data = await dialogsApi.getDialogs();\r\n    dispatch(actions.setDialogs(data));\r\n};\r\n\r\nexport const getMessagesFromApi = (id: number): ThunkType => async (dispatch) => {\r\n    let data = await dialogsApi.getMessages(id);\r\n    dispatch(actions.setMessages(data.items));\r\n};\r\n\r\nexport const startDialog = (id: number): ThunkType => async (dispatch) => {\r\n    const res = await dialogsApi.startDialog(id);\r\n    if(res.resultCode === ResultsCodesEnum.Success) {\r\n        dispatch(getDialogsFromApi());\r\n    }\r\n};\r\n\r\nexport const sendMessage = (id: number, body: string): ThunkType => async (dispatch) => {\r\n    let res = await dialogsApi.sendMessage(id, body);\r\n    if (res.resultCode === ResultsCodesEnum.Success) {\r\n        dispatch(getMessagesFromApi(id));\r\n    }\r\n};\r\n\r\nexport default dialogsReducer;\r\n\r\n// Type\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = CommonThunkType<ActionsType | FormAction>","import React from \"react\";\r\nimport classes from './formControls.module.scss';\r\nimport {WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl:React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError =  touched && error;\r\n    const errorMessage = hasError ? <span>{error}</span>: null;\r\n\r\n    return (\r\n        <div className={!hasError ? classes.formControl : classes.formControl + ' ' + classes.error}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {errorMessage}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...restProps} {...input}/></FormControl>;\r\n};\r\n\r\nexport const Input: React.FC<WrappedFieldProps>  = (props) => {\r\n    const {input, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>;\r\n};\r\n","import DialogsForm from \"./dialogsForm\";\r\n\r\nexport default DialogsForm;","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../../common/formsControl/formControls\";\r\nimport {DialogsFormValuesType} from \"../dialogs\";\r\nimport classes from './dialogsForm.module.scss';\r\nimport userPhoto from '../../../assets/img/avatar.png';\r\n\r\ntype PropTypes = {}\r\nconst DialogsForm: React.FC<InjectedFormProps<DialogsFormValuesType, PropTypes> & PropTypes> = (props) => {\r\n    return (<div className={classes.wrapper}>\r\n                <div className={classes.photo}><img src={userPhoto} alt=\"userPhoto\"/></div>\r\n                <form className={classes.form} onSubmit={props.handleSubmit}>\r\n                    <Field\r\n                        component={Input}\r\n                        name={'newMessageText'}/>\r\n                        <button/>\r\n                </form>\r\n            </div>\r\n\r\n    );\r\n};\r\n\r\n\r\nexport default reduxForm<DialogsFormValuesType>({form: 'addMessageForm'})(DialogsForm);\r\n","import {AppStateType} from \"./reduxStore\";\r\n\r\nexport const getDialogs = (state: AppStateType) => {\r\n    return state.dialogsPage.dialogs;\r\n};\r\n\r\nexport const getMessages = (state: AppStateType) => {\r\n    return state.dialogsPage.messages;\r\n};","// /* eslint-disable */\r\nimport React, {useEffect} from 'react';\r\nimport classes from './dialogs.module.scss';\r\nimport Dialog from './dialogItem/dialog';\r\nimport Message from './message';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getDialogsFromApi, getMessagesFromApi, sendMessage} from \"../../redux/dialogsReducer\";\r\n\r\nimport DialogsFormRedux from \"./dialogsForm\";\r\n\r\nimport {getDialogs, getMessages} from \"../../redux/dialogsSelector\";\r\nimport {useParams} from 'react-router-dom';\r\n\r\n\r\nexport type DialogsFormValuesType = {\r\n    newMessageText: string,\r\n}\r\n\r\nconst Dialogs:React.FC = () => {\r\n\r\n    const dialogsData = useSelector(getDialogs);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getDialogsFromApi());\r\n    },[]);\r\n\r\n\r\n\r\n    const dialogs = dialogsData.map(({id, userName, photos}) => {\r\n        return <Dialog key={id} id={id} person={userName} photos={photos}/>;\r\n    });\r\n\r\n\r\n    return (\r\n            <div className={classes.dialogs}>\r\n                <div className={classes.dialogsItems}>\r\n                    {dialogs}\r\n                </div>\r\n                <MessagesPage />\r\n            </div>\r\n    );\r\n};\r\n\r\n\r\nconst MessagesPage: React.FC = () => {\r\n    const messagesData = useSelector(getMessages);\r\n    const {id} = useParams<any>();\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            dispatch(getMessagesFromApi(id));\r\n        }\r\n    }, [id]);\r\n\r\n    const addMessage = (value: DialogsFormValuesType) => {\r\n        const message = value.newMessageText;\r\n        dispatch(sendMessage(id, message));\r\n    };\r\n\r\n    const messages = messagesData.map((m) => {\r\n        return <Message key={m.id} message={m}/>;\r\n    });\r\n\r\n    return (\r\n        <div className={classes.messagesContainer}>\r\n            <div className={classes.messages}>{messages}</div>\r\n            <DialogsFormRedux onSubmit={addMessage}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dialogs;\r\n\r\n","import Dialogs from \"./dialogs\";\r\nexport default Dialogs;","import Spinner from \"./spinner\";\r\nexport default Spinner;","import React, {useEffect, useState} from \"react\";\r\nimport {ChangeEvent} from \"react\";\r\n\r\ntype PropTypes = {\r\n    status: string,\r\n    updateStatus: (value: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropTypes> = ({status, updateStatus}) => {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [value, setValue] = useState(status);\r\n\r\n    useEffect(() => {\r\n        setValue(status);\r\n    }, [status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    };\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        updateStatus(value);\r\n    };\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(e.target.value);\r\n    };\r\n\r\n    const content = editMode\r\n        ? <input\r\n            onBlur={deactivateEditMode}\r\n            autoFocus\r\n            type=\"text\"\r\n            onChange={onStatusChange}\r\n            value={value}/>\r\n        : <span onDoubleClick={activateEditMode}>{status || '...'}</span>;\r\n    return (\r\n        <>\r\n            <div>\r\n                {content}\r\n            </div>\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;","// import classes from \"./profileInfo/profileInfo.module.scss\";\r\nimport React from \"react\";\r\nimport {Field, Form, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input, Textarea} from \"../../common/formsControl/formControls\";\r\nimport {requiredField} from \"../../../utils/validators\";\r\nimport classes from \"../../common/formsControl/formControls.module.scss\";\r\nimport {ProfileType} from \"../../../types/types\";\r\n\r\ntype PropTypes = {\r\n    profile: ProfileType\r\n}\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropTypes> & PropTypes> = ({handleSubmit, profile, error}) => {\r\n\r\n    const summaryError = error ? <div className={classes.summaryError}>{error}</div> : null;\r\n\r\n    const contactsInput = Object.keys(profile.contacts).map((key) => {\r\n        return <div key={key}>{key} <Field name={`contacts.${key}`} component={Input}/></div>;\r\n    });\r\n\r\n\r\n    return (\r\n        <>\r\n            <Form onSubmit={handleSubmit}>\r\n                <div>FullName: <Field name={'fullName'} placeholder={\"Your full name\"} validate={[requiredField]}\r\n                                      component={Input}/></div>\r\n                <div>About me: <Field name={'aboutMe'} placeholder={\"About me\"} component={Input}/></div>\r\n                <div>looking for a job: <Field name={'lookingForAJob'} component={Input} type={'checkbox'}/></div>\r\n                <div>My professional skills: <Field name={'lookingForAJobDescription'}\r\n                                                    placeholder={'Your professional skills ?'} component={Textarea}/>\r\n                </div>\r\n                {contactsInput}\r\n                <div>{summaryError}</div>\r\n                <button>Save</button>\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nconst ProfileDataReduxForm = reduxForm<ProfileType, PropTypes>({form: 'edit-profile'})(ProfileDataForm);\r\nexport default ProfileDataReduxForm;","import classes from \"./profileInfo.module.scss\";\r\nimport React, {ChangeEvent, useState} from \"react\";\r\n\r\nimport Spinner from \"../../common/spinner\";\r\nimport userPhoto from '../../../assets/img/avatar.png';\r\nimport ProfileStatusWithHooks from \"../profileStatus/profileStatusWithHooks\";\r\nimport ProfileDataForm from \"./profileDataForm\";\r\nimport {ContactsType, ProfileType} from \"../../../types/types\";\r\n\r\n\r\ntype ProfileInfoPropTypes = {\r\n    profile: ProfileType | null,\r\n    status: string,\r\n    updateStatus: () => void,\r\n    isOwner: boolean,\r\n    savePhoto: (photo: File) => void,\r\n    saveProfile: (formData: ProfileType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo:React.FC<ProfileInfoPropTypes> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n    const [editMode, changeEditMode] = useState(false);\r\n\r\n    const toggleEditMode = () => {\r\n        if (!editMode) {\r\n            changeEditMode(true);\r\n        } else {\r\n            changeEditMode(false);\r\n        }\r\n    };\r\n\r\n    const onPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        e.preventDefault();\r\n        if (e.target.files?.length === 1) {\r\n            const photo = e.target.files[0];\r\n            savePhoto(photo);\r\n        }\r\n    };\r\n\r\n\r\n    const onFormSubmit = (formData: ProfileType) => {\r\n        saveProfile(formData).then(\r\n            () => {toggleEditMode();}\r\n        );\r\n    };\r\n\r\n    if (!profile) {\r\n        return <Spinner/>;\r\n    }\r\n\r\n    const {photos} = profile;\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={classes.description}>\r\n                <div>\r\n                    <img className={classes.profilePhoto} alt={'user photo'} src={photos.large || userPhoto}/>\r\n                    {isOwner && <input onChange={onPhotoSelected} type=\"file\"/>}\r\n                    <b>status: </b><ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n                </div>\r\n                {editMode\r\n                    ? <ProfileDataForm initialValues={profile}\r\n                                       profile={profile}\r\n                                       onSubmit={onFormSubmit}/>\r\n                    : <ProfileData isOwner={isOwner}\r\n                                   profile={profile}\r\n                                   toggleEditMode={toggleEditMode}/>}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\ntype ContactPropTypes = {\r\n    contactTitle: string,\r\n    contactValue: any\r\n}\r\n\r\nconst Contact: React.FC<ContactPropTypes> = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <div>{contactTitle} : {contactValue}</div>\r\n    );\r\n};\r\n\r\ntype ProfileDataPropTypes = {\r\n    profile: ProfileType,\r\n    toggleEditMode: () => void,\r\n    isOwner: any\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataPropTypes> = ({profile, toggleEditMode, isOwner}) => {\r\n    const {fullName, aboutMe, lookingForAJob, lookingForAJobDescription, contacts} = profile;\r\n    return (\r\n        <div className={classes.descr}>\r\n            data\r\n            {isOwner ? <button onClick={toggleEditMode}>edit</button> : null}\r\n            <div>FullName: {fullName}</div>\r\n            <div>About me: {aboutMe}</div>\r\n            <div>{lookingForAJob ? \"looking for a job\" : \"lol job?\"}</div>\r\n            <div>Skills: {lookingForAJob ? lookingForAJobDescription : null}</div>\r\n            <div>Contacts: {\r\n                Object.keys(contacts)\r\n                    .map((title) => {\r\n                return <Contact key={title} contactTitle={title} contactValue={contacts[title as keyof ContactsType]}/>;\r\n            })}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileInfo;","import Post from './post';\r\nexport default Post;","import React from 'react';\r\nimport classes from './post.module.scss';\r\n\r\ntype PostProps = {\r\n    img: string,\r\n    text: string,\r\n    likesCount: number\r\n}\r\n\r\nconst Post:React.FC<PostProps> = ({img, text, likesCount}) => {\r\n    return (\r\n        <div className={classes.item}>\r\n            <img src={img} alt='avatar'/>\r\n            {text}\r\n            <div>\r\n                <span>like {likesCount}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Post;","import {ResultsCodesEnum} from \"../api/api\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\nimport {PhotosType, PostType, ProfileType} from \"../types/types\";\r\nimport {CommonThunkType, InferActionsTypes} from \"./reduxStore\";\r\nimport {profileApi} from \"../api/profileApi\";\r\n\r\nconst initialState = {\r\n    posts: [\r\n        {\r\n            img: 'https://cdn4.iconfinder.com/data/icons/small-n-flat/24/user-alt-512.png',\r\n            text: 'wow',\r\n            likesCount: 2,\r\n            id: 1\r\n        },\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: '',\r\n    onProfilePage: false\r\n};\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    let newPost;\r\n    switch (action.type) {\r\n        case \"PROFILE/ADD-POST\":\r\n            newPost = {\r\n                img: 'https://cdn4.iconfinder.com/data/icons/small-n-flat/24/user-alt-512.png',\r\n                id: 2,\r\n                text: action.postText,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost]\r\n            };\r\n        case \"PROFILE/SET_PROFILE\":\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            };\r\n        case \"PROFILE/SET_STATUS\":\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n        case \"PROFILE/DELETE_POST\":\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(({id}) => id !== action.id)\r\n            };\r\n        case \"PROFILE/SAVE_PHOTO_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photos} as ProfileType\r\n            };\r\n        case \"PROFILE/SAVE_PROFILE_DATA_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, ...action.profile}\r\n            };\r\n        case \"PROFILE/ON_PROFILE_PAGE\":\r\n            return {\r\n                ...state,\r\n                onProfilePage: action.bool\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    addNewPost : (postText: string) => ({type: 'PROFILE/ADD-POST', postText} as const),\r\n    setProfile : (profile: ProfileType) => ({type: 'PROFILE/SET_PROFILE', profile} as const),\r\n    setStatus : (status: string) => ({type: 'PROFILE/SET_STATUS', status} as const),\r\n    deletePost : (id: number) => ({type: 'PROFILE/DELETE_POST', id} as const),\r\n    savePhotoSuccess : (photos: PhotosType)=> ({\r\n        type: 'PROFILE/SAVE_PHOTO_SUCCESS',\r\n        photos\r\n    } as const),\r\n    saveProfileDataSuccess : (profile: ProfileType) => ({\r\n        type: 'PROFILE/SAVE_PROFILE_DATA_SUCCESS',\r\n        profile\r\n    } as const),\r\n    onProfilePage: (bool: boolean) => ({type: 'PROFILE/ON_PROFILE_PAGE', bool}) as const\r\n};\r\n\r\nexport const getProfile = (id: number ): ThunkType => async (dispatch) => {\r\n    let profileData = await profileApi.getProfile(id);\r\n    dispatch(actions.setProfile(profileData));\r\n};\r\n\r\nexport const getStatus = (id: number): ThunkType => async (dispatch) => {\r\n    let status = await profileApi.getStatus(id);\r\n    dispatch(actions.setStatus(status));\r\n};\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    let res = await profileApi.updateStatus(status);\r\n    if (res.data.resultCode === ResultsCodesEnum.Success) {\r\n        dispatch(actions.setStatus(status));\r\n    }\r\n};\r\n\r\nexport const savePhoto = (photo: any): ThunkType => async (dispatch) => {\r\n    let data = await profileApi.uploadUserPhoto(photo);\r\n    if (data.resultCode === ResultsCodesEnum.Success) {\r\n        dispatch(actions.savePhotoSuccess(data.data.photos));\r\n    }\r\n};\r\n\r\nexport const saveProfileData = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    let data = await profileApi.uploadUserData(profile);\r\n    const userId = getState().auth.userId;\r\n    if (data.resultCode === ResultsCodesEnum.Success) {\r\n        if (userId != null){\r\n            dispatch(getProfile(userId));\r\n        }else {\r\n            throw new Error(\"User id can`t be null\");\r\n        }\r\n    } else {\r\n        let message = data.messages.length !== 0 ? data.messages[0] : \"some error\";\r\n        let action = stopSubmit(\"edit-profile\", {_error: message});\r\n        dispatch(action);\r\n        return Promise.reject(data.messages[0]);\r\n    }\r\n};\r\n\r\nexport default profileReducer;\r\n\r\n// Type\r\ntype ThunkType = CommonThunkType<ActionsType | FormAction>\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>;","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, requiredField} from \"../../../../utils/validators\";\r\nimport {Textarea} from \"../../../common/formsControl/formControls\";\r\nimport {MyPostsFormValuesType} from \"../myPosts\";\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\ntype PropTypes = {}\r\n\r\nconst MyPostForm:React.FC<InjectedFormProps<MyPostsFormValuesType, PropTypes> & PropTypes> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field placeholder={'Enter your post text'} validate={[requiredField, maxLength10]} name={\"postText\"} component={Textarea}/>\r\n            <button>Add post</button>\r\n        </form>);\r\n};\r\n\r\nexport default reduxForm<MyPostsFormValuesType>({form: 'postForm'})(MyPostForm);\r\n","import MyPostForm from \"./myPostForm\";\r\n\r\nexport default MyPostForm;","import React, {memo} from 'react';\r\nimport Post from './post';\r\nimport classes from './myPosts.module.scss';\r\nimport {actions} from \"../../../redux/profileReducer\";\r\nimport {connect} from \"react-redux\";\r\nimport MyPostForm from \"./myPostForm\";\r\nimport {InitialStateType} from \"../../../redux/profileReducer\";\r\nimport {AppStateType} from \"../../../redux/reduxStore\";\r\n\r\n\r\ntype PropTypes= {\r\n    postData: InitialStateType[\"posts\"],\r\n    addNewPost: (value: string) => void\r\n}\r\nexport type MyPostsFormValuesType = {\r\n    postText: string\r\n}\r\n\r\n// eslint-disable-next-line react/display-name\r\nconst MyPosts: React.FC<PropTypes> = memo(props => {\r\n    let {postData, addNewPost} = props;\r\n\r\n    const posts = postData.map(({img, text, id, likesCount}) => {\r\n        return <Post key={id} img={img} text={text} likesCount={likesCount}/>;\r\n    });\r\n\r\n    const addPost = (value: MyPostsFormValuesType) => {\r\n        const post = value.postText;\r\n        addNewPost(post);\r\n    };\r\n    return (\r\n        <div className={classes.postBlock}>\r\n            <h3>My post</h3>\r\n            <div>New post</div>\r\n            <MyPostForm onSubmit={addPost}/>\r\n            <div>\r\n                {posts}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        postData: state.profilePage.posts,\r\n    };\r\n};\r\n\r\nconst {addNewPost} = actions;\r\nexport default connect(mapStateToProps, {addNewPost})(MyPosts);","import React from 'react';\r\nimport classes from './profile.module.scss';\r\nimport ProfileInfo from \"./profileInfo/profileInfo\";\r\nimport MyPosts from \"./myPosts/myPosts\";\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\ntype PropTypes = {\r\n    profile: ProfileType | null,\r\n    status: string,\r\n    updateStatus: () => void,\r\n    isOwner: boolean,\r\n    savePhoto: (file: File) => void,\r\n    saveProfile: (formData: ProfileType) => Promise<any>\r\n}\r\n\r\nconst Profile: React.FC<PropTypes> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n\r\n    return (\r\n        <div className={classes.profile}>\r\n            <ProfileInfo saveProfile={saveProfile} savePhoto={savePhoto} isOwner={isOwner} status={status} profile={profile} updateStatus={updateStatus}/>\r\n            <MyPosts/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;","import Profile from \"./profile\";\r\nimport React, {Component} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {actions, getProfile, getStatus, savePhoto, saveProfileData, updateStatus} from \"../../redux/profileReducer\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\n\r\ntype PathParamsType = {\r\n    id: string\r\n}\r\ntype MapDispatchType = {\r\n    savePhoto: (photo: any) => void,\r\n    getProfile: (id: number ) => void,\r\n    getStatus: (id: number ) => void,\r\n    saveProfileData: () => Promise<void>,\r\n    updateStatus: () => void,\r\n    onProfilePage: (bool: boolean) => void\r\n}\r\ntype MapStateProps = ReturnType<typeof mapStateToProps>\r\n\r\ntype PropTypes = MapStateProps & MapDispatchType & RouteComponentProps<PathParamsType>\r\nclass ProfileAPI extends Component<PropTypes> {\r\n\r\n    savePhoto = (photo: any) => {\r\n        const {savePhoto} = this.props;\r\n        savePhoto(photo);\r\n    };\r\n\r\n    refreshProfileData = () => {\r\n        const {getProfile, match, getStatus, authUserId} = this.props;\r\n        let id: number | null = +match.params.id;\r\n        if (!id) {\r\n            id = authUserId;\r\n            if (!id) {\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n        getProfile(id as number);\r\n        getStatus(id as number);\r\n    };\r\n\r\n    componentDidMount() {\r\n        const {onProfilePage} = this.props;\r\n        onProfilePage(true);\r\n        this.refreshProfileData();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropTypes) {\r\n        if (prevProps.match.params.id !== this.props.match.params.id) {\r\n            this.refreshProfileData();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount(): void {\r\n        onProfilePage(false);\r\n    }\r\n\r\n    render() {\r\n        const {profile, status, updateStatus, saveProfileData} = this.props;\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.id}\r\n                     profile={profile}\r\n                     status={status}\r\n                     savePhoto={(photo) => this.savePhoto(photo)}\r\n                     updateStatus={updateStatus}\r\n                     saveProfile={saveProfileData}/>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authUserId: state.auth.userId,\r\n    };\r\n};\r\n\r\nconst {onProfilePage} = actions;\r\n\r\nexport default compose<React.ComponentType>(\r\n    withRouter, connect(mapStateToProps, {onProfilePage, getProfile, getStatus, updateStatus, savePhoto, saveProfileData}))(ProfileAPI);\r\n\r\n","export default __webpack_public_path__ + \"static/media/Plus-Icon-PNG.ac4270cf.png\";","export default __webpack_public_path__ + \"static/media/check.c4294ef8.png\";","import User from \"./user\";\r\nexport default User;","\r\nimport React from \"react\";\r\nimport classes from './user.module.scss';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nimport plus from './Plus-Icon-PNG.png';\r\nimport check from './check.png';\r\n\r\ntype PropsType = {\r\n    fullName: string,\r\n    onFollowClick: () => void,\r\n    startDialog: (id: number) => void,\r\n    followStatus: boolean,\r\n    photoUrl: string,\r\n    status: string,\r\n    id: number,\r\n    followingInProgress: Array<number>\r\n}\r\n\r\nconst User:React.FC<PropsType> = ({fullName, onFollowClick, followStatus,\r\n                                       photoUrl, status,\r\n                                      id: userId, followingInProgress, startDialog}) => {\r\n    return (\r\n        <div className={classes.user}>\r\n            <div className={classes.user}>\r\n                <div>\r\n                    <NavLink to={`/profile/${userId}`}>\r\n                        <img src={photoUrl} alt='user photo' className={classes.user_photo}/>\r\n                    </NavLink>\r\n                </div>\r\n                <div>\r\n                    <div className={classes.user_name}>{fullName}</div><div className={classes.user_status}>{status}</div>\r\n                </div>\r\n                <div>\r\n                    {followStatus ? <button onClick={() => startDialog(userId)}>Send</button> : null}\r\n                    <button className={classes.subscribe}\r\n                            disabled={followingInProgress.some(id => id === userId)}\r\n                            onClick={onFollowClick}>\r\n                            <img src={!followStatus ? plus : check} alt={'follow'}/>\r\n                            </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default User;","export default __webpack_public_path__ + \"static/media/next.43c0e5d8.svg\";","export default __webpack_public_path__ + \"static/media/prev.07f693de.svg\";","import Paginator from \"./paginator\";\r\n\r\nexport default Paginator;","import React, {useState} from 'react';\r\nimport styles from \"./paginator.module.scss\";\r\nimport cn from \"classnames\";\r\nimport next from './next.svg';\r\nimport prev from './prev.svg';\r\ntype PropsType = {\r\n    totalItemsCount: number,\r\n    pageSize: number,\r\n    currentPage: number,\r\n    onPageChanged: (pageNumber: number) => void,\r\n    portionSize?: number\r\n}\r\n\r\nlet Paginator: React.FC<PropsType> = ({\r\n                                          totalItemsCount, pageSize, currentPage\r\n                                          , onPageChanged, portionSize = 10\r\n                                      }) => {\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n\r\n    let pages: Array<number> = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    if (pagesCount < 2) {\r\n        return null;\r\n    }\r\n    return (\r\n        <div className={styles.paginator}>\r\n        {portionNumber > 1 &&\r\n        <span className={styles.navBtn + ' ' + styles.left} onClick={() => {\r\n            setPortionNumber(portionNumber - 1);\r\n        }}><img src={prev} alt=\"next\"/></span>}\r\n\r\n        {pages\r\n            .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n            .map((p) => {\r\n                return <span className={cn({\r\n                    [styles.selectedPage]: currentPage === p\r\n                }, styles.pageNumber)}\r\n                             key={p}\r\n                             onClick={() => {\r\n                                 onPageChanged(p);\r\n                             }}>{p}</span>;\r\n            })}\r\n        {portionCount > portionNumber &&\r\n        <span className={styles.navBtn + ' ' + styles.right} onClick={() => {\r\n            setPortionNumber(portionNumber + 1);\r\n        }}><img src={next} alt=\"next\"/></span>}\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default Paginator;","import {axiosInstance, GetItemsType, ResponseType} from \"./api\";\r\nimport {UserType} from \"../types/types\";\r\n\r\nexport const usersApi = {\r\n    getUsers: async (currentPage = 1, pageSize = 10, term: string = '', friend: null | boolean = null) => {\r\n        const url =`/users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? '': `&friend=${friend}`);\r\n        return axiosInstance.get<GetItemsType<UserType>>(url).then(res => res.data);\r\n    },\r\n    followUser: (id: number) => {\r\n        return axiosInstance.post<ResponseType>(`/follow/${id}`).then(res => res.data);\r\n    },\r\n    unFollowUser: (id: number) => {\r\n        return axiosInstance.delete(`/follow/${id}`).then(res => res.data) as Promise<ResponseType>;\r\n    }\r\n};","import {UserType} from \"../types/types\";\r\nimport {CommonThunkType, InferActionsTypes} from \"./reduxStore\";\r\nimport {usersApi} from \"../api/usersApi\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ResultsCodesEnum} from \"../api/api\";\r\n\r\nconst initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 8,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isLoading: false,\r\n    followingInProgress: [] as Array<number>, //array of users ID\r\n    filter: {\r\n        term: '',\r\n        friend: null as null | boolean,\r\n    }\r\n};\r\n\r\nconst usersReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"USERS/SET_USERS\":\r\n            return {\r\n                ...state,\r\n                users: [...action.users]\r\n            };\r\n        case \"USERS/TOGGLE_FOLLOW\":\r\n            return {\r\n                ...state,\r\n                users: state.users.map((user) => {\r\n                    if (user.id === action.id) {\r\n                        return {...user, followed: !user.followed};\r\n                    }\r\n                    return user;\r\n                })\r\n            };\r\n        case \"USERS/SET_TOTAL_USERS_COUNT\":\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.usersCount\r\n            };\r\n        case \"USERS/SET_CURRENT_PAGE\":\r\n            return {\r\n                ...state,\r\n                currentPage: action.pageNumber\r\n            };\r\n        case \"USERS/TOGGLE_LOADING\":\r\n            return {\r\n                ...state,\r\n                isLoading: !state.isLoading\r\n            };\r\n        case \"USERS/TOGGLE_FOLLOWING_PROGRESS\":\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.id]\r\n                    : state.followingInProgress.filter(id => id !== action.id)\r\n            };\r\n        case \"USERS/SET_FILTER\":\r\n            return {\r\n                ...state,\r\n                filter: action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    toggleLoadingStatus : () => ({type: 'USERS/TOGGLE_LOADING'} as const),\r\n    setTotalUsersCount : (usersCount: number) => ({\r\n        type: 'USERS/SET_TOTAL_USERS_COUNT',\r\n        usersCount\r\n    } as const),\r\n    setCurrentPage : (pageNumber: number) => ({type: 'USERS/SET_CURRENT_PAGE', pageNumber} as const),\r\n    setUsers : (users: Array<UserType>) => ({type: 'USERS/SET_USERS', users} as const),\r\n    toggleFollowingProgress : (id: number, isFetching: boolean) => ({\r\n        type: 'USERS/TOGGLE_FOLLOWING_PROGRESS',\r\n        id,\r\n        isFetching\r\n    } as const),\r\n    follow: (id: number) =>  ({type: 'USERS/TOGGLE_FOLLOW', id} as const),\r\n    setFilter: (payload: FilterFormType) => ({type: 'USERS/SET_FILTER', payload} as const),\r\n};\r\n\r\nexport const requestUsers = (currentPage: number, pageSize: number): ThunkType =>\r\n    async (dispatch, getState) => {\r\n        dispatch(actions.toggleLoadingStatus());\r\n        let res;\r\n        let filter = getState().usersPage.filter;\r\n        res = await usersApi.getUsers(currentPage, pageSize, filter.term, filter.friend);\r\n        dispatch(actions.toggleLoadingStatus());\r\n        dispatch(actions.setTotalUsersCount(res.totalCount));\r\n        dispatch(actions.setUsers(res.items));\r\n    };\r\n\r\nconst _followUnfollowFlow = async (dispatch: Dispatch<ActionsType>, id: number, action: (id: number) => ActionsType, apiMethod: any) => {\r\n    dispatch(actions.toggleFollowingProgress(id, true));\r\n    let data = await apiMethod(id);\r\n    if (data.resultCode === ResultsCodesEnum.Success) {\r\n        dispatch(action(id));\r\n        dispatch(actions.toggleFollowingProgress(id, false));\r\n    }\r\n};\r\n\r\nexport const followUser = (id: number): ThunkType => async (dispatch) => {\r\n    _followUnfollowFlow(dispatch, id, actions.follow, usersApi.followUser);\r\n};\r\n\r\nexport const unFollowUser = (id: number): ThunkType => async (dispatch) => {\r\n    _followUnfollowFlow(dispatch, id, actions.follow, usersApi.unFollowUser);\r\n};\r\n\r\n\r\nexport default usersReducer;\r\n\r\n//Type\r\nexport type FilterFormType = typeof initialState.filter\r\ntype ThunkType = CommonThunkType<ActionsType>\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>","import {AppStateType} from \"./reduxStore\";\r\n\r\nexport const getUsers = (state: AppStateType) => {\r\n    return state.usersPage.users;\r\n};\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize;\r\n};\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount;\r\n};\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage;\r\n};\r\nexport const getIsLoadingStatus = (state: AppStateType) => {\r\n    return state.usersPage.isLoading;\r\n};\r\nexport const getIsFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress;\r\n};\r\nexport const getFilter = (state: AppStateType) => {\r\n    return state.usersPage.filter;\r\n};\r\n","import {Users} from \"./Users\";\r\nexport default Users;","/* eslint-disable */\r\nimport React, {useEffect} from 'react';\r\nimport User from './user';\r\nimport userPhoto from '../../assets/img/avatar.png';\r\nimport Paginator from \"./paginator\";\r\nimport Spinner from \"../common/spinner\";\r\nimport {actions, requestUsers, followUser, unFollowUser} from \"../../redux/usersReducer\";\r\nimport classes from \"./users.module.scss\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentPage, getFilter,\r\n    getIsFollowingInProgress,\r\n    getIsLoadingStatus,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers\r\n} from \"../../redux/userSelectors\";\r\nimport {useHistory} from 'react-router-dom';\r\nimport * as queryString from \"querystring\";\r\nimport {startDialog} from \"../../redux/dialogsReducer\";\r\n\r\ntype QueryParamType = { term?: string, friend?: string, page?: string };\r\nexport const Users: React.FC = () => {\r\n    const totalUsersCount = useSelector(getTotalUsersCount);\r\n    const currentPage = useSelector(getCurrentPage);\r\n    const pageSize = useSelector(getPageSize);\r\n    const usersData = useSelector(getUsers);\r\n    const isLoading = useSelector(getIsLoadingStatus);\r\n    const followingInProgress = useSelector(getIsFollowingInProgress);\r\n    const filter = useSelector(getFilter);\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        //query param initialize\r\n        const parse = queryString.parse(history.location.search.substr(1)) as  QueryParamType;\r\n        let actualFilter = filter;\r\n        let actualPage = currentPage;\r\n\r\n        if (parse.page) actualPage = +parse.page;\r\n        if (parse.term) actualFilter = {...actualFilter, term: parse.term as string};\r\n        if (parse.friend) actualFilter = {...actualFilter, friend: parse.friend === 'null' ? null: parse.friend !== 'false'};\r\n\r\n        dispatch(actions.setCurrentPage(actualPage));\r\n        dispatch(actions.setFilter(actualFilter));\r\n        dispatch(requestUsers(actualPage, pageSize));\r\n        return () => {\r\n            dispatch(actions.setFilter({term: '', friend: null}))\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        let query: QueryParamType = {};\r\n        if (!!filter.term) query.term = filter.term;\r\n        if (filter.friend !== null) query.friend = String(filter.friend);\r\n        if (currentPage !== 1) query.page = String(currentPage);\r\n\r\n        history.push({\r\n            pathname: '/users',\r\n            search: queryString.encode(query)\r\n        });\r\n    }, [filter, currentPage]);\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(actions.setCurrentPage(pageNumber));\r\n        dispatch(requestUsers(pageNumber, pageSize));\r\n    };\r\n\r\n    const onStartDialog = (id: number) => {\r\n        history.push(`/dialogs/${id}`)\r\n        dispatch(startDialog(id));\r\n    }\r\n\r\n    const followUserClick = (id: number) => {\r\n        dispatch(followUser(id));\r\n    };\r\n\r\n    const unFollowUserClick = (id: number) => {\r\n        dispatch(unFollowUser(id));\r\n    };\r\n\r\n    const users = usersData.map(({id, name, status, followed, photos}) => {\r\n        return <User\r\n            onFollowClick={() => followed ? unFollowUserClick(id) : followUserClick(id)}\r\n            key={id}\r\n            photoUrl={photos.small ? photos.small : userPhoto}\r\n            followStatus={followed}\r\n            fullName={name}\r\n            status={status}\r\n            startDialog={onStartDialog}\r\n            id={id}\r\n            followingInProgress={followingInProgress}/>;\r\n    });\r\n\r\n    const usersContent = isLoading ? <Spinner/> : users;\r\n    if (usersData.length === 0 && !isLoading) {\r\n        return <div className={classes.users}>\r\n            <div className={classes.notFound}>\r\n                <img src=\"http://vkclub.su/_data/stickers/gribson/sticker_vk_gribson_019.png\" alt=\"oops\"/>\r\n                <p>Sorry users not found</p>\r\n            </div>\r\n        </div>;\r\n    }\r\n    return (\r\n        <div className={classes.users}>\r\n            <>\r\n                <div className={classes.usersContainer}>\r\n                    {usersContent}\r\n                </div>\r\n                <div className={classes.paginator}>\r\n                    <Paginator\r\n                        totalItemsCount={totalUsersCount}\r\n                        pageSize={pageSize}\r\n                        currentPage={currentPage}\r\n                        onPageChanged={onPageChanged}\r\n                    />\r\n                </div>\r\n            </>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n","import React from \"react\";\r\nimport {Form, Formik, Field} from \"formik\";\r\nimport {FilterFormType} from \"../../../redux/usersReducer\";\r\nimport classes from '../../header/header.module.scss';\r\nimport {useSelector} from \"react-redux\";\r\nimport {getFilter} from \"../../../redux/userSelectors\";\r\ntype UsersSearchFormPropTypes ={\r\n    onSubmit: (data: FilterFormType) => void\r\n}\r\n\r\ntype FriendFormType = \"true\" | \"false\" | \"null\";\r\ntype FormType = {\r\n    term: string,\r\n    friend: FriendFormType\r\n}\r\nconst UsersSearchForm: React.FC<UsersSearchFormPropTypes> = ({onSubmit}) => {\r\n    const filter = useSelector(getFilter);\r\n\r\n    const onButtonClick = (values: FormType) => {\r\n        const filter = {\r\n            term: values.term,\r\n            friend: values.friend === 'null' ? null : values.friend !== 'false'\r\n        };\r\n        onSubmit(filter);\r\n    };\r\n    return (\r\n            <Formik\r\n                enableReinitialize\r\n                initialValues={{term: filter.term, friend: String(filter.friend) as FriendFormType}}\r\n                onSubmit={onButtonClick}\r\n            >\r\n                {() => (\r\n                    <Form>\r\n                        <Field as=\"select\" name=\"friend\">\r\n                            <option value=\"null\">All</option>\r\n                            <option value=\"true\">Only followed</option>\r\n                            <option value=\"false\">Only unfollowed</option>\r\n                        </Field>\r\n                        <Field type=\"text\" name=\"term\"/>\r\n                             <button className={classes.submit} type=\"submit\"/>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n    );\r\n};\r\n\r\nexport default React.memo(UsersSearchForm);","import React from 'react';\nimport classes from './header.module.scss';\nimport UsersSearchFormik from \"../users/usersSearchForm/UsersSearchFormik\";\nimport {NavLink} from \"react-router-dom\";\nimport {FilterFormType} from \"../../redux/usersReducer\";\n\ntype PropTypes = {\n\n    onSearchSubmit: (filter: FilterFormType) => void\n}\n\nconst Header: React.FC<PropTypes> = ({onSearchSubmit}) => {\n    return (\n        <header className={classes.header}>\n            <HeaderContent onSearchSubmit={onSearchSubmit}/>\n        </header>\n    );\n};\n\ntype HeaderContentType = {\n    onSearchSubmit: (filter: FilterFormType) => void\n}\n\nconst HeaderContent: React.FC<HeaderContentType> = ({onSearchSubmit}) => {\n    return (\n        <div>\n            <div className={classes.content}>\n                <h1 className={classes.logo + ' ' + classes.logo_auth}>mashroom</h1>\n                <UsersSearchFormik onSubmit={onSearchSubmit}/>\n                <ul className={classes.menu}>\n                    <li><NavLink activeClassName={classes.active} to='/profile'>PROFILE</NavLink></li>\n                    <li><NavLink activeClassName={classes.active} to='/users'>USERS</NavLink></li>\n                    <li><NavLink activeClassName={classes.active} to='/dialogs'>MESSAGES</NavLink></li>\n                    <NavLink className={classes.settings} activeClassName={classes.active} to='/settings'/>\n                </ul>\n\n            </div>\n        </div>\n\n    );\n};\n\nexport default Header;","\nimport React from 'react';\nimport Header from './header';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {actions, FilterFormType, requestUsers} from \"../../redux/usersReducer\";\nimport {getPageSize} from \"../../redux/userSelectors\";\nimport {useHistory, useLocation} from 'react-router-dom';\n\n\nconst HeaderAPI: React.FC = (props) => {\n    const dispatch = useDispatch();\n    const pageSize = useSelector(getPageSize);\n    const history = useHistory();\n    const location = useLocation();\n\n\n    const onFilterChanged = (filter: FilterFormType) => {\n        if(location.pathname !== '/users' ) {\n            history.push('/users');\n        }\n\n        dispatch(actions.setCurrentPage(1));\n        dispatch(actions.setFilter(filter));\n\n        dispatch(requestUsers(1, pageSize));\n    };\n    return (\n        <Header {...props} onSearchSubmit={onFilterChanged}/>\n    );\n};\n\nexport default HeaderAPI;\n\n\n","import LoginForm from \"./loginForm\";\r\n\r\nexport default LoginForm;","import React from \"react\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Input} from \"../../common/formsControl/formControls\";\nimport {requiredField} from \"../../../utils/validators\";\nimport {LoginFormValuesType} from \"../login\";\nimport classes from './loginForm.module.scss';\n\ntype LoginFormOwnProps = {captcha: string | null}\n\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> = ({error, captcha, handleSubmit}) => {\n    const summaryError = error ? <div className={classes.summaryError}>{error}</div> : null;\n    return (\n        <form className={classes.form} onSubmit={handleSubmit}>\n            <div className={classes.input}>\n                <div>Email</div>\n                <Field validate={[requiredField]} type=\"text\" name={'email'} placeholder={'login'} component={Input}/>\n            </div>\n            <div className={classes.input}>\n                <div>Password</div>\n                <Field validate={[requiredField]} type=\"password\" name={'password'} placeholder={'password'}\n                        component={Input}/>\n            </div>\n            <div className={classes.checkbox}>\n                <Field type=\"checkbox\" name={'rememberMe'} component={Input}/>\n                <div className={classes.remember}>Remember me</div>\n            </div>\n            {summaryError}\n            {captcha ?\n                <div>\n                    <img src={captcha} alt=\"captcha\"/>\n                    <Field placeholder={\"captcha text\"} validate={[requiredField]} type=\"text\" name={\"captcha\"} component={Input}/>\n                </div>\n                : null}\n            <div className={classes.button}>\n                <button>Login</button>\n            </div>\n        </form>\n    );\n};\n\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginForm);\n\nexport default LoginReduxForm;","import {Login} from \"./login\";\r\nexport default Login;","import React from \"react\";\r\nimport LoginReduxForm from \"./loginForm\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport classes from './login.module.scss';\r\nimport {getCaptcha, getIsAuth} from \"../../redux/authSelectors\";\r\nimport {login} from \"../../redux/authReducer\";\r\n\r\nexport type LoginFormValuesType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    captcha: string\r\n}\r\n\r\nexport const Login: React.FC = () => {\r\n\r\n    const captcha = useSelector(getCaptcha);\r\n    const isAuth = useSelector(getIsAuth);\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        const {email, password, rememberMe, captcha} = formData;\r\n        dispatch(login(email, password, rememberMe, captcha));\r\n    };\r\n\r\n\r\n    if (isAuth) return <Redirect to={'/profile'}/>;\r\n\r\n    return (\r\n        <div className={classes.login}>\r\n            <LoginReduxForm captcha={captcha} onSubmit={onSubmit}/>\r\n            <div className={classes.descr}>\r\n                <p>Welcome to the mashroom</p>\r\n                <ul>\r\n                    <li>Communication</li>\r\n                    <li>News</li>\r\n                    <li>Self-expression</li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n","import {getAuth} from \"./authReducer\";\r\nimport {InferActionsTypes} from \"./reduxStore\";\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    initialized: false\r\n};\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType=> {\r\n\r\n    switch (action.type) {\r\n        case 'APP/INITIALIZED_SUCCESS':\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    initializedSuccess : () => ({type: 'APP/INITIALIZED_SUCCESS'} as const)\r\n};\r\n\r\n\r\nexport default appReducer;\r\n\r\nexport const initializeApp = () => async (dispatch : any) => {\r\n    let dispatchResult = dispatch(getAuth());\r\n    dispatchResult\r\n        .then(() => {\r\n            dispatch(actions.initializedSuccess());\r\n        });\r\n};","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer from \"./profileReducer\";\r\nimport dialogsReducer from \"./dialogsReducer\";\r\nimport sidebarReducer from \"./sidebarReducer\";\r\nimport usersReducer from \"./usersReducer\";\r\nimport authReducer from \"./authReducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport {reducer as formReducer} from 'redux-form';\r\nimport appReducer from \"./appReducer\";\r\nimport logger from 'redux-logger';\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    form: formReducer\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer;\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n\r\nexport type InferActionsTypes<T> = T extends {[keys:string]: (...args: any[]) => infer U} ? U : never\r\n\r\nexport type CommonThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware, logger)));\r\n// @ts-ignore\r\nexport default store;","import PageNotFound from \"./404page\";\n\nexport default PageNotFound;","import React from \"react\";\nimport classes from './pageNotFound.module.scss';\nconst PageNotFound = () => {\n    return (\n        <div className={classes.pageNotFound}>\n            <img src=\"http://vkclub.su/_data/stickers/gribson/sticker_vk_gribson_019.png\" alt=\"\"/>\n            <p>Oooops! <br/> Page not found</p>\n        </div>\n    );\n};\n\nexport default PageNotFound;","import React, {Component, ComponentType, Suspense} from 'react';\r\nimport NavBar from '../nav/nav';\r\nimport {Redirect, Switch, withRouter, Route, HashRouter} from \"react-router-dom\";\r\nimport './app.scss';\r\nimport Settings from \"../settings\";\r\nimport Dialogs from \"../dialogs\";\r\nimport ProfileAPI from \"../profile/profileAPI\";\r\nimport UsersPage from \"../users\";\r\nimport HeaderAPI from \"../header/headerAPI\";\r\nimport Login from \"../login\";\r\nimport {connect, Provider} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {initializeApp} from \"../../redux/appReducer\";\r\nimport Spinner from \"../common/spinner\";\r\nimport store, {AppStateType} from \"../../redux/reduxStore\";\r\nimport PageNotFound from '../404page';\r\n\r\n\r\n\r\n\r\ntype MapStateToPropsType = ReturnType<typeof mapStateToProps>\r\ntype MapDispatchToProps = {\r\n    initializeApp: () => void\r\n}\r\ntype PropTypes = MapStateToPropsType & MapDispatchToProps\r\n\r\nconst News = React.lazy(() => import('../news'));\r\nconst Music = React.lazy(() => import('../music'));\r\nconst ChatPage = React.lazy(() => import('../pages/chat/chatPage'));\r\nclass App extends Component<PropTypes> {\r\n\r\n    catchAllUnhandledErrors = () => {\r\n        alert('some error occurred');\r\n    };\r\n\r\n    componentDidMount() {\r\n        const {initializeApp} = this.props;\r\n        initializeApp();\r\n        window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors);\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) return <Spinner/>;\r\n        if (!this.props.isAuth) return <Login/>;\r\n        return (\r\n            <>\r\n            <div className='app _container'>\r\n                    <HeaderAPI/>\r\n                    {this.props.isAuth ? <NavBar/> : null}\r\n                    <div className='app-wrapper-content'>\r\n                        <Suspense fallback={<Spinner/>}>\r\n                            <Switch>\r\n                                <Route exact path='/' render={() => <Redirect to={'/profile'}/>}/>\r\n                                <Route path='/profile/:id?' render={() => <ProfileAPI />}/>\r\n                                <Route path='/dialogs/:id?' render={() => <Dialogs/>}/>\r\n                                <Route path='/chat' render={() => <ChatPage/>}/>\r\n                                <Route path='/music' component={Music}/>\r\n                                <Route path='/news' component={News}/>\r\n                                <Route path='/users' component={UsersPage}/>\r\n                                <Route path='/settings' component={Settings}/>\r\n                                <Route path='/login' component={Login}/>\r\n                                <Route path='*' component={PageNotFound}/>\r\n                            </Switch>\r\n                        </Suspense>\r\n                    </div>\r\n            </div>\r\n\r\n                </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        initialized: state.app.initialized,\r\n        isAuth: state.auth.isAuth\r\n    };\r\n};\r\nlet AppContainer = compose<ComponentType>(withRouter, connect(mapStateToProps, {initializeApp}))(App);\r\nconst MainApp: React.FC = () => {\r\n    return (\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <AppContainer/>\r\n            </Provider>\r\n        </HashRouter>\r\n    );\r\n};\r\nexport default MainApp;","import ReactDOM from \"react-dom\";\r\nimport React from \"react\";\r\nimport MainApp from \"./component/app/app\";\r\n\r\n\r\nReactDOM.render(<MainApp/>, document.getElementById('root'));\r\n\r\n\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"paginator_paginator__2ARdb\",\"pageNumber\":\"paginator_pageNumber__2YQgy\",\"selectedPage\":\"paginator_selectedPage__2Px8m\",\"navBtn\":\"paginator_navBtn__3q56V\",\"right\":\"paginator_right__1dCx0\",\"left\":\"paginator_left__1Iv1A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"loginForm_form__3Vb_K\",\"input\":\"loginForm_input__ziBHz\",\"checkbox\":\"loginForm_checkbox__3e9UO\",\"remember\":\"loginForm_remember__jXYoO\",\"button\":\"loginForm_button__1C0af\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"message_message__2SYi-\",\"own\":\"message_own__2ClmB\",\"noOwn\":\"message_noOwn__GZpCA\",\"text\":\"message_text__3wddD\",\"senderName\":\"message_senderName__3wTCt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"user\":\"user_user__1hjSD\",\"user_photo\":\"user_user_photo__15M4Y\",\"user_name\":\"user_user_name__1beMh\",\"user_status\":\"user_user_status__30yOH\",\"subscribe\":\"user_subscribe__HXmuo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"formControls_formControl__nwszG\",\"error\":\"formControls_error__23Zih\",\"summaryError\":\"formControls_summaryError__4h2HN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"users\":\"users_users__1XLYr\",\"paginator\":\"users_paginator__2pEaW\",\"notFound\":\"users_notFound__2jHfh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"dialogs_dialogs__14W0_\",\"dialogsItems\":\"dialogs_dialogsItems__oSSNC\",\"messagesContainer\":\"dialogs_messagesContainer__DD0fF\",\"messages\":\"dialogs_messages__Odv3N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"dialog_dialog__SgFmC\",\"active\":\"dialog_active__2_S4l\",\"name\":\"dialog_name__Ax5JM\",\"photo\":\"dialog_photo__27FwB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"dialogsForm_wrapper__3Ba7c\",\"form\":\"dialogsForm_form__C9lDk\",\"photo\":\"dialogsForm_photo__2t1e_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"description\":\"profileInfo_description__3o5_0\",\"profilePhoto\":\"profileInfo_profilePhoto__splgS\",\"contacts\":\"profileInfo_contacts__3I2Gx\"};"],"sourceRoot":""}