{"version":3,"sources":["component/common/spinner/spinner.module.scss","component/users/users.module.scss","component/login/login.module.scss","component/profile/profile.module.scss","component/profile/myPosts/post/post.module.scss","component/profile/myPosts/myPosts.module.scss","component/404page/pageNotFound.module.scss","component/nav/nav.module.scss","component/header/header.module.scss","api/api.ts","component/nav/nav.tsx","api/authApi.ts","api/securityApi.ts","redux/authReducer.ts","component/redirectHOC/redirectHOC.tsx","component/redirectHOC/index.js","utils/validators/validators.js","component/settings/index.js","component/settings/settings.tsx","assets/img/avatar.png","component/dialogs/dialogItem/dialog.tsx","component/dialogs/message/index.js","component/dialogs/message/message.tsx","redux/dialogsReducer.ts","component/common/formsControl/formControls.tsx","component/dialogs/dialogsForm/index.js","component/dialogs/dialogsForm/dialogsForm.tsx","component/dialogs/index.js","component/dialogs/dialogs.tsx","component/common/spinner/spinner.tsx","component/common/spinner/index.js","component/profile/profileStatus/profileStatusWithHooks.tsx","component/profile/profileInfo/profileDataForm.tsx","component/profile/profileInfo/profileInfo.tsx","component/profile/myPosts/post/index.js","component/profile/myPosts/post/post.tsx","api/profileApi.ts","redux/profileReducer.ts","component/profile/myPosts/myPostForm/myPostForm.tsx","component/profile/myPosts/myPostForm/index.js","component/profile/myPosts/myPosts.tsx","component/profile/profile.tsx","component/profile/profileAPI.tsx","component/users/user/Plus-Icon-PNG.png","component/users/user/check.png","component/users/user/index.js","component/users/user/user.tsx","component/users/paginator/index.js","component/users/paginator/paginator.tsx","api/usersApi.ts","redux/usersReducer.ts","redux/userSelectors.ts","component/users/Users.tsx","component/users/usersAPI.tsx","component/users/usersSearchForm/UsersSearchFormik.tsx","component/header/header.tsx","component/header/headerAPI.tsx","component/login/loginForm/index.js","component/login/loginForm/loginForm.tsx","redux/authSelectors.ts","component/login/index.js","component/login/login.tsx","redux/appReducer.ts","redux/sidebarReducer.ts","redux/reduxStore.ts","component/404page/index.js","component/404page/404page.tsx","component/app/app.tsx","index.js","component/login/loginForm/loginForm.module.scss","component/users/user/user.module.scss","component/common/formsControl/formControls.module.scss","component/dialogs/dialogItem/dialog.module.scss","component/dialogs/dialogs.module.scss","component/dialogs/message/message.module.scss","component/profile/profileInfo/profileInfo.module.scss","component/users/paginator/paginator.module.scss"],"names":["module","exports","ResultsCodesEnum","ResultsCodeForCaptcha","connect","className","classes","navbar","items","item","activeClassName","active","to","axiosInstance","axios","create","withCredentials","baseURL","headers","authApi","get","then","res","data","email","password","rememberMe","captcha","post","delete","securityApi","initialState","isLoading","userId","login","isAuth","actions","type","url","getAuth","dispatch","a","meData","resultCode","Success","id","logout","getCaptchaUrl","authReducer","state","action","withAuthRedirect","Component","auth","props","restProps","maxLength","Settings","useDispatch","onClick","Dialog","person","path","dialog","photo","src","userPhoto","alt","name","Message","label","message","text","messages","dialogs","dialogsReducer","newMessage","FormControl","meta","touched","error","children","hasError","errorMessage","formControl","Textarea","input","Input","requiredField","value","DialogsForm","reduxForm","form","onSubmit","handleSubmit","Field","component","validate","Dialogs","compose","dialogsData","dialogsPage","messagesData","addNewMessage","map","dialogsItems","newMessageText","Spinner","preloader","spinner","ProfileStatusWithHooks","status","updateStatus","useState","editMode","setEditMode","setValue","useEffect","content","onBlur","autoFocus","onChange","e","target","onDoubleClick","ProfileDataReduxForm","profile","summaryError","contactsInput","Object","keys","contacts","key","Form","placeholder","Contact","contactTitle","contactValue","ProfileData","toggleEditMode","isOwner","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","descr","title","ProfileInfo","savePhoto","saveProfile","changeEditMode","photos","description","profilePhoto","large","preventDefault","files","length","initialValues","formData","Post","img","likesCount","profileApi","put","FormData","append","posts","postText","getProfile","profileData","profileReducer","newPost","filter","maxLength10","MyPostForm","MyPosts","memo","postData","addNewPost","postBlock","profilePage","Profile","ProfileAPI","refreshProfileData","match","getStatus","authUserId","params","history","push","this","prevProps","saveProfileData","withRouter","getState","Error","stopSubmit","_error","Promise","reject","User","onFollowClick","followStatus","photoUrl","followingInProgress","user","user_photo","user_name","user_status","subscribe","disabled","some","check","plus","Paginator","totalItemsCount","pageSize","currentPage","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","portionCount","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","styles","paginator","p","cn","selectedPage","pageNumber","usersApi","getUsers","term","friend","followUser","unFollowUser","users","totalUsersCount","usersCount","isFetching","payload","requestUsers","usersPage","totalCount","_followUnfollowFlow","apiMethod","usersReducer","followed","getPageSize","getTotalUsersCount","getCurrentPage","getIsLoadingStatus","getIsFollowingInProgress","Users","useSelector","usersData","followUserClick","unFollowUserClick","small","usersContainer","UsersPage","UsersSearchForm","values","as","submit","React","HeaderContent","onSearchSubmit","logo","logo_auth","UsersSearchFormik","menu","settings","Header","header","logo_noAuth","setFilter","location","pathname","LoginForm","checkbox","remember","button","getCaptcha","getIsAuth","Login","initialized","appReducer","friends","sidebarReducer","rootReducer","combineReducers","sidebar","app","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","logger","PageNotFound","pageNotFound","News","lazy","Music","App","catchAllUnhandledErrors","alert","initializeApp","addEventListener","removeEventListener","fallback","exact","render","AppContainer","MainApp","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.07237279.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"spinner_preloader__1jMg2\",\"spinner\":\"spinner_spinner__1Hetg\",\"spin\":\"spinner_spin__A_APw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"users\":\"users_users__1XLYr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"login_login__VKdDU\",\"descr\":\"login_descr__u0f4g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"profile_profile__1d7zg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"post_item__1y2Bx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"myPosts_postBlock__1gIeR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageNotFound\":\"pageNotFound_pageNotFound__2eM4K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"nav_navbar__1sgBY\",\"items\":\"nav_items__1HLGi\",\"item\":\"nav_item__7oIdo\",\"active\":\"nav_active__1Qdkv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__18sGI\",\"content\":\"header_content__15Dq1\",\"submit\":\"header_submit__vXiCC\",\"logo\":\"header_logo__esTHP\",\"logo_auth\":\"header_logo_auth__2BghE\",\"logo_noAuth\":\"header_logo_noAuth__emH4y\",\"menu\":\"header_menu__2b9oq\",\"active\":\"header_active__19EXb\",\"settings\":\"header_settings__26DpH\",\"loginBlock\":\"header_loginBlock__2ztlx\"};","import axios from \"axios\";\r\nimport {UserType} from \"../types/types\";\r\n\r\n\r\nexport const axiosInstance = axios.create({\r\n    withCredentials: true,\r\n    baseURL:\"https://social-network.samuraijs.com/api/1.0\",\r\n    headers: {\"API-KEY\": \"f68a4cda-2f4c-4785-816b-4190cdf2b12c\"}\r\n});\r\n\r\nexport type GetItemsType = {\r\n    items: Array<UserType>,\r\n    totalCount: number,\r\n    error: string | null\r\n}\r\n\r\nexport type ResponseType<D = {}, RC = ResultsCodesEnum> = {\r\n    data: D,\r\n    messages: Array<string>,\r\n    resultCode: RC,\r\n    totalCount?: number\r\n}\r\n\r\nexport enum ResultsCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\nexport enum ResultsCodeForCaptcha {\r\n    captcha = 10\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport classes from './nav.module.scss';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nconst NavBar = () => {\r\n    return (\r\n        <nav className={classes.navbar}>\r\n            <div className={classes.items}>\r\n                <div className={classes.item}><NavLink activeClassName={classes.active} to='/profile'>Profile</NavLink></div>\r\n                <div className={classes.item}><NavLink activeClassName={classes.active} to='/dialogs'>Messages</NavLink></div>\r\n                <div className={classes.item}><NavLink activeClassName={classes.active} to='/users'>Users</NavLink></div>\r\n                <div className={classes.item}><NavLink activeClassName={classes.active} to='/news'>News</NavLink></div>\r\n                <div className={classes.item}><NavLink activeClassName={classes.active} to='/music'>Music</NavLink></div>\r\n                <div className={classes.item}><NavLink activeClassName={classes.active} to='/settings'>Settings</NavLink></div>\r\n            </div>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default connect()(NavBar);","import {axiosInstance, ResponseType, ResultsCodeForCaptcha, ResultsCodesEnum} from \"./api\";\r\n\r\n\r\ntype MeResponseDataType = {\r\n    id: number,\r\n    email: string,\r\n    login: string,\r\n}\r\n\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\n\r\n\r\nexport const authApi = {\r\n    me: () => {\r\n        return axiosInstance.get<ResponseType<MeResponseDataType>>(`/auth/me`).then(res => res.data);\r\n    },\r\n    login: (email: string, password: string, rememberMe = false, captcha: null | string = null) => {\r\n        return axiosInstance.post<ResponseType<LoginResponseDataType, ResultsCodeForCaptcha | ResultsCodesEnum>>(`/auth/login`, {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n            captcha\r\n        });\r\n    },\r\n    logout: () => {\r\n        return axiosInstance.delete('/auth/login');\r\n    },\r\n\r\n};","import {axiosInstance} from \"./api\";\r\n\r\ntype getCaptchaResponseType = {\r\n    url: string\r\n}\r\n\r\nexport const securityApi = {\r\n    getCaptcha: () => {\r\n        return axiosInstance.get<getCaptchaResponseType>('/security/get-captcha-url').then(res => res.data);\r\n    }\r\n};","import {ResultsCodesEnum, ResultsCodeForCaptcha} from \"../api/api\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\nimport {CommonThunkType, InferActionsTypes} from \"./reduxStore\";\r\nimport {authApi} from \"../api/authApi\";\r\nimport {securityApi} from \"../api/securityApi\";\r\n\r\nconst initialState = {\r\n    isLoading: false,\r\n    userId: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captcha: null as string | null\r\n};\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"AUTH/SET_USER_DATA\":\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n                isAuth: true\r\n            };\r\n        case \"AUTH/DELETE_USER_DATA\": {\r\n            return {\r\n                ...state,\r\n                userId: null,\r\n                email: null,\r\n                login: null,\r\n                isAuth: false,\r\n            };\r\n        }\r\n        case \"AUTH/SET_CAPTCHA_URL\": {\r\n            return {\r\n                ...state,\r\n                captcha: action.url\r\n            };\r\n        }\r\n        case \"AUTH/CAPTCHA_SUCCESS\": {\r\n            return {\r\n                ...state,\r\n                captcha: null\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n        }\r\n};\r\n\r\nconst actions = {\r\n    setAuthUserData :(userId: number, email: string, login: string) => ({type: 'AUTH/SET_USER_DATA', data: {userId, email, login}} as const),\r\n    deleteAuthUserData:  () => ({type: 'AUTH/DELETE_USER_DATA'} as const),\r\n    setCaptchaUrl : (url: string) => ({type: 'AUTH/SET_CAPTCHA_URL', url} as const),\r\n    captchaSuccess : () => ({type: 'AUTH/CAPTCHA_SUCCESS'} as const)\r\n};\r\n\r\nexport const getAuth = (): ThunkType => async (dispatch) => {\r\n    let meData = await authApi.me();\r\n    if (meData.resultCode === ResultsCodesEnum.Success) {\r\n        const {id, login, email} = meData.data;\r\n        dispatch(actions.setAuthUserData(id, email, login));\r\n    }\r\n};\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType =>\r\n    async (dispatch) => {\r\n        let res = await authApi.login(email, password, rememberMe, captcha);\r\n        if (res.data.resultCode === ResultsCodesEnum.Success) {\r\n            dispatch(getAuth());\r\n            dispatch(actions.captchaSuccess());\r\n        } else {\r\n            let message = res.data.messages.length !== 0 ? res.data.messages[0] : \"some error\";\r\n            let action = stopSubmit(\"login\", {_error: message});\r\n            if (res.data.resultCode === ResultsCodeForCaptcha.captcha) {\r\n                dispatch(action);\r\n                dispatch(getCaptchaUrl());\r\n            }\r\n            dispatch(action);\r\n        }\r\n    };\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    let res = await authApi.logout();\r\n    if (res.data.resultCode === ResultsCodesEnum.Success) {\r\n        dispatch(actions.deleteAuthUserData());\r\n    }\r\n};\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    let data = await securityApi.getCaptcha();\r\n    if (data.url) {\r\n        dispatch(actions.setCaptchaUrl(data.url));\r\n    }\r\n};\r\n\r\nexport default authReducer;\r\n// Type\r\nexport type InitialStateType = typeof initialState\r\ntype ThunkType = CommonThunkType<ActionsType | FormAction>\r\ntype ActionsType = InferActionsTypes<typeof actions>;\r\n","import {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport React from \"react\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\ntype MapPropsType = {\r\n    isAuth: boolean,\r\n}\r\ntype MapDispatchType = {}\r\nexport function withAuthRedirect<WCP>(Component: React.ComponentType<WCP>){\r\n\r\n    const WithRedirect: React.FC<MapPropsType & MapDispatchType> = (props) => {\r\n        let {isAuth, ...restProps} = props;\r\n        if (!isAuth) return <Redirect to={'/login'}/>;\r\n        return (\r\n            <Component {...restProps as unknown as WCP}/>\r\n        );\r\n    };\r\n    const mapStateToProps = (state: AppStateType): MapPropsType => {\r\n        return {\r\n            isAuth: state.auth.isAuth\r\n        };\r\n    };\r\n    return connect<MapPropsType, MapDispatchType, WCP, AppStateType>(mapStateToProps)(WithRedirect);\r\n}","import {withAuthRedirect} from \"./redirectHOC\";\r\n\r\nexport default withAuthRedirect;","export const requiredField = value => {\r\n    if (value) return undefined;\r\n    return 'Field is required';\r\n};\r\n\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n};","import Settings from \"./settings\";\r\nexport default Settings;","import React from \"react\";\r\nimport {logout} from \"../../redux/authReducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport withAuthRedirect from \"../redirectHOC\";\r\n\r\nconst Settings = () => {\r\n    const dispatch = useDispatch();\r\n    const onLogout = () => {\r\n        dispatch(logout());\r\n    };\r\n    return (\r\n            <div>\r\n                <span onClick={onLogout}>Logout</span>\r\n            </div>\r\n    );\r\n};\r\nexport default withAuthRedirect(Settings);","export default __webpack_public_path__ + \"static/media/avatar.00971467.png\";","import {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport classes from './dialog.module.scss';\r\nimport userPhoto from '../../../assets/img/avatar.png';\r\ntype PropTypes = {\r\n    person: string,\r\n    id: number\r\n}\r\n\r\nconst Dialog: React.FC<PropTypes> = ({person, id}) => {\r\n    let path = `/dialogs/${id}`;\r\n\r\n    return (\r\n        <NavLink to={path} activeClassName={classes.active} className={classes.dialog}>\r\n            <div className={classes.photo}><img src={userPhoto} alt=\"\"/></div>\r\n            <div className={classes.name}>{person}</div>\r\n        </NavLink>\r\n    );\r\n};\r\n\r\n\r\nexport default Dialog;","import Message from \"./message\";\r\nexport default Message;","import classes from \"./message.module.scss\";\nimport React from \"react\";\nimport userPhoto from '../../../assets/img/avatar.png';\ntype PropTypes = {label: string}\n\nconst Message: React.FC<PropTypes> = ({label}) => {\n    return (\n    <div className={classes.message}>\n        <div className={classes.photo}><img src={userPhoto} alt=\"photo\"/></div>\n        <div className={classes.text}>{label}</div>\n    </div>\n    );\n};\nexport default Message;","import {InferActionsTypes} from \"./reduxStore\";\r\n\r\ntype MessagesType = {\r\n    id: number,\r\n    message: string\r\n}\r\ntype DialogType = {\r\n    id: number,\r\n    person: string\r\n}\r\nconst initialState = {\r\n        messages: [\r\n            {id: 1, message:'Ut enim ad minim veniam, quis nostrud exercitation  laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium.'},\r\n            {id: 2, message:'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.'}\r\n        ] as Array<MessagesType>,\r\n        dialogs: [\r\n            {person: 'Andrey', id: 1},\r\n            {person: 'Sergey', id: 2}\r\n        ] as Array<DialogType>\r\n};\r\n\r\nexport const dialogsReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    let newMessage;\r\n    switch (action.type) {\r\n        case  'DIALOGS/ADD_MESSAGE':\r\n            newMessage = {\r\n                id: 5,\r\n                message: action.message\r\n            };\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, newMessage]\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    addNewMessage : (message: string) => ({type: 'DIALOGS/ADD_MESSAGE', message} as const)\r\n};\r\nexport default dialogsReducer;\r\n\r\n// Type\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>","import React from \"react\";\r\nimport classes from './formControls.module.scss';\r\nimport {WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl:React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError =  touched && error;\r\n    const errorMessage = hasError ? <span>{error}</span>: null;\r\n\r\n    return (\r\n        <div className={!hasError ? classes.formControl : classes.formControl + ' ' + classes.error}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {errorMessage}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...restProps} {...input}/></FormControl>;\r\n};\r\n\r\nexport const Input: React.FC<WrappedFieldProps>  = (props) => {\r\n    const {input, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>;\r\n};\r\n","import DialogsForm from \"./dialogsForm\";\r\n\r\nexport default DialogsForm;","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../common/formsControl/formControls\";\r\nimport {requiredField} from \"../../../utils/validators\";\r\nimport {DialogsFormValuesType} from \"../dialogs\";\r\n\r\n\r\ntype PropTypes = {}\r\nconst DialogsForm: React.FC<InjectedFormProps<DialogsFormValuesType, PropTypes> & PropTypes> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field\r\n                component={Textarea}\r\n                name={'newMessageText'}\r\n                validate={[requiredField]}/>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\n\r\nexport default reduxForm<DialogsFormValuesType>({form: 'addMessageForm'})(DialogsForm);\r\n","import Dialogs from \"./dialogs\";\r\nexport default Dialogs;","import React, {ComponentType} from 'react';\r\nimport classes from './dialogs.module.scss';\r\nimport Dialog from './dialogItem/dialog';\r\nimport Message from './message';\r\nimport {connect} from \"react-redux\";\r\nimport {actions, InitialStateType} from \"../../redux/dialogsReducer\";\r\nimport {withAuthRedirect} from \"../redirectHOC/redirectHOC\";\r\nimport {compose} from \"redux\";\r\nimport DialogsFormRedux from \"./dialogsForm\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\n\r\ntype PropTypes = MapStateToPropsType & MapDispatchToPropsType\r\ntype MapStateToPropsType = {\r\n    dialogsData: InitialStateType[\"dialogs\"],\r\n    messagesData:  InitialStateType[\"messages\"],\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addNewMessage: (value: string) => void\r\n}\r\nexport type DialogsFormValuesType = {\r\n    newMessageText: string,\r\n}\r\n\r\nconst Dialogs:React.FC<PropTypes> = ({dialogsData, messagesData, addNewMessage}) => {\r\n\r\n    const addMessage = (value: DialogsFormValuesType) => {\r\n        const message = value.newMessageText;\r\n        addNewMessage(message);\r\n    };\r\n\r\n    const dialogs = dialogsData.map(({id, person}) => {\r\n        return <Dialog key={id} id={id} person={person}/>;\r\n    });\r\n\r\n    const messages = messagesData.map(({message,id}) => {\r\n        return <Message key={id} label={message}/>;\r\n    });\r\n\r\n    return (\r\n            <div className={classes.dialogs}>\r\n                <div className={classes.dialogsItems}>\r\n                    {dialogs}\r\n                </div>\r\n                <div className={classes.messages}>\r\n                    <div>{messages}</div>\r\n                    <DialogsFormRedux onSubmit={addMessage}/>\r\n                </div>\r\n            </div>\r\n    );\r\n};\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsData: state.dialogsPage.dialogs,\r\n        messagesData: state.dialogsPage.messages\r\n    };\r\n};\r\n\r\nexport default compose<ComponentType>(withAuthRedirect, connect(mapStateToProps, {...actions})) (Dialogs);\r\n\r\n","import React from \"react\";\r\nimport classes from './spinner.module.scss';\r\nconst Spinner = () => {\r\n    return (\r\n        <div className={classes.preloader}>\r\n            <div className={classes.spinner}></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Spinner;","import Spinner from \"./spinner\";\r\nexport default Spinner;","import React, {useEffect, useState} from \"react\";\r\nimport {ChangeEvent} from \"react\";\r\n\r\ntype PropTypes = {\r\n    status: string,\r\n    updateStatus: (value: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropTypes> = ({status, updateStatus}) => {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [value, setValue] = useState(status);\r\n\r\n    useEffect(() => {\r\n        setValue(status);\r\n    }, [status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    };\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        updateStatus(value);\r\n    };\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(e.target.value);\r\n    };\r\n\r\n    const content = editMode\r\n        ? <input\r\n            onBlur={deactivateEditMode}\r\n            autoFocus\r\n            type=\"text\"\r\n            onChange={onStatusChange}\r\n            value={value}/>\r\n        : <span onDoubleClick={activateEditMode}>{status || '...'}</span>;\r\n    return (\r\n        <>\r\n            <div>\r\n                {content}\r\n            </div>\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;","// import classes from \"./profileInfo/profileInfo.module.scss\";\r\nimport React from \"react\";\r\nimport {Field, Form, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input, Textarea} from \"../../common/formsControl/formControls\";\r\nimport {requiredField} from \"../../../utils/validators\";\r\nimport classes from \"../../common/formsControl/formControls.module.scss\";\r\nimport {ProfileType} from \"../../../types/types\";\r\n\r\ntype PropTypes = {\r\n    profile: ProfileType\r\n}\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropTypes> & PropTypes> = ({handleSubmit, profile, error}) => {\r\n\r\n    const summaryError = error ? <div className={classes.summaryError}>{error}</div> : null;\r\n\r\n    const contactsInput = Object.keys(profile.contacts).map((key) => {\r\n        return <div key={key}>{key} <Field name={`contacts.${key}`} component={Input}/></div>;\r\n    });\r\n\r\n\r\n    return (\r\n        <>\r\n            <Form onSubmit={handleSubmit}>\r\n                <div>FullName: <Field name={'fullName'} placeholder={\"Your full name\"} validate={[requiredField]}\r\n                                      component={Input}/></div>\r\n                <div>About me: <Field name={'aboutMe'} placeholder={\"About me\"} component={Input}/></div>\r\n                <div>looking for a job: <Field name={'lookingForAJob'} component={Input} type={'checkbox'}/></div>\r\n                <div>My professional skills: <Field name={'lookingForAJobDescription'}\r\n                                                    placeholder={'Your professional skills ?'} component={Textarea}/>\r\n                </div>\r\n                {contactsInput}\r\n                <div>{summaryError}</div>\r\n                <button>Save</button>\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nconst ProfileDataReduxForm = reduxForm<ProfileType, PropTypes>({form: 'edit-profile'})(ProfileDataForm);\r\nexport default ProfileDataReduxForm;","import classes from \"./profileInfo.module.scss\";\r\nimport React, {ChangeEvent, useState} from \"react\";\r\n\r\nimport Spinner from \"../../common/spinner\";\r\nimport userPhoto from '../../../assets/img/avatar.png';\r\nimport ProfileStatusWithHooks from \"../profileStatus/profileStatusWithHooks\";\r\nimport ProfileDataForm from \"./profileDataForm\";\r\nimport {ContactsType, ProfileType} from \"../../../types/types\";\r\n\r\n\r\ntype ProfileInfoPropTypes = {\r\n    profile: ProfileType | null,\r\n    status: string,\r\n    updateStatus: () => void,\r\n    isOwner: boolean,\r\n    savePhoto: (photo: File) => void,\r\n    saveProfile: (formData: ProfileType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo:React.FC<ProfileInfoPropTypes> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n    const [editMode, changeEditMode] = useState(false);\r\n\r\n    const toggleEditMode = () => {\r\n        if (!editMode) {\r\n            changeEditMode(true);\r\n        } else {\r\n            changeEditMode(false);\r\n        }\r\n    };\r\n\r\n    const onPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        e.preventDefault();\r\n        if (e.target.files?.length === 1) {\r\n            const photo = e.target.files[0];\r\n            savePhoto(photo);\r\n        }\r\n    };\r\n\r\n\r\n    const onFormSubmit = (formData: ProfileType) => {\r\n        saveProfile(formData).then(\r\n            () => {toggleEditMode();}\r\n        );\r\n    };\r\n\r\n    if (!profile) {\r\n        return <Spinner/>;\r\n    }\r\n\r\n    const {photos} = profile;\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={classes.description}>\r\n                <div>\r\n                    <img className={classes.profilePhoto} alt={'user photo'} src={photos.large || userPhoto}/>\r\n                    {isOwner && <input onChange={onPhotoSelected} type=\"file\"/>}\r\n                    <b>status: </b><ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n                </div>\r\n                {editMode\r\n                    ? <ProfileDataForm initialValues={profile}\r\n                                       profile={profile}\r\n                                       onSubmit={onFormSubmit}/>\r\n                    : <ProfileData isOwner={isOwner}\r\n                                   profile={profile}\r\n                                   toggleEditMode={toggleEditMode}/>}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\ntype ContactPropTypes = {\r\n    contactTitle: string,\r\n    contactValue: any\r\n}\r\n\r\nconst Contact: React.FC<ContactPropTypes> = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <div>{contactTitle} : {contactValue}</div>\r\n    );\r\n};\r\n\r\ntype ProfileDataPropTypes = {\r\n    profile: ProfileType,\r\n    toggleEditMode: () => void,\r\n    isOwner: any\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataPropTypes> = ({profile, toggleEditMode, isOwner}) => {\r\n    const {fullName, aboutMe, lookingForAJob, lookingForAJobDescription, contacts} = profile;\r\n    return (\r\n        <div className={classes.descr}>\r\n            data\r\n            {isOwner ? <button onClick={toggleEditMode}>edit</button> : null}\r\n            <div>FullName: {fullName}</div>\r\n            <div>About me: {aboutMe}</div>\r\n            <div>{lookingForAJob ? \"looking for a job\" : \"lol job?\"}</div>\r\n            <div>Skills: {lookingForAJob ? lookingForAJobDescription : null}</div>\r\n            <div>Contacts: {\r\n                Object.keys(contacts)\r\n                    .map((title) => {\r\n                return <Contact key={title} contactTitle={title} contactValue={contacts[title as keyof ContactsType]}/>;\r\n            })}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileInfo;","import Post from './post';\r\nexport default Post;","import React from 'react';\r\nimport classes from './post.module.scss';\r\n\r\ntype PostProps = {\r\n    img: string,\r\n    text: string,\r\n    likesCount: number\r\n}\r\n\r\nconst Post:React.FC<PostProps> = ({img, text, likesCount}) => {\r\n    return (\r\n        <div className={classes.item}>\r\n            <img src={img} alt='avatar'/>\r\n            {text}\r\n            <div>\r\n                <span>like {likesCount}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Post;","import {PhotosType, ProfileType} from \"../types/types\";\r\nimport {axiosInstance, ResponseType} from \"./api\";\r\n\r\ntype savePhotoResDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileApi = {\r\n    getProfile: (id: number) => {\r\n        return axiosInstance.get<ProfileType>(`/profile/${id}`).then(res => res.data);\r\n    },\r\n    getStatus: (id: number) => {\r\n        return axiosInstance.get<string>(`/profile/status/${id}`).then(res => res.data);\r\n    },\r\n    updateStatus: (status: string) => {\r\n        return axiosInstance.put<ResponseType>(`/profile/status`, {status: status});\r\n    },\r\n    uploadUserPhoto: (photo: File) => {\r\n        const formData = new FormData;\r\n        formData.append(\"image\", photo);\r\n        return axiosInstance.put<ResponseType<savePhotoResDataType>>('/profile/photo', formData, {\r\n            headers: {\r\n                'Content-type': 'multipart/form-data'\r\n            }\r\n        }).then(res => res.data);\r\n    },\r\n    uploadUserData: (profile: ProfileType) => {\r\n        return axiosInstance.put<ResponseType>('/profile', profile).then(res => res.data);\r\n    }\r\n};","import {ResultsCodesEnum} from \"../api/api\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\nimport {PhotosType, PostType, ProfileType} from \"../types/types\";\r\nimport {CommonThunkType, InferActionsTypes} from \"./reduxStore\";\r\nimport {profileApi} from \"../api/profileApi\";\r\n\r\nconst initialState = {\r\n    posts: [\r\n        {\r\n            img: 'https://cdn4.iconfinder.com/data/icons/small-n-flat/24/user-alt-512.png',\r\n            text: 'wow',\r\n            likesCount: 2,\r\n            id: 1\r\n        },\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: ''\r\n};\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    let newPost;\r\n    switch (action.type) {\r\n        case \"PROFILE/ADD-POST\":\r\n            newPost = {\r\n                img: 'https://cdn4.iconfinder.com/data/icons/small-n-flat/24/user-alt-512.png',\r\n                id: 2,\r\n                text: action.postText,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost]\r\n            };\r\n        case \"PROFILE/SET_PROFILE\":\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            };\r\n        case \"PROFILE/SET_STATUS\":\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n        case \"PROFILE/DELETE_POST\":\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(({id}) => id !== action.id)\r\n            };\r\n        case \"PROFILE/SAVE_PHOTO_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photos} as ProfileType\r\n            };\r\n        case \"PROFILE/SAVE_PROFILE_DATA_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, ...action.profile}\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    addNewPost : (postText: string) => ({type: 'PROFILE/ADD-POST', postText} as const),\r\n    setProfile : (profile: ProfileType) => ({type: 'PROFILE/SET_PROFILE', profile} as const),\r\n    setStatus : (status: string) => ({type: 'PROFILE/SET_STATUS', status} as const),\r\n    deletePost : (id: number) => ({type: 'PROFILE/DELETE_POST', id} as const),\r\n    savePhotoSuccess : (photos: PhotosType)=> ({\r\n        type: 'PROFILE/SAVE_PHOTO_SUCCESS',\r\n        photos\r\n    } as const),\r\n    saveProfileDataSuccess : (profile: ProfileType) => ({\r\n        type: 'PROFILE/SAVE_PROFILE_DATA_SUCCESS',\r\n        profile\r\n    } as const)\r\n};\r\n\r\nexport const getProfile = (id: number ): ThunkType => async (dispatch) => {\r\n    let profileData = await profileApi.getProfile(id);\r\n    dispatch(actions.setProfile(profileData));\r\n};\r\n\r\nexport const getStatus = (id: number): ThunkType => async (dispatch) => {\r\n    let status = await profileApi.getStatus(id);\r\n    dispatch(actions.setStatus(status));\r\n};\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    let res = await profileApi.updateStatus(status);\r\n    if (res.data.resultCode === ResultsCodesEnum.Success) {\r\n        dispatch(actions.setStatus(status));\r\n    }\r\n};\r\n\r\nexport const savePhoto = (photo: any): ThunkType => async (dispatch) => {\r\n    let data = await profileApi.uploadUserPhoto(photo);\r\n    if (data.resultCode === ResultsCodesEnum.Success) {\r\n        dispatch(actions.savePhotoSuccess(data.data.photos));\r\n    }\r\n};\r\n\r\nexport const saveProfileData = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    let data = await profileApi.uploadUserData(profile);\r\n    const userId = getState().auth.userId;\r\n    if (data.resultCode === ResultsCodesEnum.Success) {\r\n        if (userId != null){\r\n            dispatch(getProfile(userId));\r\n        }else {\r\n            throw new Error(\"User id can`t be null\");\r\n        }\r\n    } else {\r\n        let message = data.messages.length !== 0 ? data.messages[0] : \"some error\";\r\n        let action = stopSubmit(\"edit-profile\", {_error: message});\r\n        dispatch(action);\r\n        return Promise.reject(data.messages[0]);\r\n    }\r\n};\r\n\r\nexport default profileReducer;\r\n\r\n// Type\r\ntype ThunkType = CommonThunkType<ActionsType | FormAction>\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>;","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, requiredField} from \"../../../../utils/validators\";\r\nimport {Textarea} from \"../../../common/formsControl/formControls\";\r\nimport {MyPostsFormValuesType} from \"../myPosts\";\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\ntype PropTypes = {}\r\n\r\nconst MyPostForm:React.FC<InjectedFormProps<MyPostsFormValuesType, PropTypes> & PropTypes> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field placeholder={'Enter your post text'} validate={[requiredField, maxLength10]} name={\"postText\"} component={Textarea}/>\r\n            <button>Add post</button>\r\n        </form>);\r\n};\r\n\r\nexport default reduxForm<MyPostsFormValuesType>({form: 'postForm'})(MyPostForm);\r\n","import MyPostForm from \"./myPostForm\";\r\n\r\nexport default MyPostForm;","import React, {memo} from 'react';\r\nimport Post from './post';\r\nimport classes from './myPosts.module.scss';\r\nimport {actions} from \"../../../redux/profileReducer\";\r\nimport {connect} from \"react-redux\";\r\nimport MyPostForm from \"./myPostForm\";\r\nimport {InitialStateType} from \"../../../redux/profileReducer\";\r\nimport {AppStateType} from \"../../../redux/reduxStore\";\r\n\r\n\r\ntype PropTypes= {\r\n    postData: InitialStateType[\"posts\"],\r\n    addNewPost: (value: string) => void\r\n}\r\nexport type MyPostsFormValuesType = {\r\n    postText: string\r\n}\r\n\r\n// eslint-disable-next-line react/display-name\r\nconst MyPosts: React.FC<PropTypes> = memo(props => {\r\n    let {postData, addNewPost} = props;\r\n\r\n    const posts = postData.map(({img, text, id, likesCount}) => {\r\n        return <Post key={id} img={img} text={text} likesCount={likesCount}/>;\r\n    });\r\n\r\n    const addPost = (value: MyPostsFormValuesType) => {\r\n        const post = value.postText;\r\n        addNewPost(post);\r\n    };\r\n    return (\r\n        <div className={classes.postBlock}>\r\n            <h3>My post</h3>\r\n            <div>New post</div>\r\n            <MyPostForm onSubmit={addPost}/>\r\n            <div>\r\n                {posts}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        postData: state.profilePage.posts,\r\n    };\r\n};\r\n\r\nconst {addNewPost} = actions;\r\nexport default connect(mapStateToProps, {addNewPost})(MyPosts);","import React from 'react';\r\nimport classes from './profile.module.scss';\r\nimport ProfileInfo from \"./profileInfo/profileInfo\";\r\nimport MyPosts from \"./myPosts/myPosts\";\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\ntype PropTypes = {\r\n    profile: ProfileType | null,\r\n    status: string,\r\n    updateStatus: () => void,\r\n    isOwner: boolean,\r\n    savePhoto: (file: File) => void,\r\n    saveProfile: (formData: ProfileType) => Promise<any>\r\n}\r\n\r\nconst Profile: React.FC<PropTypes> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n\r\n    return (\r\n        <div className={classes.profile}>\r\n            <ProfileInfo saveProfile={saveProfile} savePhoto={savePhoto} isOwner={isOwner} status={status} profile={profile} updateStatus={updateStatus}/>\r\n            <MyPosts/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;","import Profile from \"./profile\";\r\nimport React, {Component} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../redirectHOC/redirectHOC\";\r\nimport {compose} from \"redux\";\r\nimport {getProfile, getStatus, savePhoto, saveProfileData, updateStatus} from \"../../redux/profileReducer\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\n\r\ntype PathParamsType = {\r\n    id: string\r\n}\r\ntype MapDispatchType = {\r\n    savePhoto: (photo: any) => void,\r\n    getProfile: (id: number ) => void,\r\n    getStatus: (id: number ) => void,\r\n    saveProfileData: () => Promise<void>,\r\n    updateStatus: () => void,\r\n}\r\ntype MapStateProps = ReturnType<typeof mapStateToProps>\r\n\r\ntype PropTypes = MapStateProps & MapDispatchType & RouteComponentProps<PathParamsType>\r\n\r\nclass ProfileAPI extends Component<PropTypes> {\r\n\r\n    savePhoto = (photo: any) => {\r\n        const {savePhoto} = this.props;\r\n        savePhoto(photo);\r\n    };\r\n\r\n    refreshProfileData = () => {\r\n        const {getProfile, match, getStatus, authUserId} = this.props;\r\n        let id: number | null = +match.params.id;\r\n        if (!id) {\r\n            id = authUserId;\r\n            if (!id) {\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n        getProfile(id as number);\r\n        getStatus(id as number);\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.refreshProfileData();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropTypes) {\r\n        if (prevProps.match.params.id !== this.props.match.params.id) {\r\n            this.refreshProfileData();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {profile, status, updateStatus, saveProfileData} = this.props;\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.id}\r\n                     profile={profile}\r\n                     status={status}\r\n                     savePhoto={(photo) => this.savePhoto(photo)}\r\n                     updateStatus={updateStatus}\r\n                     saveProfile={saveProfileData}/>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authUserId: state.auth.userId,\r\n    };\r\n};\r\n\r\nexport default compose<React.ComponentType>(\r\n    withAuthRedirect,\r\n    withRouter, connect(mapStateToProps, {getProfile, getStatus, updateStatus, savePhoto, saveProfileData}))(ProfileAPI);\r\n\r\n","export default __webpack_public_path__ + \"static/media/Plus-Icon-PNG.ac4270cf.png\";","export default __webpack_public_path__ + \"static/media/check.c4294ef8.png\";","import User from \"./user\";\r\nexport default User;","/* eslint-disable */\r\nimport React from \"react\";\r\nimport classes from './user.module.scss';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nimport plus from './Plus-Icon-PNG.png';\r\nimport check from './check.png';\r\n\r\ntype PropsType = {\r\n    fullName: string,\r\n    onFollowClick: () => void,\r\n    followStatus: boolean,\r\n    photoUrl: string,\r\n    status: string,\r\n    id: number,\r\n    followingInProgress: Array<number>\r\n}\r\n\r\nconst User:React.FC<PropsType> = ({fullName, onFollowClick, followStatus,\r\n                                       photoUrl, status,\r\n                                      id: userId, followingInProgress}) => {\r\n    return (\r\n        <div className={classes.user}>\r\n            <div className={classes.user}>\r\n                <div>\r\n                    <NavLink to={`/profile/${userId}`}>\r\n                        <img src={photoUrl} alt='user photo' className={classes.user_photo}/>\r\n                    </NavLink>\r\n                </div>\r\n                <div>\r\n                    <div className={classes.user_name}>{fullName}</div><div className={classes.user_status}>{status}</div>\r\n                </div>\r\n                <div>\r\n                    <button className={classes.subscribe}\r\n                            disabled={followingInProgress.some(id => id === userId)}\r\n                            onClick={onFollowClick}>\r\n                            <img src={!followStatus ? plus : check} alt={'follow'}/>\r\n                            </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default User;","import Paginator from \"./paginator\";\r\n\r\nexport default Paginator;","import React, {useState} from 'react';\r\nimport styles from \"./paginator.module.scss\";\r\nimport cn from \"classnames\";\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number,\r\n    pageSize: number,\r\n    currentPage: number,\r\n    onPageChanged: (pageNumber: number) => void,\r\n    portionSize?: number\r\n}\r\n\r\nlet Paginator: React.FC<PropsType> = ({totalItemsCount, pageSize, currentPage\r\n                                                    , onPageChanged, portionSize = 10}) => {\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n\r\n    let pages: Array<number> = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n\r\n    return <div className={styles.paginator}>\r\n        {portionNumber > 1 &&\r\n        <button onClick={() => {\r\n            setPortionNumber(portionNumber - 1);\r\n        }}>PREV</button>}\r\n\r\n        {pages\r\n            .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n            .map((p) => {\r\n                return <span className={cn({\r\n                    [styles.selectedPage]: currentPage === p\r\n                }, styles.pageNumber)}\r\n                             key={p}\r\n                             onClick={() => {\r\n                                 onPageChanged(p);\r\n                             }}>{p}</span>;\r\n            })}\r\n        {portionCount > portionNumber &&\r\n        <button onClick={() => {\r\n            setPortionNumber(portionNumber + 1);\r\n        }}>NEXT</button>}\r\n\r\n\r\n    </div>;\r\n};\r\n\r\nexport default Paginator;","import {axiosInstance, GetItemsType, ResponseType} from \"./api\";\r\n\r\nexport const usersApi = {\r\n    getUsers: async (currentPage = 1, pageSize = 10, term: string = '', friend: null | boolean = null) => {\r\n        const url =`/users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? '': `&friend=${friend}`);\r\n        return axiosInstance.get<GetItemsType>(url).then(res => res.data);\r\n    },\r\n    followUser: (id: number) => {\r\n        return axiosInstance.post<ResponseType>(`/follow/${id}`).then(res => res.data);\r\n    },\r\n    unFollowUser: (id: number) => {\r\n        return axiosInstance.delete(`/follow/${id}`).then(res => res.data) as Promise<ResponseType>;\r\n    }\r\n};","import {UserType} from \"../types/types\";\r\nimport {CommonThunkType, InferActionsTypes} from \"./reduxStore\";\r\nimport {usersApi} from \"../api/usersApi\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ResultsCodesEnum} from \"../api/api\";\r\n\r\nconst initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 100,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isLoading: false,\r\n    followingInProgress: [] as Array<number>, //array of users ID\r\n    filter: {\r\n        term: '',\r\n        friend: null as null | boolean,\r\n    }\r\n};\r\n\r\nconst usersReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"USERS/SET_USERS\":\r\n            return {\r\n                ...state,\r\n                users: [...action.users]\r\n            };\r\n        case \"USERS/TOGGLE_FOLLOW\":\r\n            return {\r\n                ...state,\r\n                users: state.users.map((user) => {\r\n                    if (user.id === action.id) {\r\n                        return {...user, followed: !user.followed};\r\n                    }\r\n                    return user;\r\n                })\r\n            };\r\n        case \"USERS/SET_TOTAL_USERS_COUNT\":\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.usersCount\r\n            };\r\n        case \"USERS/SET_CURRENT_PAGE\":\r\n            return {\r\n                ...state,\r\n                currentPage: action.pageNumber\r\n            };\r\n        case \"USERS/TOGGLE_LOADING\":\r\n            return {\r\n                ...state,\r\n                isLoading: !state.isLoading\r\n            };\r\n        case \"USERS/TOGGLE_FOLLOWING_PROGRESS\":\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.id]\r\n                    : state.followingInProgress.filter(id => id !== action.id)\r\n            };\r\n        case \"USERS/SET_FILTER\":\r\n            return {\r\n                ...state,\r\n                filter: action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    toggleLoadingStatus : () => ({type: 'USERS/TOGGLE_LOADING'} as const),\r\n    setTotalUsersCount : (usersCount: number) => ({\r\n        type: 'USERS/SET_TOTAL_USERS_COUNT',\r\n        usersCount\r\n    } as const),\r\n    setCurrentPage : (pageNumber: number) => ({type: 'USERS/SET_CURRENT_PAGE', pageNumber} as const),\r\n    setUsers : (users: Array<UserType>) => ({type: 'USERS/SET_USERS', users} as const),\r\n    toggleFollowingProgress : (id: number, isFetching: boolean) => ({\r\n        type: 'USERS/TOGGLE_FOLLOWING_PROGRESS',\r\n        id,\r\n        isFetching\r\n    } as const),\r\n    follow: (id: number) =>  ({type: 'USERS/TOGGLE_FOLLOW', id} as const),\r\n    setFilter: (payload: FilterFormType) => ({type: 'USERS/SET_FILTER', payload} as const),\r\n};\r\n\r\nexport const requestUsers = (currentPage: number, pageSize: number): ThunkType =>\r\n    async (dispatch, getState) => {\r\n        dispatch(actions.toggleLoadingStatus());\r\n        let res;\r\n        let filter = getState().usersPage.filter;\r\n        res = await usersApi.getUsers(currentPage, pageSize, filter.term, filter.friend);\r\n        dispatch(actions.toggleLoadingStatus());\r\n        dispatch(actions.setTotalUsersCount(res.totalCount));\r\n        dispatch(actions.setUsers(res.items));\r\n    };\r\n\r\nconst _followUnfollowFlow = async (dispatch: Dispatch<ActionsType>, id: number, action: (id: number) => ActionsType, apiMethod: any) => {\r\n    dispatch(actions.toggleFollowingProgress(id, true));\r\n    let data = await apiMethod(id);\r\n    if (data.resultCode === ResultsCodesEnum.Success) {\r\n        dispatch(action(id));\r\n        dispatch(actions.toggleFollowingProgress(id, false));\r\n    }\r\n};\r\n\r\nexport const followUser = (id: number): ThunkType => async (dispatch) => {\r\n    _followUnfollowFlow(dispatch, id, actions.follow, usersApi.followUser);\r\n};\r\n\r\nexport const unFollowUser = (id: number): ThunkType => async (dispatch) => {\r\n    _followUnfollowFlow(dispatch, id, actions.follow, usersApi.unFollowUser);\r\n};\r\n\r\n\r\nexport default usersReducer;\r\n\r\n//Type\r\nexport type FilterFormType = typeof initialState.filter\r\ntype ThunkType = CommonThunkType<ActionsType>\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>","import {AppStateType} from \"./reduxStore\";\r\n\r\nexport const getUsers = (state: AppStateType) => {\r\n    return state.usersPage.users;\r\n};\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize;\r\n};\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount;\r\n};\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage;\r\n};\r\nexport const getIsLoadingStatus = (state: AppStateType) => {\r\n    return state.usersPage.isLoading;\r\n};\r\nexport const getIsFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress;\r\n};\r\nexport const getFilter = (state: AppStateType) => {\r\n    return state.usersPage.filter;\r\n};\r\n","import React, {useEffect} from 'react';\nimport User from './user';\nimport userPhoto from '../../assets/img/avatar.png';\nimport Paginator from \"./paginator\";\nimport Spinner from \"../common/spinner\";\n// import UsersSearchForm from './usersSearchForm';\nimport {actions, requestUsers, followUser, unFollowUser} from \"../../redux/usersReducer\";\nimport classes from \"./users.module.scss\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    getCurrentPage,\n    getIsFollowingInProgress,\n    getIsLoadingStatus,\n    getPageSize,\n    getTotalUsersCount,\n    getUsers\n} from \"../../redux/userSelectors\";\n\nexport const Users: React.FC = () => {\n    const totalUsersCount = useSelector(getTotalUsersCount);\n    const currentPage = useSelector(getCurrentPage);\n    const pageSize = useSelector(getPageSize);\n    const usersData = useSelector(getUsers);\n    const isLoading = useSelector(getIsLoadingStatus);\n    const followingInProgress = useSelector(getIsFollowingInProgress);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(requestUsers(currentPage, pageSize));\n        return () => {\n            dispatch(actions.setFilter({friend: null, term: ''}));\n        };\n    }, []);\n\n    const onPageChanged = (pageNumber: number) => {\n        dispatch(actions.setCurrentPage(pageNumber));\n        dispatch(requestUsers(pageNumber, pageSize));\n    };\n\n\n    const followUserClick = (id: number) => {\n      dispatch(followUser(id));\n    };\n\n    const unFollowUserClick = (id: number) => {\n        dispatch(unFollowUser(id));\n    };\n\n    const users = usersData.map(({id, name, status, followed, photos}) => {\n        return <User\n            onFollowClick={() => followed ? unFollowUserClick(id) : followUserClick(id)}\n            key={id}\n            photoUrl={photos.small ? photos.small : userPhoto}\n            followStatus={followed}\n            fullName={name}\n            status={status}\n            id={id}\n            followingInProgress={followingInProgress}/>;\n    });\n\n    return (\n        <div className={classes.users}>\n            <div className={classes.usersContainer}>\n                {isLoading ? <Spinner/> : users}\n                {/*<UsersSearchForm onSubmit={onFilterChanged}/>*/}\n                <Paginator totalItemsCount={totalUsersCount}\n                           pageSize={pageSize}\n                           currentPage={currentPage}\n                           onPageChanged={onPageChanged}\n                />\n            </div>\n\n        </div>\n    );\n};\n\n\n","import React from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport {Users} from './Users';\r\nimport {getIsLoadingStatus,} from \"../../redux/userSelectors\";\r\nimport Spinner from \"../common/spinner/spinner\";\r\n\r\ntype UsersPagePropsType = {\r\n\r\n}\r\nexport const UsersPage: React.FC<UsersPagePropsType> = () => {\r\n    const isLoading = useSelector(getIsLoadingStatus);\r\n\r\n    return(\r\n        <>\r\n            {isLoading ? <Spinner/> : null}\r\n            <Users/>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\nimport {Form, Formik, Field} from \"formik\";\nimport {FilterFormType} from \"../../../redux/usersReducer\";\nimport classes from '../../header/header.module.scss';\ntype UsersSearchFormPropTypes ={\n    onSubmit: (data: FilterFormType) => void\n}\n\ntype FormType = {\n    term: string,\n    friend: \"true\" | \"false\" | \"null\"\n}\nconst UsersSearchForm: React.FC<UsersSearchFormPropTypes> = ({onSubmit}) => {\n    const onButtonClick = (values: FormType) => {\n        const filter = {\n            term: values.term,\n            friend: values.friend === 'null' ? null : values.friend !== 'false'\n        };\n        onSubmit(filter);\n    };\n    return (\n            <Formik\n                initialValues={{term: '', friend: \"null\"}}\n                onSubmit={onButtonClick}\n            >\n                {() => (\n                    <Form>\n                        <Field type=\"text\" name=\"term\" />\n                        <Field as=\"select\" name=\"friend\">\n                            <option value=\"null\">All</option>\n                            <option value=\"true\">Only followed</option>\n                            <option value=\"false\">Only unfollowed</option>\n                        </Field>\n                             <button className={classes.submit} type=\"submit\"/>\n                    </Form>\n                )}\n            </Formik>\n    );\n};\n\nexport default React.memo(UsersSearchForm);","import React from 'react';\nimport classes from './header.module.scss';\nimport UsersSearchFormik from \"../users/usersSearchForm/UsersSearchFormik\";\nimport {NavLink} from \"react-router-dom\";\nimport {FilterFormType} from \"../../redux/usersReducer\";\n\ntype PropTypes = {\n    isAuth: boolean,\n    login: string | null,\n    logout: () =>  void,\n    onSearchSubmit: (filter: FilterFormType) => void\n}\n\nconst Header: React.FC<PropTypes> = ({login, logout, isAuth, onSearchSubmit}) => {\n    return (\n        <header className={classes.header}>\n            {isAuth ? <HeaderContent onSearchSubmit={onSearchSubmit} login={login} logout={logout}/> : <h1 className={classes.logo_noAuth}>mashroom</h1>}\n        </header>\n    );\n};\n\ntype HeaderContentType = {\n    login: string | null,\n    logout: () => void,\n    onSearchSubmit: (filter: FilterFormType) => void\n}\n\nconst HeaderContent: React.FC<HeaderContentType> = ({onSearchSubmit}) => {\n    return (\n        <div className={'_container'}>\n            <div className={classes.content}>\n                <h1 className={classes.logo + ' ' +classes.logo_auth}>mashroom</h1>\n                <UsersSearchFormik onSubmit={onSearchSubmit}/>\n                <ul className={classes.menu}>\n                    <li><NavLink activeClassName={classes.active} to='/profile'>PROFILE</NavLink></li>\n                    <li><NavLink activeClassName={classes.active} to='/users'>USERS</NavLink></li>\n                    <li><NavLink activeClassName={classes.active} to='/dialogs'>MESSAGES</NavLink></li>\n                    <NavLink className={classes.settings} activeClassName={classes.active} to='/settings'/>\n                </ul>\n\n            </div>\n        </div>\n\n    );\n};\n\nexport default Header;","import React from 'react';\nimport Header from './header';\nimport {connect} from 'react-redux';\nimport {logout} from \"../../redux/authReducer\";\nimport {AppStateType} from \"../../redux/reduxStore\";\nimport {actions, FilterFormType, requestUsers} from \"../../redux/usersReducer\";\nimport {withRouter} from 'react-router-dom';\n\ntype MapDispatchType = {\n    logout: () => void,\n    setFilter: (filter: FilterFormType) => void,\n    requestUsers: (pageSize: number, currentPage: number) => void,\n}\ntype PathParamsType = {\n    location: any,\n    history: any\n}\n\ntype MapStateProps = ReturnType<typeof mapStateToProps>\ntype PropTypes = MapStateProps & MapDispatchType & PathParamsType\n\n\nconst HeaderAPI: React.FC<PropTypes> = (props) => {\n    const {isAuth, login, logout, pageSize, setFilter, requestUsers} = props;\n    const onFilterChanged = (filter: FilterFormType) => {\n        setFilter(filter);\n        if(props.location.pathname !== '/users') {\n            props.history.push('/users');\n        }\n        requestUsers(1, pageSize);\n    };\n    return (\n        <Header {...props} onSearchSubmit={onFilterChanged} logout={logout} isAuth={isAuth} login={login}/>\n    );\n};\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        isAuth: state.auth.isAuth,\n        login: state.auth.login,\n        pageSize: state.usersPage.pageSize\n    };\n};\n\nconst {setFilter} = actions;\n\n\nexport default withRouter(connect<MapStateProps, MapDispatchType, {}, AppStateType>(mapStateToProps, {logout, requestUsers, setFilter})(HeaderAPI));\n\n\n","import LoginForm from \"./loginForm\";\r\n\r\nexport default LoginForm;","import React from \"react\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Input} from \"../../common/formsControl/formControls\";\nimport {requiredField} from \"../../../utils/validators\";\nimport {LoginFormValuesType} from \"../login\";\nimport classes from './loginForm.module.scss';\n\ntype LoginFormOwnProps = {captcha: string | null}\n\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> = ({error, captcha, handleSubmit}) => {\n    const summaryError = error ? <div className={classes.summaryError}>{error}</div> : null;\n    return (\n        <form className={classes.form} onSubmit={handleSubmit}>\n            <div className={classes.input}>\n                <div>Email</div>\n                <Field validate={[requiredField]} type=\"text\" name={'email'} placeholder={'login'} component={Input}/>\n            </div>\n            <div className={classes.input}>\n                <div>Password</div>\n                <Field validate={[requiredField]} type=\"password\" name={'password'} placeholder={'password'}\n                        component={Input}/>\n            </div>\n            <div className={classes.checkbox}>\n                <Field type=\"checkbox\" name={'rememberMe'} component={Input}/>\n                <div className={classes.remember}>Remember me</div>\n            </div>\n            {summaryError}\n            {captcha ?\n                <div>\n                    <img src={captcha} alt=\"captcha\"/>\n                    <Field placeholder={\"captcha text\"} validate={[requiredField]} type=\"text\" name={\"captcha\"} component={Input}/>\n                </div>\n                : null}\n            <div className={classes.button}>\n                <button>Login</button>\n            </div>\n        </form>\n    );\n};\n\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginForm);\n\nexport default LoginReduxForm;","import {AppStateType} from \"./reduxStore\";\r\n\r\nexport const getCaptcha = (state: AppStateType) => {\r\n    return state.auth.captcha;\r\n};\r\nexport const getIsAuth = (state: AppStateType) => {\r\n    return state.auth.isAuth;\r\n};","import {Login} from \"./login\";\r\nexport default Login;","import React from \"react\";\r\nimport LoginReduxForm from \"./loginForm\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport classes from './login.module.scss';\r\nimport {getCaptcha, getIsAuth} from \"../../redux/authSelectors\";\r\nimport {login} from \"../../redux/authReducer\";\r\n\r\nexport type LoginFormValuesType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    captcha: string\r\n}\r\n\r\nexport const Login: React.FC = () => {\r\n\r\n    const captcha = useSelector(getCaptcha);\r\n    const isAuth = useSelector(getIsAuth);\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        const {email, password, rememberMe, captcha} = formData;\r\n        dispatch(login(email, password, rememberMe, captcha));\r\n    };\r\n\r\n\r\n    if (isAuth) return <Redirect to={'/profile'}/>;\r\n\r\n    return (\r\n        <div className={classes.login}>\r\n            <LoginReduxForm captcha={captcha} onSubmit={onSubmit}/>\r\n            <div className={classes.descr}>\r\n                <p>Welcome to the mashroom</p>\r\n                <ul>\r\n                    <li>Communication</li>\r\n                    <li>News</li>\r\n                    <li>Self-expression</li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n","import {getAuth} from \"./authReducer\";\r\nimport {InferActionsTypes} from \"./reduxStore\";\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    initialized: false\r\n};\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType=> {\r\n\r\n    switch (action.type) {\r\n        case 'APP/INITIALIZED_SUCCESS':\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    initializedSuccess : () => ({type: 'APP/INITIALIZED_SUCCESS'} as const)\r\n};\r\n\r\n\r\nexport default appReducer;\r\n\r\nexport const initializeApp = () => async (dispatch : any) => {\r\n    let dispatchResult = dispatch(getAuth());\r\n    dispatchResult\r\n        .then(() => {\r\n            dispatch(actions.initializedSuccess());\r\n        });\r\n};","type FriendType = {\r\n    id: number,\r\n    name: string,\r\n    photo: string\r\n}\r\nlet initialState = {\r\n    friends: [\r\n        {id: 4, name:'Anton', photo: 'https://im.kommersant.ru/Issues.photo/CORP/2019/03/01/KMO_111307_24199_1_t218_162046.jpg'},\r\n        {id: 4, name:'Anton', photo: 'https://im.kommersant.ru/Issues.photo/CORP/2019/03/01/KMO_111307_24199_1_t218_162046.jpg'},\r\n        {id: 4, name:'Anton', photo: 'https://im.kommersant.ru/Issues.photo/CORP/2019/03/01/KMO_111307_24199_1_t218_162046.jpg'},\r\n        {id: 4, name:'Anton', photo: 'https://im.kommersant.ru/Issues.photo/CORP/2019/03/01/KMO_111307_24199_1_t218_162046.jpg'},\r\n    ] as Array<FriendType>\r\n};\r\nexport type InitialStateType = typeof initialState;\r\n\r\nconst sidebarReducer = (state = initialState): InitialStateType => {\r\n    return state;\r\n};\r\n\r\nexport default sidebarReducer;","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer from \"./profileReducer\";\r\nimport dialogsReducer from \"./dialogsReducer\";\r\nimport sidebarReducer from \"./sidebarReducer\";\r\nimport usersReducer from \"./usersReducer\";\r\nimport authReducer from \"./authReducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport {reducer as formReducer} from 'redux-form';\r\nimport appReducer from \"./appReducer\";\r\nimport logger from 'redux-logger';\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    form: formReducer\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer;\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n\r\nexport type InferActionsTypes<T> = T extends {[keys:string]: (...args: any[]) => infer U} ? U : never\r\n\r\nexport type CommonThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware, logger)));\r\n// @ts-ignore\r\nexport default store;","import PageNotFound from \"./404page\";\n\nexport default PageNotFound;","import React from \"react\";\nimport classes from './pageNotFound.module.scss';\nconst PageNotFound = () => {\n    return (\n        <div className={classes.pageNotFound}>\n            <img src=\"http://vkclub.su/_data/stickers/gribson/sticker_vk_gribson_019.png\" alt=\"\"/>\n            <p>Oooops! <br/> Page not found</p>\n        </div>\n    );\n};\n\nexport default PageNotFound;","import React, {Component, ComponentType, Suspense} from 'react';\nimport NavBar from '../nav/nav';\nimport {Redirect, Switch, withRouter, Route, HashRouter} from \"react-router-dom\";\nimport './app.scss';\nimport Settings from \"../settings\";\nimport Dialogs from \"../dialogs\";\nimport ProfileAPI from \"../profile/profileAPI\";\nimport {UsersPage} from \"../users/usersAPI\";\nimport HeaderAPI from \"../header/headerAPI\";\nimport Login from \"../login\";\nimport {connect, Provider} from \"react-redux\";\nimport {compose} from \"redux\";\nimport {initializeApp} from \"../../redux/appReducer\";\nimport Spinner from \"../common/spinner\";\nimport store, {AppStateType} from \"../../redux/reduxStore\";\nimport PageNotFound from '../404page';\n\n\n\n\ntype MapStateToPropsType = ReturnType<typeof mapStateToProps>\ntype MapDispatchToProps = {\n    initializeApp: () => void\n}\ntype PropTypes = MapStateToPropsType & MapDispatchToProps\n\nconst News = React.lazy(() => import('../news'));\nconst Music = React.lazy(() => import('../music'));\n\nclass App extends Component<PropTypes> {\n\n    catchAllUnhandledErrors = () => {\n        alert('some error occurred');\n    };\n\n    componentDidMount() {\n        const {initializeApp} = this.props;\n        initializeApp();\n        window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors);\n    }\n\n    render() {\n        if (!this.props.initialized) return <Spinner/>;\n        return (\n            <div className='app'>\n                    <HeaderAPI/>\n                    {this.props.isAuth ? <NavBar/> : null}\n                    <div className='app-wrapper-content'>\n                        <Suspense fallback={<Spinner/>}>\n                            <Switch>\n                                <Route exact path='/' render={() => <Redirect to={'/profile'}/>}/>\n                                <Route path='/profile/:id?' render={() => <ProfileAPI />}/>\n                                <Route path='/dialogs' render={() => <Dialogs/>}/>\n                                <Route path='/music' component={Music}/>\n                                <Route path='/news' component={News}/>\n                                <Route path='/users' component={UsersPage}/>\n                                <Route path='/settings' component={Settings}/>\n                                <Route path='/login' component={Login}/>\n                                <Route path='*' component={PageNotFound}/>\n                            </Switch>\n                        </Suspense>\n                    </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        initialized: state.app.initialized,\n        isAuth: state.auth.isAuth\n    };\n};\nlet AppContainer = compose<ComponentType>(withRouter, connect(mapStateToProps, {initializeApp}))(App);\nconst MainApp: React.FC = () => {\n    return (\n        <HashRouter>\n            <Provider store={store}>\n                <AppContainer/>\n            </Provider>\n        </HashRouter>\n    );\n};\nexport default MainApp;","import ReactDOM from \"react-dom\";\r\nimport React from \"react\";\r\nimport MainApp from \"./component/app/app\";\r\n\r\n\r\nReactDOM.render(<MainApp/>, document.getElementById('root'));\r\n\r\n\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"loginForm_form__3Vb_K\",\"input\":\"loginForm_input__ziBHz\",\"checkbox\":\"loginForm_checkbox__3e9UO\",\"remember\":\"loginForm_remember__jXYoO\",\"button\":\"loginForm_button__1C0af\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"user\":\"user_user__1hjSD\",\"user_photo\":\"user_user_photo__15M4Y\",\"user_name\":\"user_user_name__1beMh\",\"user_status\":\"user_user_status__30yOH\",\"subscribe\":\"user_subscribe__HXmuo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"formControls_formControl__nwszG\",\"error\":\"formControls_error__23Zih\",\"summaryError\":\"formControls_summaryError__4h2HN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"dialog_dialog__SgFmC\",\"active\":\"dialog_active__2_S4l\",\"name\":\"dialog_name__Ax5JM\",\"photo\":\"dialog_photo__27FwB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"dialogs_dialogs__14W0_\",\"messages\":\"dialogs_messages__Odv3N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"message_message__2SYi-\",\"text\":\"message_text__3wddD\",\"photo\":\"message_photo__3wU4g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"description\":\"profileInfo_description__3o5_0\",\"profilePhoto\":\"profileInfo_profilePhoto__splgS\",\"contacts\":\"profileInfo_contacts__3I2Gx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"paginator_paginator__2ARdb\",\"pageNumber\":\"paginator_pageNumber__2YQgy\",\"selectedPage\":\"paginator_selectedPage__2Px8m\"};"],"sourceRoot":""}