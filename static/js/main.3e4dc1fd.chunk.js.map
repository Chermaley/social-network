{"version":3,"sources":["component/dialogs/dialogsForm/dialogsForm.module.scss","component/login/login.module.scss","component/profile/profile.module.scss","component/404page/pageNotFound.module.scss","component/profile/profileInfo/profileInfo.module.scss","component/header/header.module.scss","api/api.ts","api/profileApi.ts","redux/sidebarReducer.ts","component/common/spinner/spinner.tsx","assets/img/avatar.png","component/nav/infoPage/infoPage.tsx","component/nav/nav.tsx","api/authApi.ts","api/securityApi.ts","redux/authReducer.ts","component/redirectHOC/index.js","component/settings/index.js","component/redirectHOC/redirectHOC.tsx","component/settings/settings.tsx","redux/dialogsSelector.ts","api/dialogsApi.ts","redux/dialogsReducer.ts","component/dialogs/dialogItem/dialog.tsx","component/dialogs/dialogsPage.tsx","redux/authSelectors.ts","component/dialogs/message/index.js","component/dialogs/message/message.tsx","component/common/formsControl/formControls.tsx","component/dialogs/dialogsForm/index.js","component/dialogs/dialogsForm/dialogsForm.tsx","component/dialogs/messagesPage.tsx","component/dialogs/dialogs.tsx","component/dialogs/index.js","component/users/user/Plus-Icon-PNG.png","component/users/user/check.png","component/users/user/index.js","component/users/user/user.tsx","component/users/paginator/next.svg","component/users/paginator/prev.svg","component/users/paginator/index.js","component/users/paginator/paginator.tsx","component/common/spinner/index.js","api/usersApi.ts","redux/usersReducer.ts","redux/userSelectors.ts","component/users/index.js","component/users/Users.tsx","component/users/usersSearchForm/UsersSearchFormik.tsx","component/header/header.tsx","component/header/headerAPI.tsx","utils/validators/validators.js","component/login/loginForm/index.js","component/login/loginForm/loginForm.tsx","component/login/index.js","component/login/login.tsx","redux/appReducer.ts","redux/profileReducer.ts","redux/reduxStore.ts","component/404page/index.js","component/404page/404page.tsx","component/profile/profileInfo/profileDataForm.tsx","component/profile/profileInfo/upload.svg","component/profile/profileInfo/profileLeftSide.tsx","component/profile/profileStatus/profileStatusWithHooks.tsx","component/profile/profileInfo/ProfileData.tsx","redux/profileSelectors.ts","component/profile/profileInfo/profileInfo.tsx","component/profile/profile.tsx","component/app/app.tsx","index.js","component/nav/nav.module.scss","component/users/user/user.module.scss","component/users/paginator/paginator.module.scss","component/login/loginForm/loginForm.module.scss","component/dialogs/dialogs.module.scss","component/common/formsControl/formControls.module.scss","component/dialogs/message/message.module.scss","component/users/users.module.scss","component/dialogs/dialogItem/dialog.module.scss","component/common/spinner/spinner.module.scss"],"names":["module","exports","ResultsCodesEnum","ResultsCodeForCaptcha","axiosInstance","axios","create","withCredentials","baseURL","headers","profileApi","id","get","then","res","data","status","put","photo","formData","FormData","append","profile","initialState","profileData","actions","type","sidebarReducer","state","Spinner","className","classes","preloader","spinner","InfoPage","login","useSelector","auth","email","authProfile","sidebar","dispatch","useDispatch","navbar","user","src","photos","small","userPhoto","alt","name","fullName","button","to","interesting","title","content","getState","a","authId","userId","NavBar","authApi","password","rememberMe","captcha","post","delete","securityApi","isLoading","isAuth","url","getAuth","meData","resultCode","Success","getCaptchaUrl","authReducer","action","withAuthRedirect","Settings","Component","connect","props","restProps","onClick","getDialogs","dialogsPage","dialogs","getMessages","messages","getIsSending","isSending","getTotalMessagesCount","totalMessageCount","getPageSize","pageSize","dialogsApi","count","page","body","currentPage","message","getMessagesFromApi","loadOldPage","error","totalCount","items","getDialogsFromApi","dialogsReducer","newMessageList","reduce","accumulator","current","currentVal","some","item","Dialog","person","path","length","slice","activeClassName","active","dialog","DialogsPage","dialogsData","useEffect","map","userName","dialogsItems","getCaptcha","getIsAuth","getUserId","Message","reference","ownId","classname","senderId","own","noOwn","ref","senderName","text","FormControl","meta","touched","children","hasError","errorMessage","formControl","Input","input","DialogsForm","reduxForm","form","handleSubmit","wrapper","onSubmit","Field","component","disabled","MessagesPage","showMoreButton","messagesData","useParams","fakeScrollDiv","useRef","firstMessage","sendMessagePromise","sendMessage","loadPrevMessagePromise","pageToLoad","loadPreviousMessagesPage","m","index","messagesContainer","parentElement","scrollTop","offsetTop","value","newMessageText","div","scrollToBottom","reset","Dialogs","User","onFollowClick","followStatus","photoUrl","followingInProgress","startDialog","user_photo","user_name","user_status","buttons","send","subscribe","check","plus","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","styles","paginator","navBtn","left","prev","filter","p","cn","selectedPage","pageNumber","right","next","usersApi","getUsers","term","friend","followUser","unFollowUser","users","totalUsersCount","usersCount","isFetching","payload","requestUsers","usersPage","_followUnfollowFlow","apiMethod","usersReducer","followed","getTotalUsersCount","getCurrentPage","getIsLoadingStatus","getIsFollowingInProgress","getFilter","Users","usersData","history","useHistory","parse","queryString","location","search","substr","actualFilter","actualPage","query","String","pathname","onStartDialog","followUserClick","unFollowUserClick","usersContent","container","usersContainer","notFound","UsersSearchForm","enableReinitialize","initialValues","values","placeholder","as","submit","React","memo","HeaderContent","onSearchSubmit","logo","logo_auth","UsersSearchFormik","menu","settings","Header","header","HeaderAPI","useLocation","requiredField","LoginForm","summaryError","validate","checkbox","remember","Login","stopSubmit","_error","descr","initialized","appReducer","posts","img","likesCount","onProfilePage","getProfile","profileReducer","newPost","postText","bool","rootReducer","combineReducers","profilePage","app","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","logger","PageNotFound","pageNotFound","ProfileDataReduxForm","contactsInput","Object","keys","contacts","key","Form","ProfileLeftSide","isOwner","onPhotoSelected","leftSide","profilePhoto","large","upload","onChange","hidden","htmlFor","ProfileStatusWithHooks","updateStatus","editMode","setEditMode","setValue","onBlur","autoFocus","e","target","onDoubleClick","Contact","contactTitle","contactValue","contact","ProfileData","toggleEditMode","aboutMe","social","edit","getStatusSelector","getProfileSelector","ProfileInfo","changeEditMode","onSaveProfileData","Error","Promise","reject","saveProfileData","info","preventDefault","files","savePhoto","rightSide","Profile","params","authUserId","refreshProfileData","getStatus","News","lazy","Music","ChatPage","App","catchAllUnhandledErrors","alert","initializeApp","this","addEventListener","removeEventListener","fallback","exact","render","UsersPage","AppContainer","withRouter","MainApp","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.3e4dc1fd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"dialogsForm_wrapper__3Ba7c\",\"form\":\"dialogsForm_form__C9lDk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"login_login__VKdDU\",\"descr\":\"login_descr__u0f4g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"profile_wrapper__o3N96\",\"profile\":\"profile_profile__1d7zg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageNotFound\":\"pageNotFound_pageNotFound__2eM4K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"info\":\"profileInfo_info__1fYDq\",\"leftSide\":\"profileInfo_leftSide__bO-6c\",\"upload\":\"profileInfo_upload__1kV6T\",\"profilePhoto\":\"profileInfo_profilePhoto__splgS\",\"follow\":\"profileInfo_follow__3rv86\",\"rightSide\":\"profileInfo_rightSide__Y3IuS\",\"name\":\"profileInfo_name__12nhB\",\"aboutMe\":\"profileInfo_aboutMe__nrfMw\",\"status\":\"profileInfo_status__3v-hs\",\"social\":\"profileInfo_social__3mhSL\",\"contact\":\"profileInfo_contact__23I1g\",\"edit\":\"profileInfo_edit__34Kbm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__18sGI\",\"content\":\"header_content__15Dq1\",\"submit\":\"header_submit__vXiCC\",\"logo\":\"header_logo__esTHP\",\"logo_auth\":\"header_logo_auth__2BghE\",\"logo_noAuth\":\"header_logo_noAuth__emH4y\",\"menu\":\"header_menu__2b9oq\",\"active\":\"header_active__19EXb\",\"settings\":\"header_settings__26DpH\",\"loginBlock\":\"header_loginBlock__2ztlx\"};","import axios from \"axios\";\r\n\r\n\r\nexport const axiosInstance = axios.create({\r\n    withCredentials: true,\r\n    baseURL:\"https://social-network.samuraijs.com/api/1.0\",\r\n    headers: {\"API-KEY\": \"f68a4cda-2f4c-4785-816b-4190cdf2b12c\"}\r\n});\r\n\r\nexport type GetItemsType<items> = {\r\n    items: Array<items>,\r\n    totalCount: number,\r\n    error: string | null\r\n}\r\n\r\nexport type ResponseType<D = {}, RC = ResultsCodesEnum> = {\r\n    data: D,\r\n    messages: Array<string>,\r\n    resultCode: RC,\r\n    totalCount?: number\r\n}\r\n\r\nexport enum ResultsCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\nexport enum ResultsCodeForCaptcha {\r\n    captcha = 10\r\n}\r\n\r\n\r\n\r\n","import {PhotosType, ProfileType} from \"../types/types\";\r\nimport {axiosInstance, ResponseType} from \"./api\";\r\n\r\ntype savePhotoResDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileApi = {\r\n    getProfile: (id: number) => {\r\n        return axiosInstance.get<ProfileType>(`/profile/${id}`).then(res => res.data);\r\n    },\r\n    getStatus: (id: number) => {\r\n        return axiosInstance.get<string>(`/profile/status/${id}`).then(res => res.data);\r\n    },\r\n    updateStatus: (status: string) => {\r\n        return axiosInstance.put<ResponseType>(`/profile/status`, {status: status});\r\n    },\r\n    uploadUserPhoto: (photo: File) => {\r\n        const formData = new FormData;\r\n        formData.append(\"image\", photo);\r\n        return axiosInstance.put<ResponseType<savePhotoResDataType>>('/profile/photo', formData, {\r\n            headers: {\r\n                'Content-type': 'multipart/form-data'\r\n            }\r\n        }).then(res => res.data);\r\n    },\r\n    uploadUserData: (profile: ProfileType) => {\r\n        return axiosInstance.put<ResponseType>('/profile', profile).then(res => res.data);\r\n    }\r\n};","import {ProfileType} from \"../types/types\";\r\nimport {CommonThunkType, InferActionsTypes} from \"./reduxStore\";\r\nimport {FormAction} from \"redux-form\";\r\nimport {profileApi} from \"../api/profileApi\";\r\n\r\nlet initialState = {\r\n    profileData: null as ProfileType | null\r\n};\r\n\r\n\r\nconst sidebarReducer = (state = initialState, actions: ActionsType): InitialStateType => {\r\n    switch (actions.type) {\r\n        case \"SIDEBAR/SET_PROFILE\":\r\n            return {\r\n                ...state,\r\n                profileData: actions.profile\r\n            };\r\n    }\r\n    return state;\r\n};\r\n\r\nexport const actions = {\r\n    setProfileForSideBar: (profile: ProfileType) => ({type: 'SIDEBAR/SET_PROFILE', profile} as const)\r\n};\r\n\r\nexport const getProfileForSideBar = (): ThunkType => async (dispatch, getState) => {\r\n    const authId = getState().auth.userId;\r\n    if (authId) {\r\n        let profileData = await profileApi.getProfile(authId);\r\n        dispatch(actions.setProfileForSideBar(profileData));\r\n    }\r\n};\r\n\r\nexport default sidebarReducer;\r\n\r\ntype ThunkType = CommonThunkType<ActionsType | FormAction>\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>;","import React from \"react\";\r\nimport classes from './spinner.module.scss';\r\nconst Spinner = () => {\r\n    return (\r\n        <div className={classes.preloader}>\r\n            <div className={classes.spinner}></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Spinner;","export default __webpack_public_path__ + \"static/media/avatar.00971467.png\";","import React from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/reduxStore\";\r\nimport {getProfileForSideBar} from \"../../../redux/sidebarReducer\";\r\nimport Spinner from \"../../common/spinner/spinner\";\r\nimport classes from \"../nav.module.scss\";\r\nimport userPhoto from \"../../../assets/img/avatar.png\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport const InfoPage: React.FC = () => {\r\n    const login = useSelector((state:AppStateType) => state.auth.email);\r\n    const authProfile = useSelector((state: AppStateType) => state.sidebar.profileData);\r\n    const dispatch = useDispatch();\r\n    const getAuthUserData = () => {\r\n        dispatch(getProfileForSideBar());\r\n    };\r\n\r\n    if(!authProfile) {\r\n        getAuthUserData();\r\n        return <Spinner/>;\r\n    }\r\n\r\n    return (\r\n        <nav className={classes.navbar}>\r\n            <div className={classes.user}>\r\n                <div className={classes.photo}><img src={authProfile.photos.small || userPhoto} alt=\"avatar\"/></div>\r\n                <p className={classes.name}>{authProfile.fullName}</p>\r\n                <span className={classes.email}>{login}</span>\r\n                <div className={classes.button}>\r\n                    <Link to={'/'}>Go to profile</Link>\r\n                </div>\r\n            </div>\r\n            <div className={classes.interesting}>\r\n                <span className={classes.title}>Chat</span>\r\n                <div className={classes.content}/>\r\n            </div>\r\n        </nav>\r\n    );\r\n};","import React from 'react';\r\n\r\nimport {InfoPage} from './infoPage';\r\n\r\nconst NavBar = () => {\r\n    return <InfoPage/>;\r\n};\r\n\r\n\r\nexport default NavBar;","import {axiosInstance, ResponseType, ResultsCodeForCaptcha, ResultsCodesEnum} from \"./api\";\r\n\r\n\r\ntype MeResponseDataType = {\r\n    id: number,\r\n    email: string,\r\n    login: string,\r\n}\r\n\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\n\r\n\r\nexport const authApi = {\r\n    me: () => {\r\n        return axiosInstance.get<ResponseType<MeResponseDataType>>(`/auth/me`).then(res => res.data);\r\n    },\r\n    login: (email: string, password: string, rememberMe = false, captcha: null | string = null) => {\r\n        return axiosInstance.post<ResponseType<LoginResponseDataType, ResultsCodeForCaptcha | ResultsCodesEnum>>(`/auth/login`, {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n            captcha\r\n        });\r\n    },\r\n    logout: () => {\r\n        return axiosInstance.delete('/auth/login');\r\n    },\r\n\r\n};","import {axiosInstance} from \"./api\";\r\n\r\ntype getCaptchaResponseType = {\r\n    url: string\r\n}\r\n\r\nexport const securityApi = {\r\n    getCaptcha: () => {\r\n        return axiosInstance.get<getCaptchaResponseType>('/security/get-captcha-url').then(res => res.data);\r\n    }\r\n};","import {ResultsCodesEnum, ResultsCodeForCaptcha} from \"../api/api\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\nimport {CommonThunkType, InferActionsTypes} from \"./reduxStore\";\r\nimport {authApi} from \"../api/authApi\";\r\nimport {securityApi} from \"../api/securityApi\";\r\n\r\nconst initialState = {\r\n    isLoading: false,\r\n    userId: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captcha: null as string | null\r\n};\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"AUTH/SET_USER_DATA\":\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n                isAuth: true\r\n            };\r\n        case \"AUTH/DELETE_USER_DATA\": {\r\n            return {\r\n                ...state,\r\n                userId: null,\r\n                email: null,\r\n                login: null,\r\n                isAuth: false,\r\n            };\r\n        }\r\n        case \"AUTH/SET_CAPTCHA_URL\": {\r\n            return {\r\n                ...state,\r\n                captcha: action.url\r\n            };\r\n        }\r\n        case \"AUTH/CAPTCHA_SUCCESS\": {\r\n            return {\r\n                ...state,\r\n                captcha: null\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n        }\r\n};\r\n\r\nconst actions = {\r\n    setAuthUserData :(userId: number, email: string, login: string) => ({type: 'AUTH/SET_USER_DATA', data: {userId, email, login}} as const),\r\n    deleteAuthUserData:  () => ({type: 'AUTH/DELETE_USER_DATA'} as const),\r\n    setCaptchaUrl : (url: string) => ({type: 'AUTH/SET_CAPTCHA_URL', url} as const),\r\n    captchaSuccess : () => ({type: 'AUTH/CAPTCHA_SUCCESS'} as const)\r\n};\r\n\r\nexport const getAuth = (): ThunkType => async (dispatch) => {\r\n    let meData = await authApi.me();\r\n    if (meData.resultCode === ResultsCodesEnum.Success) {\r\n        const {id, login, email} = meData.data;\r\n        dispatch(actions.setAuthUserData(id, email, login));\r\n    }\r\n};\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType =>\r\n    async (dispatch) => {\r\n        let res = await authApi.login(email, password, rememberMe, captcha);\r\n        if (res.data.resultCode === ResultsCodesEnum.Success) {\r\n            dispatch(getAuth());\r\n            dispatch(actions.captchaSuccess());\r\n        } else {\r\n            let message = res.data.messages.length !== 0 ? res.data.messages[0] : \"some error\";\r\n            let action = stopSubmit(\"login\", {_error: message});\r\n            if (res.data.resultCode === ResultsCodeForCaptcha.captcha) {\r\n                dispatch(action);\r\n                dispatch(getCaptchaUrl());\r\n            }\r\n            dispatch(action);\r\n        }\r\n    };\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    let res = await authApi.logout();\r\n    if (res.data.resultCode === ResultsCodesEnum.Success) {\r\n        dispatch(actions.deleteAuthUserData());\r\n    }\r\n};\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    let data = await securityApi.getCaptcha();\r\n    if (data.url) {\r\n        dispatch(actions.setCaptchaUrl(data.url));\r\n    }\r\n};\r\n\r\nexport default authReducer;\r\n// Type\r\nexport type InitialStateType = typeof initialState\r\ntype ThunkType = CommonThunkType<ActionsType | FormAction>\r\ntype ActionsType = InferActionsTypes<typeof actions>;\r\n","import {withAuthRedirect} from \"./redirectHOC\";\r\n\r\nexport default withAuthRedirect;","import Settings from \"./settings\";\r\nexport default Settings;","import {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport React from \"react\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\ntype MapPropsType = {\r\n    isAuth: boolean,\r\n}\r\ntype MapDispatchType = {}\r\nexport function withAuthRedirect<WCP>(Component: React.ComponentType<WCP>){\r\n\r\n    const WithRedirect: React.FC<MapPropsType & MapDispatchType> = (props) => {\r\n        let {isAuth, ...restProps} = props;\r\n        if (!isAuth) return <Redirect to={'/login'}/>;\r\n        return (\r\n            <Component {...restProps as unknown as WCP}/>\r\n        );\r\n    };\r\n    const mapStateToProps = (state: AppStateType): MapPropsType => {\r\n        return {\r\n            isAuth: state.auth.isAuth\r\n        };\r\n    };\r\n    return connect<MapPropsType, MapDispatchType, WCP, AppStateType>(mapStateToProps)(WithRedirect);\r\n}","import React from \"react\";\r\nimport {logout} from \"../../redux/authReducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport withAuthRedirect from \"../redirectHOC\";\r\n\r\nconst Settings = () => {\r\n    const dispatch = useDispatch();\r\n    const onLogout = () => {\r\n        dispatch(logout());\r\n    };\r\n    return (\r\n            <div>\r\n                <span onClick={onLogout}>Logout</span>\r\n            </div>\r\n    );\r\n};\r\nexport default withAuthRedirect(Settings);","import {AppStateType} from \"./reduxStore\";\r\n\r\nexport const getDialogs = (state: AppStateType) => {\r\n    return state.dialogsPage.dialogs;\r\n};\r\n\r\nexport const getMessages = (state: AppStateType) => {\r\n    return state.dialogsPage.messages;\r\n};\r\n\r\nexport const getIsLoading = (state: AppStateType) => {\r\n    return state.dialogsPage.isLoading;\r\n};\r\n\r\nexport const getIsSending = (state: AppStateType) => {\r\n    return state.dialogsPage.isSending;\r\n};\r\n\r\nexport const getTotalMessagesCount = (state: AppStateType) => {\r\n    return state.dialogsPage.totalMessageCount;\r\n};\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.dialogsPage.pageSize;\r\n};","import {DialogType, MessageType} from \"../redux/dialogsReducer\";\r\nimport {axiosInstance, GetItemsType, ResponseType} from \"./api\";\r\n\r\ntype SendMessageDataResType = {\r\n    message: MessageType\r\n}\r\n\r\nexport const dialogsApi = {\r\n    getDialogs: () => {\r\n        return axiosInstance.get<GetItemsType<DialogType>>(`/dialogs`).then(res => res.data);\r\n    },\r\n    startDialog: (id: number) => {\r\n        return axiosInstance.put<ResponseType>(`/dialogs/${id}`).then(res => res.data);\r\n    },\r\n    getMessages: (id: number, count = 20, page = 1) => {\r\n        return axiosInstance.get<GetItemsType<MessageType>>(`/dialogs/${id}/messages?count=${count}&page=${page}`).then(res => res.data);\r\n    },\r\n    sendMessage: (id: number, body: string) => {\r\n        return axiosInstance.post<ResponseType<SendMessageDataResType>>(`/dialogs/${id}/messages` , {body}).then(res => res.data);\r\n    }\r\n}","/* eslint-disable no-case-declarations */\r\nimport {CommonThunkType, InferActionsTypes} from \"./reduxStore\";\r\nimport {FormAction} from \"redux-form\";\r\nimport {dialogsApi} from \"../api/dialogsApi\";\r\nimport {PhotosType} from \"../types/types\";\r\nimport {ResultsCodesEnum} from \"../api/api\";\r\n\r\nexport type MessageType = {\r\n    addedAt: string,\r\n    body: string,\r\n    id: string,\r\n    recipientId: number,\r\n    senderId: number,\r\n    senderName: string,\r\n    translatedBody: any,\r\n    viewed: boolean\r\n}\r\n\r\nexport type DialogType = {\r\n    hasNewMessages: boolean,\r\n    id: number,\r\n    lastDialogActivityDate: \"2020-12-30T10:41:41.887\",\r\n    lastUserActivityDate: \"2020-12-27T17:05:23.097\",\r\n    newMessagesCount: 0,\r\n    photos: PhotosType,\r\n    userName: string\r\n}\r\nconst initialState = {\r\n        messages: [\r\n        ] as Array<MessageType>,\r\n        dialogs: [\r\n        ] as Array<DialogType>,\r\n        pageSize: 9,\r\n        currentPage: 1,\r\n        totalMessageCount: null as number | null,\r\n        isLoading: false,\r\n        isSending: false\r\n};\r\n\r\nexport const dialogsReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    let messagesList;\r\n    let newMessageList: any;\r\n    switch (action.type) {\r\n        case 'DIALOGS/SET_MESSAGES':\r\n            return {\r\n                ...state,\r\n                messages: action.messages\r\n            };\r\n        case \"DIALOGS/SET_OLD_MESSAGES\":\r\n            //check if element have already exist\r\n            messagesList = [...action.messages, ...state.messages];\r\n            newMessageList = messagesList.reduce((accumulator: { id: string; }[], current: MessageType) => {\r\n                if (checkIfAlreadyExist(current)) {\r\n                    return accumulator;\r\n                } else {\r\n                    return [...accumulator, current];\r\n                }\r\n                function checkIfAlreadyExist(currentVal: MessageType) {\r\n                    return accumulator.some((item: { id: string; }) => {\r\n                        return (item.id === currentVal.id);\r\n                    });\r\n                }\r\n            }, []);\r\n            return {\r\n              ...state,\r\n              messages: newMessageList\r\n            };\r\n        case \"DIALOGS/SET_LAST_MESSAGE\":\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, action.message]\r\n            };\r\n        case \"DIALOGS/SET_DIALOGS\":\r\n            return {\r\n                ...state,\r\n                dialogs: action.dialogs\r\n            };\r\n        case \"DIALOGS/INCREMENT_CURRENT_PAGE\":\r\n            return {\r\n                ...state,\r\n                currentPage: ++state.currentPage\r\n            };\r\n        case \"DIALOGS/SET_CURRENT_PAGE\":\r\n            return {\r\n                ...state,\r\n                currentPage: action.page\r\n            };\r\n        case \"DIALOGS/TOGGLE_LOADING_STATUS\":\r\n            return {\r\n                ...state,\r\n                isLoading: !state.isLoading\r\n            };\r\n        case \"DIALOGS/TOGGLE_SENDING_STATUS\":\r\n            return {\r\n                ...state,\r\n                isSending: !state.isSending\r\n            };\r\n        case \"DIALOGS/SET_TOTAL_MESSAGES_COUNT\":\r\n            return {\r\n                ...state,\r\n                totalMessageCount: action.count\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    setMessages : (messages: Array<MessageType>) => ({type: 'DIALOGS/SET_MESSAGES', messages} as const),\r\n    setOldMessages: (messages: Array<MessageType>) => ({type: 'DIALOGS/SET_OLD_MESSAGES', messages} as const),\r\n    setDialogs: (dialogs: any) => ({type: 'DIALOGS/SET_DIALOGS', dialogs} as const),\r\n    incrementCurrentPage: () => ({type: 'DIALOGS/INCREMENT_CURRENT_PAGE'} as const),\r\n    setLastMessage: (message: MessageType) => ({type: 'DIALOGS/SET_LAST_MESSAGE', message} as const),\r\n    setCurrentPage: (page: number) => ({type: 'DIALOGS/SET_CURRENT_PAGE', page} as const),\r\n    toggleLoadingStatus: () => ({type: 'DIALOGS/TOGGLE_LOADING_STATUS'} as const),\r\n    toggleSendingStatus: () => ({type: 'DIALOGS/TOGGLE_SENDING_STATUS'} as const),\r\n    setTotalMessagesCount: (count: number) => ({type: 'DIALOGS/SET_TOTAL_MESSAGES_COUNT', count} as const)\r\n};\r\n\r\n//MESSAGES THUNK\r\nexport const getMessagesFromApi = (id: number, page?: number, loadOldPage = false): ThunkType => async (dispatch,getState) => {\r\n    dispatch(actions.toggleLoadingStatus());\r\n    const count = getState().dialogsPage.pageSize;\r\n    let data = await dialogsApi.getMessages(id, count, page);\r\n    if (!data.error) {\r\n        dispatch(actions.toggleLoadingStatus());\r\n        dispatch(actions.setTotalMessagesCount(data.totalCount));\r\n        if (!loadOldPage) {\r\n            dispatch(actions.setMessages(data.items));\r\n        } else {\r\n            dispatch(actions.setOldMessages(data.items));\r\n        }\r\n    }\r\n};\r\n\r\nexport const loadPreviousMessagesPage = (id: number): ThunkType => async (dispatch, getState) => {\r\n    dispatch(actions.incrementCurrentPage());\r\n    const pageToLoad = getState().dialogsPage.currentPage;\r\n    dispatch(getMessagesFromApi(id, pageToLoad,true));\r\n};\r\n\r\n\r\nexport const sendMessage = (id: number, body: string): ThunkType => async (dispatch) => {\r\n    dispatch(actions.toggleSendingStatus());\r\n    let res = await dialogsApi.sendMessage(id, body);\r\n    if (res.resultCode === ResultsCodesEnum.Success) {\r\n        dispatch(actions.setLastMessage(res.data.message));\r\n        dispatch(actions.toggleSendingStatus());\r\n    }\r\n};\r\n\r\n// DIALOGS THUNK\r\nexport const startDialog = (id: number): ThunkType => async (dispatch) => {\r\n    const res = await dialogsApi.startDialog(id);\r\n    if(res.resultCode === ResultsCodesEnum.Success) {\r\n        dispatch(getDialogsFromApi());\r\n    }\r\n};\r\n\r\nexport const getDialogsFromApi = (): ThunkType => async (dispatch) => {\r\n    let data = await dialogsApi.getDialogs();\r\n    dispatch(actions.setDialogs(data));\r\n};\r\n\r\nexport default dialogsReducer;\r\n\r\n// Type\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = CommonThunkType<ActionsType | FormAction>","import {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport classes from './dialog.module.scss';\r\nimport userPhoto from '../../../assets/img/avatar.png';\r\nimport {PhotosType} from \"../../../types/types\";\r\ntype PropTypes = {\r\n    person: string,\r\n    photos: PhotosType,\r\n    id: number\r\n}\r\n\r\nconst Dialog: React.FC<PropTypes> = ({person, id, photos}) => {\r\n    let path = `/dialogs/${id}`;\r\n    if (person.length > 15) {\r\n        person = person.slice(0,15) + '...';\r\n    }\r\n    return (\r\n        <NavLink to={path} activeClassName={classes.active} className={classes.dialog}>\r\n            <div className={classes.photo}><img src={photos.small || userPhoto} alt=\"\"/></div>\r\n            <div className={classes.name}>{person}</div>\r\n        </NavLink>\r\n    );\r\n};\r\n\r\n\r\nexport default Dialog;","import React, {useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getDialogs} from \"../../redux/dialogsSelector\";\r\nimport {getDialogsFromApi} from \"../../redux/dialogsReducer\";\r\nimport Dialog from \"./dialogItem/dialog\";\r\nimport classes from \"./dialogs.module.scss\";\r\n\r\n\r\nexport const DialogsPage: React.FC = () => {\r\n    const dialogsData = useSelector(getDialogs);\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        dispatch(getDialogsFromApi());\r\n    },[]);\r\n\r\n    const dialogs = dialogsData.map(({id, userName, photos}) => {\r\n        return <Dialog key={id} id={id} person={userName} photos={photos}/>;\r\n    });\r\n\r\n    return (\r\n        <div className={classes.dialogsItems}>\r\n            {dialogs}\r\n        </div>\r\n    );\r\n};\r\n","import {AppStateType} from \"./reduxStore\";\r\n\r\nexport const getCaptcha = (state: AppStateType) => {\r\n    return state.auth.captcha;\r\n};\r\nexport const getIsAuth = (state: AppStateType) => {\r\n    return state.auth.isAuth;\r\n};\r\nexport const getLogin = (state: AppStateType) => {\r\n    return state.auth.login;\r\n};\r\nexport const getUserId = (state: AppStateType) => {\r\n    return state.auth.userId;\r\n};\r\n","import Message from \"./message\";\r\nexport default Message;","import classes from \"./message.module.scss\";\r\nimport React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getUserId} from \"../../../redux/authSelectors\";\r\nimport {MessageType} from \"../../../redux/dialogsReducer\";\r\ntype PropTypes = {message: MessageType, reference: any}\r\n\r\nconst Message: React.FC<PropTypes> = ({message, reference}) => {\r\n    const ownId = useSelector(getUserId);\r\n    const classname = message.senderId === ownId ? classes.message + ' ' + classes.own : classes.message + ' ' + classes.noOwn;\r\n    \r\n    return <div className={classname} ref={reference}>\r\n        <div className={classes.senderName}><p>{message.senderName}</p></div>\r\n        <div className={classes.text}>{message.body}</div>\r\n    </div>\r\n    ;\r\n};\r\nexport default Message;","import React from \"react\";\r\nimport classes from './formControls.module.scss';\r\nimport {WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl:React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError =  touched && error;\r\n    const errorMessage = hasError ? <span>{error}</span>: null;\r\n\r\n    return (\r\n        <div className={!hasError ? classes.formControl : classes.formControl + ' ' + classes.error}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {errorMessage}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...restProps} {...input}/></FormControl>;\r\n};\r\n\r\nexport const Input: React.FC<WrappedFieldProps>  = (props) => {\r\n    const {input, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>;\r\n};\r\n","import DialogsForm from \"./dialogsForm\";\r\n\r\nexport default DialogsForm;","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../../common/formsControl/formControls\";\r\nimport {DialogsFormValuesType} from \"../dialogs\";\r\nimport classes from './dialogsForm.module.scss';\r\n\r\ntype PropTypes = { id: number, isSending: boolean}\r\nconst DialogsForm: React.FC<InjectedFormProps<DialogsFormValuesType, PropTypes> & PropTypes> = ({id, handleSubmit,isSending}) => {\r\n    return (\r\n        <div className={classes.wrapper}>\r\n            {id ? <form className={classes.form} onSubmit={handleSubmit}>\r\n                <Field\r\n                    component={Input}\r\n                    name={'newMessageText'}/>\r\n                <button disabled={isSending}/>\r\n            </form> : null}\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\n\r\nexport default reduxForm<DialogsFormValuesType, PropTypes>({form: 'addMessageForm'})(DialogsForm);\r\n","import React, {useEffect, useRef} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getIsSending, getMessages, getPageSize, getTotalMessagesCount} from \"../../redux/dialogsSelector\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {\r\n    actions,\r\n    getMessagesFromApi,\r\n    loadPreviousMessagesPage,\r\n    sendMessage\r\n} from \"../../redux/dialogsReducer\";\r\nimport {reset} from \"redux-form\";\r\nimport classes from \"./dialogs.module.scss\";\r\nimport {DialogsFormValuesType} from \"./dialogs\";\r\nimport Message from \"./message\";\r\nimport DialogsFormRedux from './dialogsForm';\r\n\r\nexport const MessagesPage: React.FC = () => {\r\n    const messagesData = useSelector(getMessages);\r\n    const isSending = useSelector(getIsSending);\r\n    const pageSize = useSelector(getPageSize);\r\n    const totalCount = useSelector(getTotalMessagesCount);\r\n    const {id} = useParams<any>();\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const fakeScrollDiv = useRef<HTMLDivElement>(null);\r\n    const firstMessage = useRef<HTMLDivElement>(null);\r\n\r\n    let showMoreButton;\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            dispatch(actions.setMessages([]));\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            dispatch(getMessagesFromApi(id, 1));\r\n            dispatch(actions.setCurrentPage(1));\r\n        }\r\n    }, [id]);\r\n\r\n    const sendMessagePromise = (id: number, message: string): any => {\r\n        return dispatch(sendMessage(id, message));\r\n    };\r\n\r\n    const loadPrevMessagePromise = (id: number): any => {\r\n        return dispatch(loadPreviousMessagesPage(id));\r\n    };\r\n\r\n    const addMessage = (value: DialogsFormValuesType) => {\r\n        const message = value.newMessageText;\r\n        if (message) {\r\n            sendMessagePromise(id, message).then(() => {\r\n                scrollToBottom(fakeScrollDiv);\r\n            });\r\n            dispatch(reset('addMessageForm'));\r\n        }\r\n    };\r\n\r\n    const getMoreMessages = () => {\r\n        loadPrevMessagePromise(id).then(() => {\r\n            const message = firstMessage.current;\r\n            if (message !== null && message.parentElement !== null) {\r\n                message.parentElement.scrollTop = message.offsetTop;\r\n            }\r\n        });\r\n    };\r\n\r\n    const messages = messagesData.map((m, index) => {\r\n        const reference = index === 0 ? firstMessage : null;\r\n        return <Message key={m.id} message={m} reference={reference}/>;\r\n    });\r\n\r\n    if (totalCount) {\r\n        showMoreButton = id && (totalCount > pageSize);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={classes.messagesContainer}>\r\n             <div className={classes.messages}>\r\n                 {showMoreButton ? <button onClick={getMoreMessages}>more</button> : null}\r\n                {messages}\r\n                <div ref={fakeScrollDiv}/>\r\n            </div>\r\n            <DialogsFormRedux onSubmit={addMessage} isSending={isSending} id={id}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nfunction scrollToBottom (ref: any | null) {\r\n    const div = ref.current;\r\n    if (div !== null && div.parentElement !== null) {\r\n        div.parentElement.scrollTop = div.offsetTop;\r\n    }\r\n}","import React from 'react';\r\nimport classes from './dialogs.module.scss';\r\nimport {DialogsPage} from './dialogsPage';\r\nimport {MessagesPage} from './messagesPage';\r\n\r\nexport type DialogsFormValuesType = {\r\n    newMessageText: string\r\n}\r\n\r\nconst Dialogs:React.FC = () => {\r\n    return (\r\n            <div className={classes.dialogs}>\r\n                <DialogsPage/>\r\n                <MessagesPage/>\r\n            </div>\r\n    );\r\n};\r\n\r\nexport default Dialogs;\r\n\r\n","import Dialogs from \"./dialogs\";\r\nexport default Dialogs;","export default __webpack_public_path__ + \"static/media/Plus-Icon-PNG.ac4270cf.png\";","export default __webpack_public_path__ + \"static/media/check.c4294ef8.png\";","import User from \"./user\";\r\nexport default User;","\r\nimport React from \"react\";\r\nimport classes from './user.module.scss';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nimport plus from './Plus-Icon-PNG.png';\r\nimport check from './check.png';\r\n\r\ntype PropsType = {\r\n    fullName: string,\r\n    onFollowClick: () => void,\r\n    startDialog: (id: number) => void,\r\n    followStatus: boolean,\r\n    photoUrl: string,\r\n    status: string,\r\n    id: number,\r\n    followingInProgress: Array<number>\r\n}\r\n\r\nconst User:React.FC<PropsType> = ({fullName, onFollowClick, followStatus,\r\n                                       photoUrl, status,\r\n                                      id: userId, followingInProgress, startDialog}) => {\r\n    return (\r\n        <div className={classes.user}>\r\n            <div className={classes.user}>\r\n                <div>\r\n                    <NavLink to={`/profile/${userId}`}>\r\n                        <img src={photoUrl} alt='user photo' className={classes.user_photo}/>\r\n                    </NavLink>\r\n                </div>\r\n                <div>\r\n                    <div className={classes.user_name}>{fullName}</div><div className={classes.user_status}>{status}</div>\r\n                </div>\r\n                <div className={classes.buttons}>\r\n                    {followStatus ? <button className={classes.send}\r\n                                            onClick={() => startDialog(userId)}>\r\n                        Send\r\n                    </button> : null}\r\n                    <button className={classes.subscribe}\r\n                            disabled={followingInProgress.some(id => id === userId)}\r\n                            onClick={onFollowClick}>\r\n                            <img src={!followStatus ? plus : check} alt={'follow'}/>\r\n                            </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default User;","export default __webpack_public_path__ + \"static/media/next.43c0e5d8.svg\";","export default __webpack_public_path__ + \"static/media/prev.07f693de.svg\";","import Paginator from \"./paginator\";\r\n\r\nexport default Paginator;","import React, {useState} from 'react';\r\nimport styles from \"./paginator.module.scss\";\r\nimport cn from \"classnames\";\r\nimport next from './next.svg';\r\nimport prev from './prev.svg';\r\ntype PropsType = {\r\n    totalItemsCount: number,\r\n    pageSize: number,\r\n    currentPage: number,\r\n    onPageChanged: (pageNumber: number) => void,\r\n    portionSize?: number\r\n}\r\n\r\nlet Paginator: React.FC<PropsType> = ({\r\n                                          totalItemsCount, pageSize, currentPage\r\n                                          , onPageChanged, portionSize = 10\r\n                                      }) => {\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n\r\n    let pages: Array<number> = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    if (pagesCount < 2) {\r\n        return null;\r\n    }\r\n    return (\r\n        <div className={styles.paginator}>\r\n        {portionNumber > 1 &&\r\n        <span className={styles.navBtn + ' ' + styles.left} onClick={() => {\r\n            setPortionNumber(portionNumber - 1);\r\n        }}><img src={prev} alt=\"next\"/></span>}\r\n\r\n        {pages\r\n            .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n            .map((p) => {\r\n                return <span className={cn({\r\n                    [styles.selectedPage]: currentPage === p\r\n                }, styles.pageNumber)}\r\n                             key={p}\r\n                             onClick={() => {\r\n                                 onPageChanged(p);\r\n                             }}>{p}</span>;\r\n            })}\r\n        {portionCount > portionNumber &&\r\n        <span className={styles.navBtn + ' ' + styles.right} onClick={() => {\r\n            setPortionNumber(portionNumber + 1);\r\n        }}><img src={next} alt=\"next\"/></span>}\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default Paginator;","import Spinner from \"./spinner\";\r\nexport default Spinner;","import {axiosInstance, GetItemsType, ResponseType} from \"./api\";\r\nimport {UserType} from \"../types/types\";\r\n\r\nexport const usersApi = {\r\n    getUsers: async (currentPage = 1, pageSize = 10, term: string = '', friend: null | boolean = null) => {\r\n        const url =`/users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? '': `&friend=${friend}`);\r\n        return axiosInstance.get<GetItemsType<UserType>>(url).then(res => res.data);\r\n    },\r\n    followUser: (id: number) => {\r\n        return axiosInstance.post<ResponseType>(`/follow/${id}`).then(res => res.data);\r\n    },\r\n    unFollowUser: (id: number) => {\r\n        return axiosInstance.delete(`/follow/${id}`).then(res => res.data) as Promise<ResponseType>;\r\n    }\r\n};","import {UserType} from \"../types/types\";\r\nimport {CommonThunkType, InferActionsTypes} from \"./reduxStore\";\r\nimport {usersApi} from \"../api/usersApi\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ResultsCodesEnum} from \"../api/api\";\r\n\r\nconst initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 8,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isLoading: false,\r\n    followingInProgress: [] as Array<number>, //array of users ID\r\n    filter: {\r\n        term: '',\r\n        friend: null as null | boolean,\r\n    }\r\n};\r\n\r\nconst usersReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"USERS/SET_USERS\":\r\n            return {\r\n                ...state,\r\n                users: [...action.users]\r\n            };\r\n        case \"USERS/TOGGLE_FOLLOW\":\r\n            return {\r\n                ...state,\r\n                users: state.users.map((user) => {\r\n                    if (user.id === action.id) {\r\n                        return {...user, followed: !user.followed};\r\n                    }\r\n                    return user;\r\n                })\r\n            };\r\n        case \"USERS/SET_TOTAL_USERS_COUNT\":\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.usersCount\r\n            };\r\n        case \"USERS/SET_CURRENT_PAGE\":\r\n            return {\r\n                ...state,\r\n                currentPage: action.pageNumber\r\n            };\r\n        case \"USERS/TOGGLE_LOADING\":\r\n            return {\r\n                ...state,\r\n                isLoading: !state.isLoading\r\n            };\r\n        case \"USERS/TOGGLE_FOLLOWING_PROGRESS\":\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.id]\r\n                    : state.followingInProgress.filter(id => id !== action.id)\r\n            };\r\n        case \"USERS/SET_FILTER\":\r\n            return {\r\n                ...state,\r\n                filter: action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    toggleLoadingStatus : () => ({type: 'USERS/TOGGLE_LOADING'} as const),\r\n    setTotalUsersCount : (usersCount: number) => ({\r\n        type: 'USERS/SET_TOTAL_USERS_COUNT',\r\n        usersCount\r\n    } as const),\r\n    setCurrentPage : (pageNumber: number) => ({type: 'USERS/SET_CURRENT_PAGE', pageNumber} as const),\r\n    setUsers : (users: Array<UserType>) => ({type: 'USERS/SET_USERS', users} as const),\r\n    toggleFollowingProgress : (id: number, isFetching: boolean) => ({\r\n        type: 'USERS/TOGGLE_FOLLOWING_PROGRESS',\r\n        id,\r\n        isFetching\r\n    } as const),\r\n    follow: (id: number) =>  ({type: 'USERS/TOGGLE_FOLLOW', id} as const),\r\n    setFilter: (payload: FilterFormType) => ({type: 'USERS/SET_FILTER', payload} as const),\r\n};\r\n\r\nexport const requestUsers = (currentPage: number, pageSize: number): ThunkType =>\r\n    async (dispatch, getState) => {\r\n        dispatch(actions.toggleLoadingStatus());\r\n        let res;\r\n        let filter = getState().usersPage.filter;\r\n        res = await usersApi.getUsers(currentPage, pageSize, filter.term, filter.friend);\r\n        dispatch(actions.toggleLoadingStatus());\r\n        dispatch(actions.setTotalUsersCount(res.totalCount));\r\n        dispatch(actions.setUsers(res.items));\r\n    };\r\n\r\nconst _followUnfollowFlow = async (dispatch: Dispatch<ActionsType>, id: number, action: (id: number) => ActionsType, apiMethod: any) => {\r\n    dispatch(actions.toggleFollowingProgress(id, true));\r\n    let data = await apiMethod(id);\r\n    if (data.resultCode === ResultsCodesEnum.Success) {\r\n        dispatch(action(id));\r\n        dispatch(actions.toggleFollowingProgress(id, false));\r\n    }\r\n};\r\n\r\nexport const followUser = (id: number): ThunkType => async (dispatch) => {\r\n    _followUnfollowFlow(dispatch, id, actions.follow, usersApi.followUser);\r\n};\r\n\r\nexport const unFollowUser = (id: number): ThunkType => async (dispatch) => {\r\n    _followUnfollowFlow(dispatch, id, actions.follow, usersApi.unFollowUser);\r\n};\r\n\r\n\r\nexport default usersReducer;\r\n\r\n//Type\r\nexport type FilterFormType = typeof initialState.filter\r\ntype ThunkType = CommonThunkType<ActionsType>\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>","import {AppStateType} from \"./reduxStore\";\r\n\r\nexport const getUsers = (state: AppStateType) => {\r\n    return state.usersPage.users;\r\n};\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize;\r\n};\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount;\r\n};\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage;\r\n};\r\nexport const getIsLoadingStatus = (state: AppStateType) => {\r\n    return state.usersPage.isLoading;\r\n};\r\nexport const getIsFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress;\r\n};\r\nexport const getFilter = (state: AppStateType) => {\r\n    return state.usersPage.filter;\r\n};\r\n","import {Users} from \"./Users\";\r\nexport default Users;","/* eslint-disable */\r\nimport React, {useEffect} from 'react';\r\nimport User from './user';\r\nimport userPhoto from '../../assets/img/avatar.png';\r\nimport Paginator from \"./paginator\";\r\nimport Spinner from \"../common/spinner\";\r\nimport {actions, requestUsers, followUser, unFollowUser} from \"../../redux/usersReducer\";\r\nimport classes from \"./users.module.scss\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentPage, getFilter,\r\n    getIsFollowingInProgress,\r\n    getIsLoadingStatus,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers\r\n} from \"../../redux/userSelectors\";\r\nimport {useHistory} from 'react-router-dom';\r\nimport * as queryString from \"querystring\";\r\nimport {startDialog} from \"../../redux/dialogsReducer\";\r\n\r\ntype QueryParamType = { term?: string, friend?: string, page?: string };\r\nexport const Users: React.FC = () => {\r\n    const totalUsersCount = useSelector(getTotalUsersCount);\r\n    const currentPage = useSelector(getCurrentPage);\r\n    const pageSize = useSelector(getPageSize);\r\n    const usersData = useSelector(getUsers);\r\n    const isLoading = useSelector(getIsLoadingStatus);\r\n    const followingInProgress = useSelector(getIsFollowingInProgress);\r\n    const filter = useSelector(getFilter);\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        //query param initialize\r\n            const parse = queryString.parse(history.location.search.substr(1)) as QueryParamType;\r\n            let actualFilter = filter;\r\n            let actualPage = currentPage;\r\n\r\n            if (parse.page) actualPage = +parse.page;\r\n            if (parse.term) actualFilter = {...actualFilter, term: parse.term as string};\r\n            if (parse.friend) actualFilter = {\r\n                ...actualFilter,\r\n                friend: parse.friend === 'null' ? null : parse.friend !== 'false'\r\n            };\r\n            dispatch(actions.setCurrentPage(actualPage));\r\n            dispatch(actions.setFilter(actualFilter));\r\n            dispatch(requestUsers(actualPage, pageSize));\r\n            return () => {\r\n                dispatch(actions.setFilter({term: '', friend: null}))\r\n            }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        let query: QueryParamType = {};\r\n        if (!!filter.term) query.term = filter.term;\r\n        if (filter.friend !== null) query.friend = String(filter.friend);\r\n        if (currentPage !== 1) query.page = String(currentPage);\r\n\r\n        history.push({\r\n            pathname: '/users',\r\n            search: queryString.encode(query)\r\n        });\r\n    }, [filter, currentPage]);\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(actions.setCurrentPage(pageNumber));\r\n        dispatch(requestUsers(pageNumber, pageSize));\r\n    };\r\n\r\n    const onStartDialog = (id: number) => {\r\n        history.push(`/dialogs/${id}`)\r\n        dispatch(startDialog(id));\r\n    }\r\n\r\n    const followUserClick = (id: number) => {\r\n        dispatch(followUser(id));\r\n    };\r\n\r\n    const unFollowUserClick = (id: number) => {\r\n        dispatch(unFollowUser(id));\r\n    };\r\n\r\n    const users = usersData.map(({id, name, status, followed, photos}) => {\r\n        return <User\r\n            onFollowClick={() => followed ? unFollowUserClick(id) : followUserClick(id)}\r\n            key={id}\r\n            photoUrl={photos.small ? photos.small : userPhoto}\r\n            followStatus={followed}\r\n            fullName={name}\r\n            status={status}\r\n            startDialog={onStartDialog}\r\n            id={id}\r\n            followingInProgress={followingInProgress}/>;\r\n    });\r\n\r\n    const usersContent = isLoading ? <Spinner/> : users;\r\n    if (usersData.length === 0 && !isLoading) {\r\n        return <div className={classes.users}>\r\n            <div className={classes.notFound}>\r\n                <img src=\"http://vkclub.su/_data/stickers/gribson/sticker_vk_gribson_019.png\" alt=\"oops\"/>\r\n                <p>Sorry users not found</p>\r\n            </div>\r\n        </div>;\r\n    }\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <div className={classes.users}>\r\n                <div className={classes.usersContainer}>\r\n                    {usersContent}\r\n                </div>\r\n                <div className={classes.paginator}>\r\n                    <Paginator\r\n                        totalItemsCount={totalUsersCount}\r\n                        pageSize={pageSize}\r\n                        currentPage={currentPage}\r\n                        onPageChanged={onPageChanged}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\n\r\n","import React from \"react\";\r\nimport {Form, Formik, Field} from \"formik\";\r\nimport {FilterFormType} from \"../../../redux/usersReducer\";\r\nimport classes from '../../header/header.module.scss';\r\nimport {useSelector} from \"react-redux\";\r\nimport {getFilter} from \"../../../redux/userSelectors\";\r\ntype UsersSearchFormPropTypes ={\r\n    onSubmit: (data: FilterFormType) => void\r\n}\r\n\r\ntype FriendFormType = \"true\" | \"false\" | \"null\";\r\ntype FormType = {\r\n    term: string,\r\n    friend: FriendFormType\r\n}\r\nconst UsersSearchForm: React.FC<UsersSearchFormPropTypes> = ({onSubmit}) => {\r\n    const filter = useSelector(getFilter);\r\n\r\n    const onButtonClick = (values: FormType) => {\r\n        const filter = {\r\n            term: values.term,\r\n            friend: values.friend === 'null' ? null : values.friend !== 'false'\r\n        };\r\n        onSubmit(filter);\r\n    };\r\n    return (\r\n            <Formik\r\n                enableReinitialize\r\n                initialValues={{term: filter.term, friend: String(filter.friend) as FriendFormType}}\r\n                onSubmit={onButtonClick}\r\n                placeholder={'s'}\r\n            >\r\n                {() => (\r\n                    <Form>\r\n                        <Field as=\"select\" name=\"friend\">\r\n                            <option value=\"null\">All</option>\r\n                            <option value=\"true\">Only followed</option>\r\n                            <option value=\"false\">Only unfollowed</option>\r\n                        </Field>\r\n                        <Field placeholder={'Find users'} type=\"text\" name=\"term\"/>\r\n                        <button className={classes.submit} type=\"submit\"/>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n    );\r\n};\r\n\r\nexport default React.memo(UsersSearchForm);","import React from 'react';\nimport classes from './header.module.scss';\nimport UsersSearchFormik from \"../users/usersSearchForm/UsersSearchFormik\";\nimport {NavLink} from \"react-router-dom\";\nimport {FilterFormType} from \"../../redux/usersReducer\";\n\ntype PropTypes = {\n    onSearchSubmit: (filter: FilterFormType) => void\n}\n\nconst Header: React.FC<PropTypes> = ({onSearchSubmit}) => {\n\n    return (\n        <header className={classes.header}>\n            <HeaderContent onSearchSubmit={onSearchSubmit}/>\n        </header>\n    );\n};\n\ntype HeaderContentType = {\n    onSearchSubmit: (filter: FilterFormType) => void\n}\n\nconst HeaderContent: React.FC<HeaderContentType> = ({onSearchSubmit}) => {\n    return (\n        <div>\n            <div className={classes.content}>\n                <h1 className={classes.logo + ' ' + classes.logo_auth}>mashroom</h1>\n                <UsersSearchFormik onSubmit={onSearchSubmit}/>\n                <ul className={classes.menu}>\n                    <li><NavLink activeClassName={classes.active} to='/profile'>PROFILE</NavLink></li>\n                    <li><NavLink activeClassName={classes.active} to='/users'>USERS</NavLink></li>\n                    <li><NavLink activeClassName={classes.active} to='/dialogs'>MESSAGES</NavLink></li>\n                    <NavLink className={classes.settings} activeClassName={classes.active} to='/settings'/>\n                </ul>\n\n            </div>\n        </div>\n\n    );\n};\n\nexport default Header;","\nimport React from 'react';\nimport Header from './header';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {actions, FilterFormType, requestUsers} from \"../../redux/usersReducer\";\nimport {getPageSize} from \"../../redux/userSelectors\";\nimport {useHistory, useLocation} from 'react-router-dom';\n\n\n\nconst HeaderAPI: React.FC = (props) => {\n    const dispatch = useDispatch();\n    const pageSize = useSelector(getPageSize);\n    const history = useHistory();\n    const location = useLocation();\n\n\n\n    const onFilterChanged = (filter: FilterFormType) => {\n        if(location.pathname !== '/users' ) {\n            history.push('/users');\n        }\n\n        dispatch(actions.setCurrentPage(1));\n        dispatch(actions.setFilter(filter));\n\n        dispatch(requestUsers(1, pageSize));\n    };\n    return (\n        <Header {...props} onSearchSubmit={onFilterChanged}/>\n    );\n};\n\nexport default HeaderAPI;\n\n\n","export const requiredField = value => {\r\n    if (value) return undefined;\r\n    return 'Field is required';\r\n};\r\n\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n};","import LoginForm from \"./loginForm\";\r\n\r\nexport default LoginForm;","import React from \"react\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Input} from \"../../common/formsControl/formControls\";\nimport {requiredField} from \"../../../utils/validators\";\nimport {LoginFormValuesType} from \"../login\";\nimport classes from './loginForm.module.scss';\n\ntype LoginFormOwnProps = {captcha: string | null}\n\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> = ({error, captcha, handleSubmit}) => {\n    const summaryError = error ? <div className={classes.summaryError}>{error}</div> : null;\n    return (\n        <form className={classes.form} onSubmit={handleSubmit}>\n            <div className={classes.input}>\n                <div>Email</div>\n                <Field validate={[requiredField]} type=\"text\" name={'email'} placeholder={'login'} component={Input}/>\n            </div>\n            <div className={classes.input}>\n                <div>Password</div>\n                <Field validate={[requiredField]} type=\"password\" name={'password'} placeholder={'password'}\n                        component={Input}/>\n            </div>\n            <div className={classes.checkbox}>\n                <Field type=\"checkbox\" name={'rememberMe'} component={Input}/>\n                <div className={classes.remember}>Remember me</div>\n            </div>\n            {summaryError}\n            {captcha ?\n                <div>\n                    <img src={captcha} alt=\"captcha\"/>\n                    <Field placeholder={\"captcha text\"} validate={[requiredField]} type=\"text\" name={\"captcha\"} component={Input}/>\n                </div>\n                : null}\n            <div className={classes.button}>\n                <button>Login</button>\n            </div>\n        </form>\n    );\n};\n\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginForm);\n\nexport default LoginReduxForm;","import {Login} from \"./login\";\r\nexport default Login;","import React from \"react\";\r\nimport LoginReduxForm from \"./loginForm\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport classes from './login.module.scss';\r\nimport {getCaptcha, getIsAuth} from \"../../redux/authSelectors\";\r\nimport {login} from \"../../redux/authReducer\";\r\n\r\nexport type LoginFormValuesType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    captcha: string\r\n}\r\n\r\nexport const Login: React.FC = () => {\r\n\r\n    const captcha = useSelector(getCaptcha);\r\n    const isAuth = useSelector(getIsAuth);\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        const {email, password, rememberMe, captcha} = formData;\r\n        dispatch(login(email, password, rememberMe, captcha));\r\n    };\r\n\r\n\r\n    if (isAuth) return <Redirect to={'/profile'}/>;\r\n\r\n    return (\r\n        <div className={classes.login}>\r\n            <LoginReduxForm captcha={captcha} onSubmit={onSubmit}/>\r\n            <div className={classes.descr}>\r\n                <p>Welcome to the mashroom</p>\r\n                <ul>\r\n                    <li>Communication</li>\r\n                    <li>News</li>\r\n                    <li>Self-expression</li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n","import {getAuth} from \"./authReducer\";\r\nimport {InferActionsTypes} from \"./reduxStore\";\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    initialized: false\r\n};\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType=> {\r\n\r\n    switch (action.type) {\r\n        case 'APP/INITIALIZED_SUCCESS':\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    initializedSuccess : () => ({type: 'APP/INITIALIZED_SUCCESS'} as const)\r\n};\r\n\r\n\r\nexport default appReducer;\r\n\r\nexport const initializeApp = () => async (dispatch : any) => {\r\n    let dispatchResult = dispatch(getAuth());\r\n    dispatchResult\r\n        .then(() => {\r\n            dispatch(actions.initializedSuccess());\r\n        });\r\n};","import {ResultsCodesEnum} from \"../api/api\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\nimport {PhotosType, PostType, ProfileType} from \"../types/types\";\r\nimport {CommonThunkType, InferActionsTypes} from \"./reduxStore\";\r\nimport {profileApi} from \"../api/profileApi\";\r\n\r\nconst initialState = {\r\n    posts: [\r\n        {\r\n            img: 'https://cdn4.iconfinder.com/data/icons/small-n-flat/24/user-alt-512.png',\r\n            text: 'wow',\r\n            likesCount: 2,\r\n            id: 1\r\n        },\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: '',\r\n    onProfilePage: false\r\n};\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    let newPost;\r\n    switch (action.type) {\r\n        case \"PROFILE/ADD-POST\":\r\n            newPost = {\r\n                img: 'https://cdn4.iconfinder.com/data/icons/small-n-flat/24/user-alt-512.png',\r\n                id: 2,\r\n                text: action.postText,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost]\r\n            };\r\n        case \"PROFILE/SET_PROFILE\":\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            };\r\n        case \"PROFILE/SET_STATUS\":\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n        case \"PROFILE/DELETE_POST\":\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(({id}) => id !== action.id)\r\n            };\r\n        case \"PROFILE/SAVE_PHOTO_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photos} as ProfileType\r\n            };\r\n        case \"PROFILE/SAVE_PROFILE_DATA_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, ...action.profile}\r\n            };\r\n        case \"PROFILE/ON_PROFILE_PAGE\":\r\n            return {\r\n                ...state,\r\n                onProfilePage: action.bool\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    addNewPost : (postText: string) => ({type: 'PROFILE/ADD-POST', postText} as const),\r\n    setProfile : (profile: ProfileType) => ({type: 'PROFILE/SET_PROFILE', profile} as const),\r\n    setStatus : (status: string) => ({type: 'PROFILE/SET_STATUS', status} as const),\r\n    deletePost : (id: number) => ({type: 'PROFILE/DELETE_POST', id} as const),\r\n    savePhotoSuccess : (photos: PhotosType)=> ({\r\n        type: 'PROFILE/SAVE_PHOTO_SUCCESS',\r\n        photos\r\n    } as const),\r\n    saveProfileDataSuccess : (profile: ProfileType) => ({\r\n        type: 'PROFILE/SAVE_PROFILE_DATA_SUCCESS',\r\n        profile\r\n    } as const),\r\n    onProfilePage: (bool: boolean) => ({type: 'PROFILE/ON_PROFILE_PAGE', bool}) as const\r\n};\r\n\r\nexport const getProfile = (id: number ): ThunkType => async (dispatch) => {\r\n    let profileData = await profileApi.getProfile(id);\r\n    dispatch(actions.setProfile(profileData));\r\n};\r\n\r\nexport const getStatus = (id: number): ThunkType => async (dispatch) => {\r\n    let status = await profileApi.getStatus(id);\r\n    dispatch(actions.setStatus(status));\r\n};\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    let res = await profileApi.updateStatus(status);\r\n    if (res.data.resultCode === ResultsCodesEnum.Success) {\r\n        dispatch(actions.setStatus(status));\r\n    }\r\n};\r\n\r\nexport const savePhoto = (photo: any): ThunkType => async (dispatch) => {\r\n    let data = await profileApi.uploadUserPhoto(photo);\r\n    if (data.resultCode === ResultsCodesEnum.Success) {\r\n        dispatch(actions.savePhotoSuccess(data.data.photos));\r\n    }\r\n};\r\n\r\nexport const saveProfileData = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    let data = await profileApi.uploadUserData(profile);\r\n    const userId = getState().auth.userId;\r\n    if (data.resultCode === ResultsCodesEnum.Success) {\r\n        if (userId != null){\r\n            dispatch(getProfile(userId));\r\n        }else {\r\n            throw new Error(\"User id can`t be null\");\r\n        }\r\n    } else {\r\n        let message = data.messages.length !== 0 ? data.messages[0] : \"some error\";\r\n        let action = stopSubmit(\"edit-profile\", {_error: message});\r\n        dispatch(action);\r\n        return Promise.reject(data.messages[0]);\r\n    }\r\n};\r\n\r\nexport default profileReducer;\r\n\r\n// Type\r\ntype ThunkType = CommonThunkType<ActionsType | FormAction>\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>;","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer from \"./profileReducer\";\r\nimport dialogsReducer from \"./dialogsReducer\";\r\nimport sidebarReducer from \"./sidebarReducer\";\r\nimport usersReducer from \"./usersReducer\";\r\nimport authReducer from \"./authReducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport {reducer as formReducer} from 'redux-form';\r\nimport appReducer from \"./appReducer\";\r\nimport logger from 'redux-logger';\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    form: formReducer\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer;\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n\r\nexport type InferActionsTypes<T> = T extends {[keys:string]: (...args: any[]) => infer U} ? U : never\r\n\r\nexport type CommonThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware, logger)));\r\n// @ts-ignore\r\nexport default store;","import PageNotFound from \"./404page\";\n\nexport default PageNotFound;","import React from \"react\";\nimport classes from './pageNotFound.module.scss';\nconst PageNotFound = () => {\n    return (\n        <div className={classes.pageNotFound}>\n            <img src=\"http://vkclub.su/_data/stickers/gribson/sticker_vk_gribson_019.png\" alt=\"\"/>\n            <p>Oooops! <br/> Page not found</p>\n        </div>\n    );\n};\n\nexport default PageNotFound;","// import classes from \"./profileInfo/profileInfo.module.scss\";\r\nimport React from \"react\";\r\nimport {Field, Form, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../../common/formsControl/formControls\";\r\nimport {requiredField} from \"../../../utils/validators\";\r\nimport classes from \"../../common/formsControl/formControls.module.scss\";\r\nimport {ProfileType} from \"../../../types/types\";\r\n\r\ntype PropTypes = {\r\n    profile: ProfileType\r\n}\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropTypes> & PropTypes> = ({handleSubmit, profile, error}) => {\r\n\r\n    const summaryError = error ? <div className={classes.summaryError}>{error}</div> : null;\r\n\r\n    const contactsInput = Object.keys(profile.contacts).map((key) => {\r\n        return <div key={key}>{key} <Field name={`contacts.${key}`} component={Input}/></div>;\r\n    });\r\n\r\n\r\n    return (\r\n        <>\r\n            <Form onSubmit={handleSubmit} className={classes.input}>\r\n                <div>FullName: <Field name={'fullName'} placeholder={\"Your full name\"} validate={[requiredField]}\r\n                                      component={Input}/></div>\r\n                <div>About me: <Field name={'aboutMe'} placeholder={\"About me\"} component={Input}/></div>\r\n                {contactsInput}\r\n                <div>{summaryError}</div>\r\n                <button>Save</button>\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nconst ProfileDataReduxForm = reduxForm<ProfileType, PropTypes>({form: 'edit-profile'})(ProfileDataForm);\r\nexport default ProfileDataReduxForm;","export default __webpack_public_path__ + \"static/media/upload.e06f3339.svg\";","import classes from \"./profileInfo.module.scss\";\r\nimport userPhoto from \"../../../assets/img/avatar.png\";\r\nimport React, {ChangeEvent} from \"react\";\r\nimport {PhotosType} from \"../../../types/types\";\r\nimport upload from \"./upload.svg\";\r\n\r\ntype ProfileLeftSideType = {\r\n    isOwner: boolean,\r\n    id: number,\r\n    photos: PhotosType,\r\n    onPhotoSelected: (e: ChangeEvent<HTMLInputElement>) => void,\r\n}\r\n\r\nexport const ProfileLeftSide: React.FC<ProfileLeftSideType> = ({isOwner, photos, onPhotoSelected}) => {\r\n    return <div className={classes.leftSide}>\r\n        <div className={classes.profilePhoto}>\r\n            <img alt={'user photo'} src={photos.large || userPhoto}/>\r\n        </div>\r\n        {isOwner && <div className={classes.upload}>\r\n            <input  onChange={onPhotoSelected} type=\"file\" id=\"actual-btn\" hidden/>\r\n            <label htmlFor=\"actual-btn\"><img src={upload} alt=\"upload\"/></label>\r\n        </div>\r\n        }\r\n    </div>;\r\n};","import React, {useEffect, useState} from \"react\";\r\nimport {ChangeEvent} from \"react\";\r\n\r\ntype PropTypes = {\r\n    status: string,\r\n    updateStatus: (value: string) => void,\r\n    isOwner: boolean\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropTypes> = ({status, updateStatus, isOwner}) => {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [value, setValue] = useState(status);\r\n\r\n    useEffect(() => {\r\n        setValue(status);\r\n    }, [status]);\r\n\r\n    const activateEditMode = () => {\r\n        if (isOwner) {\r\n            setEditMode(true);\r\n        }\r\n    };\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        updateStatus(value);\r\n    };\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(e.target.value);\r\n    };\r\n\r\n    const content = editMode\r\n        ? <input\r\n            onBlur={deactivateEditMode}\r\n            autoFocus\r\n            type=\"text\"\r\n            onChange={onStatusChange}\r\n            value={value}/>\r\n        : <span onDoubleClick={activateEditMode}>{status || '...'}</span>;\r\n    return (\r\n        <>\r\n            <div>\r\n                {content}\r\n            </div>\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport classes from \"./profileInfo.module.scss\";\r\nimport ProfileStatusWithHooks from \"../profileStatus/profileStatusWithHooks\";\r\nimport {ContactsType, ProfileType} from \"../../../types/types\";\r\n\r\ntype ContactPropTypes = {\r\n    contactTitle: string,\r\n    contactValue: any\r\n}\r\n\r\nconst Contact: React.FC<ContactPropTypes> = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <div className={classes.contact}>{contactTitle} : {contactValue}</div>\r\n    );\r\n};\r\n\r\ntype ProfileDataPropTypes = {\r\n    profile: ProfileType,\r\n    toggleEditMode: () => void,\r\n    isOwner: any,\r\n    updateStatus: (status: string) => void,\r\n    status: string\r\n}\r\n\r\nexport const ProfileData: React.FC<ProfileDataPropTypes> = ({profile, toggleEditMode, isOwner, updateStatus, status}) => {\r\n    const {fullName, aboutMe, contacts} = profile;\r\n    return (\r\n        <div className={classes.profileData}>\r\n            <div className={classes.name}>{fullName}</div>\r\n            <div className={classes.status}>\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus} isOwner={isOwner}/>\r\n            </div>\r\n            <div className={classes.aboutMe}>{aboutMe}</div>\r\n            <div className={classes.social}>\r\n                <span>Social Networks</span>\r\n                {\r\n                    Object.keys(contacts)\r\n                        .map((title) => {\r\n                            if (!contacts[title as keyof ContactsType]) return null;\r\n                            return (\r\n                                <Contact key={title} contactTitle={title}\r\n                                         contactValue={contacts[title as keyof ContactsType]}/>\r\n                            )\r\n                                ;\r\n                        })}\r\n            </div>\r\n            {isOwner ? <button className={classes.edit} onClick={toggleEditMode}>edit</button> : null}\r\n        </div>\r\n    );\r\n};","import {AppStateType} from \"./reduxStore\";\r\n\r\nexport const getStatusSelector = (state: AppStateType) => {\r\n    return state.profilePage.status;\r\n};\r\nexport const getProfileSelector = (state: AppStateType) => {\r\n    return state.profilePage.profile;\r\n};\r\n","import classes from \"./profileInfo.module.scss\";\r\nimport React, {ChangeEvent, useState} from \"react\";\r\nimport Spinner from \"../../common/spinner\";\r\nimport ProfileDataForm from \"./profileDataForm\";\r\nimport {ProfileType} from \"../../../types/types\";\r\nimport {ProfileLeftSide} from \"./profileLeftSide\";\r\nimport {ProfileData} from \"./ProfileData\";\r\nimport {savePhoto, saveProfileData, updateStatus} from \"../../../redux/profileReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getProfileSelector, getStatusSelector} from \"../../../redux/profileSelectors\";\r\n\r\ntype ProfileInfoPropTypes = {id: number}\r\nconst ProfileInfo: React.FC<ProfileInfoPropTypes> = ({id}) => {\r\n    const isOwner = !id;\r\n    const dispatch = useDispatch();\r\n    const profile = useSelector(getProfileSelector);\r\n    const status = useSelector(getStatusSelector);\r\n\r\n    const [editMode, changeEditMode] = useState(false);\r\n\r\n    const onUpdateStatus = (status: string) => {\r\n        dispatch(updateStatus(status));\r\n    };\r\n\r\n    const onSaveProfileData = (formData: ProfileType): any => {\r\n        return dispatch(saveProfileData(formData));\r\n    };\r\n\r\n    const toggleEditMode = () => {\r\n        if (!editMode) {\r\n            changeEditMode(true);\r\n        } else {\r\n            changeEditMode(false);\r\n        }\r\n    };\r\n\r\n\r\n    const onFormSubmit = (formData: ProfileType) => {\r\n        onSaveProfileData(formData).then(\r\n            () => {\r\n                toggleEditMode();\r\n            }\r\n        );\r\n    };\r\n\r\n\r\n    const onPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        e.preventDefault();\r\n        if (e.target.files?.length === 1) {\r\n            const photo = e.target.files[0];\r\n            dispatch(savePhoto(photo));\r\n        }\r\n    };\r\n\r\n\r\n    if (!profile) {\r\n        return <Spinner/>;\r\n    }\r\n\r\n    const {photos} = profile;\r\n\r\n    return (\r\n        <>\r\n            <div className={classes.info}>\r\n                <ProfileLeftSide\r\n                                 photos={photos}\r\n                                 isOwner={isOwner}\r\n                                 id={id}\r\n                                 onPhotoSelected={onPhotoSelected}/>\r\n                <div className={classes.rightSide}>\r\n                    {editMode\r\n                        ? <ProfileDataForm initialValues={profile}\r\n                                           profile={profile}\r\n                                           onSubmit={onFormSubmit}/>\r\n                        : <ProfileData isOwner={isOwner}\r\n                                       updateStatus={onUpdateStatus}\r\n                                       status={status}\r\n                                       profile={profile}\r\n                                       toggleEditMode={toggleEditMode}/>}\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ProfileInfo;","import React, {useEffect} from 'react';\r\nimport classes from './profile.module.scss';\r\nimport ProfileInfo from \"./profileInfo/profileInfo\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useHistory, useParams} from \"react-router-dom\";\r\nimport {getUserId} from \"../../redux/authSelectors\";\r\nimport {getProfile, getStatus} from \"../../redux/profileReducer\";\r\n\r\nexport const Profile: React.FC = () => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const params = useParams<any>();\r\n    const authUserId = useSelector(getUserId);\r\n\r\n    const refreshProfileData = () => {\r\n        let id: number | null = +params.id;\r\n        if (!id) {\r\n            id = authUserId;\r\n            if (!id) {\r\n                history.push(\"/login\");\r\n            }\r\n        }\r\n        dispatch(getProfile(id as number));\r\n        dispatch(getStatus(id as number));\r\n    };\r\n\r\n    useEffect(() => {\r\n        refreshProfileData();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        refreshProfileData();\r\n    }, [params.id]);\r\n\r\n    return (\r\n        <div className={classes.wrapper}>\r\n            <div className={classes.profile}>\r\n                <ProfileInfo id={params.id}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, {Component, ComponentType, Suspense} from 'react';\r\nimport NavBar from '../nav/nav';\r\nimport {Redirect, Switch, withRouter, Route, HashRouter} from \"react-router-dom\";\r\nimport './app.scss';\r\nimport Settings from \"../settings\";\r\nimport Dialogs from \"../dialogs\";\r\nimport UsersPage from \"../users\";\r\nimport HeaderAPI from \"../header/headerAPI\";\r\nimport Login from \"../login\";\r\nimport {connect, Provider} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {initializeApp} from \"../../redux/appReducer\";\r\nimport Spinner from \"../common/spinner\";\r\nimport store, {AppStateType} from \"../../redux/reduxStore\";\r\nimport PageNotFound from '../404page';\r\nimport {Profile} from \"../profile/profile\";\r\n\r\n\r\n\r\n\r\ntype MapStateToPropsType = ReturnType<typeof mapStateToProps>\r\ntype MapDispatchToProps = {\r\n    initializeApp: () => void\r\n}\r\ntype PropTypes = MapStateToPropsType & MapDispatchToProps\r\n\r\nconst News = React.lazy(() => import('../news'));\r\nconst Music = React.lazy(() => import('../music'));\r\nconst ChatPage = React.lazy(() => import('../nav/chat/chatPage'));\r\nclass App extends Component<PropTypes> {\r\n\r\n    catchAllUnhandledErrors = () => {\r\n        alert('some error occurred');\r\n    };\r\n\r\n    componentDidMount() {\r\n        const {initializeApp} = this.props;\r\n        initializeApp();\r\n        window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors);\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) return <Spinner/>;\r\n        if (!this.props.isAuth) return <Login/>;\r\n        return (\r\n            <>\r\n            <div className='app _container'>\r\n                    <HeaderAPI/>\r\n                    {this.props.isAuth ? <NavBar/> : null}\r\n                    <div className='app-wrapper-content'>\r\n                        <Suspense fallback={<Spinner/>}>\r\n                            <Switch>\r\n                                <Route exact path='/' render={() => <Redirect to={'/profile'}/>}/>\r\n                                <Route path='/profile/:id?' render={() => <Profile />}/>\r\n                                <Route path='/dialogs/:id?' render={() => <Dialogs/>}/>\r\n                                <Route path='/chat' render={() => <ChatPage/>}/>\r\n                                <Route path='/music' component={Music}/>\r\n                                <Route path='/news' component={News}/>\r\n                                <Route path='/users' component={UsersPage}/>\r\n                                <Route path='/settings' component={Settings}/>\r\n                                <Route path='/login' component={Login}/>\r\n                                <Route path='*' component={PageNotFound}/>\r\n                            </Switch>\r\n                        </Suspense>\r\n                    </div>\r\n            </div>\r\n\r\n                </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        initialized: state.app.initialized,\r\n        isAuth: state.auth.isAuth\r\n    };\r\n};\r\nlet AppContainer = compose<ComponentType>(withRouter, connect(mapStateToProps, {initializeApp}))(App);\r\nconst MainApp: React.FC = () => {\r\n    return (\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <AppContainer/>\r\n            </Provider>\r\n        </HashRouter>\r\n    );\r\n};\r\nexport default MainApp;","import ReactDOM from \"react-dom\";\r\nimport React from \"react\";\r\nimport MainApp from \"./component/app/app\";\r\n\r\n\r\nReactDOM.render(<MainApp/>, document.getElementById('root'));\r\n\r\n\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"nav_navbar__1sgBY\",\"user\":\"nav_user__1bQo-\",\"photo\":\"nav_photo__2Yr4u\",\"name\":\"nav_name__1Q5pM\",\"button\":\"nav_button__3WJH1\",\"email\":\"nav_email__35rfu\",\"interesting\":\"nav_interesting__2W2LG\",\"title\":\"nav_title__7GmS6\",\"content\":\"nav_content__2rbTP\",\"chatContainer\":\"nav_chatContainer__1RIda\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"user\":\"user_user__1hjSD\",\"user_photo\":\"user_user_photo__15M4Y\",\"user_name\":\"user_user_name__1beMh\",\"user_status\":\"user_user_status__30yOH\",\"buttons\":\"user_buttons__1P78X\",\"subscribe\":\"user_subscribe__HXmuo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"paginator_paginator__2ARdb\",\"pageNumber\":\"paginator_pageNumber__2YQgy\",\"selectedPage\":\"paginator_selectedPage__2Px8m\",\"navBtn\":\"paginator_navBtn__3q56V\",\"right\":\"paginator_right__1dCx0\",\"left\":\"paginator_left__1Iv1A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"loginForm_form__3Vb_K\",\"input\":\"loginForm_input__ziBHz\",\"checkbox\":\"loginForm_checkbox__3e9UO\",\"remember\":\"loginForm_remember__jXYoO\",\"button\":\"loginForm_button__1C0af\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"dialogs_dialogs__14W0_\",\"dialogsItems\":\"dialogs_dialogsItems__oSSNC\",\"messagesContainer\":\"dialogs_messagesContainer__DD0fF\",\"messages\":\"dialogs_messages__Odv3N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"formControls_formControl__nwszG\",\"error\":\"formControls_error__23Zih\",\"summaryError\":\"formControls_summaryError__4h2HN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"message_message__2SYi-\",\"own\":\"message_own__2ClmB\",\"noOwn\":\"message_noOwn__GZpCA\",\"text\":\"message_text__3wddD\",\"senderName\":\"message_senderName__3wTCt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"users_container__3AbK-\",\"users\":\"users_users__1XLYr\",\"paginator\":\"users_paginator__2pEaW\",\"notFound\":\"users_notFound__2jHfh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"dialog_dialog__SgFmC\",\"active\":\"dialog_active__2_S4l\",\"name\":\"dialog_name__Ax5JM\",\"photo\":\"dialog_photo__27FwB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"spinner_preloader__1jMg2\",\"spinner\":\"spinner_spinner__1Hetg\",\"spin\":\"spinner_spin__A_APw\"};"],"sourceRoot":""}