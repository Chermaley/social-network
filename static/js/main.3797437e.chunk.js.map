{"version":3,"sources":["component/common/spinner/spinner.module.scss","component/login/login.module.scss","component/nav/chat/chatPage.tsx","component/profile/profile.module.scss","component/profile/myPosts/post/post.module.scss","component/profile/myPosts/myPosts.module.scss","component/404page/pageNotFound.module.scss","component/header/header.module.scss","component/nav/nav.module.scss","api/api.ts","component/common/spinner/spinner.tsx","api/profileApi.ts","redux/sidebarReducer.ts","component/nav/nav.tsx","api/authApi.ts","api/securityApi.ts","redux/authReducer.ts","component/redirectHOC/index.js","utils/validators/validators.js","component/settings/index.js","component/redirectHOC/redirectHOC.tsx","component/settings/settings.tsx","assets/img/avatar.png","component/dialogs/dialogItem/dialog.tsx","redux/authSelectors.ts","component/dialogs/message/index.js","component/dialogs/message/message.tsx","api/dialogsApi.ts","redux/dialogsReducer.ts","component/common/formsControl/formControls.tsx","component/dialogs/dialogsForm/index.js","component/dialogs/dialogsForm/dialogsForm.tsx","redux/dialogsSelector.ts","component/dialogs/dialogs.tsx","component/dialogs/index.js","component/common/spinner/index.js","component/profile/profileStatus/profileStatusWithHooks.tsx","component/profile/profileInfo/profileDataForm.tsx","component/profile/profileInfo/profileInfo.tsx","component/profile/myPosts/post/index.js","component/profile/myPosts/post/post.tsx","redux/profileReducer.ts","component/profile/myPosts/myPostForm/myPostForm.tsx","component/profile/myPosts/myPostForm/index.js","component/profile/myPosts/myPosts.tsx","component/profile/profile.tsx","component/profile/profileAPI.tsx","component/users/user/Plus-Icon-PNG.png","component/users/user/check.png","component/users/user/index.js","component/users/user/user.tsx","component/users/paginator/next.svg","component/users/paginator/prev.svg","component/users/paginator/index.js","component/users/paginator/paginator.tsx","api/usersApi.ts","redux/usersReducer.ts","redux/userSelectors.ts","component/users/index.js","component/users/Users.tsx","component/users/usersSearchForm/UsersSearchFormik.tsx","component/header/header.tsx","component/header/headerAPI.tsx","component/login/loginForm/index.js","component/login/loginForm/loginForm.tsx","component/login/index.js","component/login/login.tsx","redux/appReducer.ts","redux/reduxStore.ts","component/404page/index.js","component/404page/404page.tsx","component/app/app.tsx","index.js","component/users/paginator/paginator.module.scss","component/login/loginForm/loginForm.module.scss","component/dialogs/message/message.module.scss","component/users/user/user.module.scss","component/common/formsControl/formControls.module.scss","component/nav/chat/chatPage.module.scss","component/users/users.module.scss","component/dialogs/dialogs.module.scss","component/dialogs/dialogItem/dialog.module.scss","component/dialogs/dialogsForm/dialogsForm.module.scss","component/profile/profileInfo/profileInfo.module.scss"],"names":["module","exports","ws","WebSocket","ChatPage","Chat","className","classes","chat","Messages","AddMessageForm","useState","messages","setMessages","useEffect","addEventListener","e","prevState","JSON","parse","data","map","m","index","Message","message","src","photo","alt","text","setMessage","onChange","target","value","onClick","send","ResultsCodesEnum","ResultsCodeForCaptcha","Spinner","preloader","spinner","axiosInstance","axios","create","withCredentials","baseURL","headers","profileApi","id","get","then","res","status","put","formData","FormData","append","profile","initialState","profileData","actions","type","sidebarReducer","state","InfoPage","onChatButtonCLick","login","useSelector","auth","email","authProfile","sidebar","dispatch","useDispatch","navbar","user","photos","small","name","fullName","button","to","interesting","title","content","getState","a","authId","userId","NavBar","toggleContent","chatContainer","authApi","password","rememberMe","captcha","post","delete","securityApi","isLoading","isAuth","url","getAuth","meData","resultCode","Success","getCaptchaUrl","authReducer","action","withAuthRedirect","maxLength","Settings","Component","connect","props","restProps","Dialog","person","path","length","slice","activeClassName","active","dialog","userPhoto","getCaptcha","getIsAuth","getUserId","ownId","classname","senderId","own","noOwn","senderName","body","dialogsApi","dialogs","getDialogsFromApi","getMessagesFromApi","items","dialogsReducer","FormControl","meta","touched","error","children","hasError","errorMessage","formControl","Textarea","input","Input","DialogsForm","reduxForm","form","wrapper","onSubmit","handleSubmit","Field","component","getDialogs","dialogsPage","getMessages","MessagesPage","messagesData","useParams","messagesContainer","newMessageText","sendMessage","Dialogs","dialogsData","userName","dialogsItems","ProfileStatusWithHooks","updateStatus","editMode","setEditMode","setValue","onBlur","autoFocus","onDoubleClick","requiredField","ProfileDataReduxForm","summaryError","contactsInput","Object","keys","contacts","key","Form","placeholder","validate","Contact","contactTitle","contactValue","ProfileData","toggleEditMode","isOwner","aboutMe","lookingForAJob","lookingForAJobDescription","descr","ProfileInfo","savePhoto","saveProfile","changeEditMode","description","profilePhoto","large","preventDefault","files","initialValues","Post","img","likesCount","item","posts","onProfilePage","postText","bool","getProfile","profileReducer","newPost","filter","maxLength10","MyPostForm","MyPosts","memo","postData","addNewPost","postBlock","profilePage","Profile","ProfileAPI","refreshProfileData","match","getStatus","authUserId","params","history","push","this","prevProps","saveProfileData","compose","withRouter","Error","stopSubmit","_error","Promise","reject","User","onFollowClick","followStatus","photoUrl","followingInProgress","startDialog","user_photo","user_name","user_status","subscribe","disabled","some","check","plus","Paginator","totalItemsCount","pageSize","currentPage","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","portionCount","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","styles","paginator","navBtn","left","prev","p","cn","selectedPage","pageNumber","right","next","usersApi","getUsers","term","friend","followUser","unFollowUser","users","totalUsersCount","usersCount","isFetching","payload","requestUsers","usersPage","totalCount","_followUnfollowFlow","apiMethod","usersReducer","followed","getPageSize","getTotalUsersCount","getCurrentPage","getIsLoadingStatus","getIsFollowingInProgress","getFilter","Users","usersData","useHistory","queryString","location","search","substr","actualFilter","actualPage","page","query","String","pathname","onStartDialog","followUserClick","unFollowUserClick","usersContent","usersContainer","notFound","UsersSearchForm","enableReinitialize","values","as","submit","React","HeaderContent","onSearchSubmit","logo","logo_auth","UsersSearchFormik","menu","settings","Header","header","HeaderAPI","useLocation","LoginForm","checkbox","remember","Login","initialized","appReducer","rootReducer","combineReducers","app","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","logger","PageNotFound","pageNotFound","News","lazy","Music","App","catchAllUnhandledErrors","alert","initializeApp","removeEventListener","fallback","exact","render","UsersPage","AppContainer","MainApp","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.3797437e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"spinner_preloader__1jMg2\",\"spinner\":\"spinner_spinner__1Hetg\",\"spin\":\"spinner_spin__A_APw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"login_login__VKdDU\",\"descr\":\"login_descr__u0f4g\"};","import React, {useEffect, useState} from \"react\";\r\nimport classes from './chatPage.module.scss';\r\n\r\nconst ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx');\r\n\r\nexport type ChatMessageType = {\r\n    message: string,\r\n    photo: string,\r\n    userId: number,\r\n    userName: string\r\n}\r\n\r\n\r\nconst ChatPage: React.FC = () => {\r\n    return (\r\n        <Chat/>\r\n    );\r\n};\r\n\r\nexport default ChatPage;\r\n\r\n\r\nconst Chat: React.FC = () => {\r\n\r\n    return (\r\n        <div className={classes.chat}>\r\n            <Messages/>\r\n            <AddMessageForm/>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Messages: React.FC = () => {\r\n\r\n    const [messages, setMessages] = useState<ChatMessageType[]>([]);\r\n\r\n    useEffect(() => {\r\n        ws.addEventListener('message', (e) => {\r\n            setMessages(prevState => [...prevState, ...JSON.parse(e.data)]);\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <div className={classes.messages}>\r\n            {messages.map((m, index) => {\r\n                return <Message key={index} message={m} />;\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nconst Message: React.FC<{message: ChatMessageType}> = ({message}) => {\r\n    return (\r\n        <div className={classes.message}>\r\n            <div><img src={classes.photo} alt=\"userPhoto\"/></div>\r\n            <div className={classes.text}>{message.message}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst AddMessageForm: React.FC = () => {\r\n    const [message, setMessage] = useState('');\r\n    const sendMessage = () => {\r\n        if (!message) {\r\n            return;\r\n        }\r\n        ws.send(message);\r\n        setMessage('');\r\n    };\r\n    return (\r\n        <div>\r\n            <div>\r\n                <textarea onChange={(e) => setMessage(e.target.value)} value={message}/>\r\n            </div>\r\n            <div>\r\n                <button onClick={sendMessage}>Send</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"profile_profile__1d7zg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"post_item__1y2Bx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"myPosts_postBlock__1gIeR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageNotFound\":\"pageNotFound_pageNotFound__2eM4K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__18sGI\",\"content\":\"header_content__15Dq1\",\"submit\":\"header_submit__vXiCC\",\"logo\":\"header_logo__esTHP\",\"logo_auth\":\"header_logo_auth__2BghE\",\"logo_noAuth\":\"header_logo_noAuth__emH4y\",\"menu\":\"header_menu__2b9oq\",\"active\":\"header_active__19EXb\",\"settings\":\"header_settings__26DpH\",\"loginBlock\":\"header_loginBlock__2ztlx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"nav_navbar__1sgBY\",\"user\":\"nav_user__1bQo-\",\"photo\":\"nav_photo__2Yr4u\",\"name\":\"nav_name__1Q5pM\",\"button\":\"nav_button__3WJH1\",\"email\":\"nav_email__35rfu\",\"interesting\":\"nav_interesting__2W2LG\",\"title\":\"nav_title__7GmS6\",\"content\":\"nav_content__2rbTP\",\"chatContainer\":\"nav_chatContainer__1RIda\"};","import axios from \"axios\";\r\n\r\n\r\nexport const axiosInstance = axios.create({\r\n    withCredentials: true,\r\n    baseURL:\"https://social-network.samuraijs.com/api/1.0\",\r\n    headers: {\"API-KEY\": \"f68a4cda-2f4c-4785-816b-4190cdf2b12c\"}\r\n});\r\n\r\nexport type GetItemsType<items> = {\r\n    items: Array<items>,\r\n    totalCount: number,\r\n    error: string | null\r\n}\r\n\r\nexport type ResponseType<D = {}, RC = ResultsCodesEnum> = {\r\n    data: D,\r\n    messages: Array<string>,\r\n    resultCode: RC,\r\n    totalCount?: number\r\n}\r\n\r\nexport enum ResultsCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\nexport enum ResultsCodeForCaptcha {\r\n    captcha = 10\r\n}\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport classes from './spinner.module.scss';\r\nconst Spinner = () => {\r\n    return (\r\n        <div className={classes.preloader}>\r\n            <div className={classes.spinner}></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Spinner;","import {PhotosType, ProfileType} from \"../types/types\";\r\nimport {axiosInstance, ResponseType} from \"./api\";\r\n\r\ntype savePhotoResDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileApi = {\r\n    getProfile: (id: number) => {\r\n        return axiosInstance.get<ProfileType>(`/profile/${id}`).then(res => res.data);\r\n    },\r\n    getStatus: (id: number) => {\r\n        return axiosInstance.get<string>(`/profile/status/${id}`).then(res => res.data);\r\n    },\r\n    updateStatus: (status: string) => {\r\n        return axiosInstance.put<ResponseType>(`/profile/status`, {status: status});\r\n    },\r\n    uploadUserPhoto: (photo: File) => {\r\n        const formData = new FormData;\r\n        formData.append(\"image\", photo);\r\n        return axiosInstance.put<ResponseType<savePhotoResDataType>>('/profile/photo', formData, {\r\n            headers: {\r\n                'Content-type': 'multipart/form-data'\r\n            }\r\n        }).then(res => res.data);\r\n    },\r\n    uploadUserData: (profile: ProfileType) => {\r\n        return axiosInstance.put<ResponseType>('/profile', profile).then(res => res.data);\r\n    }\r\n};","import {ProfileType} from \"../types/types\";\r\nimport {CommonThunkType, InferActionsTypes} from \"./reduxStore\";\r\nimport {FormAction} from \"redux-form\";\r\nimport {profileApi} from \"../api/profileApi\";\r\n\r\nlet initialState = {\r\n    profileData: null as ProfileType | null\r\n};\r\n\r\n\r\nconst sidebarReducer = (state = initialState, actions: ActionsType): InitialStateType => {\r\n    switch (actions.type) {\r\n        case \"SIDEBAR/SET_PROFILE\":\r\n            return {\r\n                ...state,\r\n                profileData: actions.profile\r\n            };\r\n    }\r\n    return state;\r\n};\r\n\r\nexport const actions = {\r\n    setProfileForSideBar: (profile: ProfileType) => ({type: 'SIDEBAR/SET_PROFILE', profile} as const)\r\n};\r\n\r\nexport const getProfileForSideBar = (): ThunkType => async (dispatch, getState) => {\r\n    const authId = getState().auth.userId;\r\n    if (authId) {\r\n        let profileData = await profileApi.getProfile(authId);\r\n        dispatch(actions.setProfileForSideBar(profileData));\r\n    }\r\n};\r\n\r\nexport default sidebarReducer;\r\n\r\ntype ThunkType = CommonThunkType<ActionsType | FormAction>\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>;","import React, {useState} from 'react';\r\nimport classes from './nav.module.scss';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport Spinner from \"../common/spinner/spinner\";\r\nimport {getProfileForSideBar} from \"../../redux/sidebarReducer\";\r\nimport {Link} from 'react-router-dom';\r\nimport ChatPage from \"./chat/chatPage\";\r\n\r\nconst NavBar = () => {\r\n    const [content, toggleContent] = useState('info');\r\n\r\n    if (content === 'chat') {\r\n        return <div className={classes.chatContainer}>\r\n            <ChatPage/>\r\n        </div>;\r\n    }\r\n    else {\r\n        return <InfoPage onChatButtonCLick={() => toggleContent('chat')}/>;\r\n    }\r\n};\r\n\r\ntype InfoPagePropsType = {\r\n    onChatButtonCLick: () => void\r\n}\r\nconst InfoPage: React.FC<InfoPagePropsType> = ({onChatButtonCLick}) => {\r\n    const login = useSelector((state:AppStateType) => state.auth.email);\r\n    const authProfile = useSelector((state: AppStateType) => state.sidebar.profileData);\r\n    const dispatch = useDispatch();\r\n    const getAuthUserData = () => {\r\n        dispatch(getProfileForSideBar());\r\n    };\r\n\r\n    if(!authProfile) {\r\n        getAuthUserData();\r\n        return <Spinner/>;\r\n    }\r\n\r\n    return (\r\n        <nav className={classes.navbar}>\r\n            <div className={classes.user}>\r\n                <div className={classes.photo}><img src={authProfile.photos.small} alt=\"avatar\"/></div>\r\n                <p className={classes.name}>{authProfile.fullName}</p>\r\n                <span className={classes.email}>{login}</span>\r\n                <div className={classes.button}>\r\n                    <Link to={'/'}>Go to profile</Link>\r\n                </div>\r\n                <button onClick={onChatButtonCLick}>click to chat</button>\r\n            </div>\r\n            <div className={classes.interesting}>\r\n                <span className={classes.title}>Chat</span>\r\n                <div className={classes.content}/>\r\n            </div>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default NavBar;","import {axiosInstance, ResponseType, ResultsCodeForCaptcha, ResultsCodesEnum} from \"./api\";\r\n\r\n\r\ntype MeResponseDataType = {\r\n    id: number,\r\n    email: string,\r\n    login: string,\r\n}\r\n\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\n\r\n\r\nexport const authApi = {\r\n    me: () => {\r\n        return axiosInstance.get<ResponseType<MeResponseDataType>>(`/auth/me`).then(res => res.data);\r\n    },\r\n    login: (email: string, password: string, rememberMe = false, captcha: null | string = null) => {\r\n        return axiosInstance.post<ResponseType<LoginResponseDataType, ResultsCodeForCaptcha | ResultsCodesEnum>>(`/auth/login`, {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n            captcha\r\n        });\r\n    },\r\n    logout: () => {\r\n        return axiosInstance.delete('/auth/login');\r\n    },\r\n\r\n};","import {axiosInstance} from \"./api\";\r\n\r\ntype getCaptchaResponseType = {\r\n    url: string\r\n}\r\n\r\nexport const securityApi = {\r\n    getCaptcha: () => {\r\n        return axiosInstance.get<getCaptchaResponseType>('/security/get-captcha-url').then(res => res.data);\r\n    }\r\n};","import {ResultsCodesEnum, ResultsCodeForCaptcha} from \"../api/api\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\nimport {CommonThunkType, InferActionsTypes} from \"./reduxStore\";\r\nimport {authApi} from \"../api/authApi\";\r\nimport {securityApi} from \"../api/securityApi\";\r\n\r\nconst initialState = {\r\n    isLoading: false,\r\n    userId: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captcha: null as string | null\r\n};\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"AUTH/SET_USER_DATA\":\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n                isAuth: true\r\n            };\r\n        case \"AUTH/DELETE_USER_DATA\": {\r\n            return {\r\n                ...state,\r\n                userId: null,\r\n                email: null,\r\n                login: null,\r\n                isAuth: false,\r\n            };\r\n        }\r\n        case \"AUTH/SET_CAPTCHA_URL\": {\r\n            return {\r\n                ...state,\r\n                captcha: action.url\r\n            };\r\n        }\r\n        case \"AUTH/CAPTCHA_SUCCESS\": {\r\n            return {\r\n                ...state,\r\n                captcha: null\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n        }\r\n};\r\n\r\nconst actions = {\r\n    setAuthUserData :(userId: number, email: string, login: string) => ({type: 'AUTH/SET_USER_DATA', data: {userId, email, login}} as const),\r\n    deleteAuthUserData:  () => ({type: 'AUTH/DELETE_USER_DATA'} as const),\r\n    setCaptchaUrl : (url: string) => ({type: 'AUTH/SET_CAPTCHA_URL', url} as const),\r\n    captchaSuccess : () => ({type: 'AUTH/CAPTCHA_SUCCESS'} as const)\r\n};\r\n\r\nexport const getAuth = (): ThunkType => async (dispatch) => {\r\n    let meData = await authApi.me();\r\n    if (meData.resultCode === ResultsCodesEnum.Success) {\r\n        const {id, login, email} = meData.data;\r\n        dispatch(actions.setAuthUserData(id, email, login));\r\n    }\r\n};\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType =>\r\n    async (dispatch) => {\r\n        let res = await authApi.login(email, password, rememberMe, captcha);\r\n        if (res.data.resultCode === ResultsCodesEnum.Success) {\r\n            dispatch(getAuth());\r\n            dispatch(actions.captchaSuccess());\r\n        } else {\r\n            let message = res.data.messages.length !== 0 ? res.data.messages[0] : \"some error\";\r\n            let action = stopSubmit(\"login\", {_error: message});\r\n            if (res.data.resultCode === ResultsCodeForCaptcha.captcha) {\r\n                dispatch(action);\r\n                dispatch(getCaptchaUrl());\r\n            }\r\n            dispatch(action);\r\n        }\r\n    };\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    let res = await authApi.logout();\r\n    if (res.data.resultCode === ResultsCodesEnum.Success) {\r\n        dispatch(actions.deleteAuthUserData());\r\n    }\r\n};\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    let data = await securityApi.getCaptcha();\r\n    if (data.url) {\r\n        dispatch(actions.setCaptchaUrl(data.url));\r\n    }\r\n};\r\n\r\nexport default authReducer;\r\n// Type\r\nexport type InitialStateType = typeof initialState\r\ntype ThunkType = CommonThunkType<ActionsType | FormAction>\r\ntype ActionsType = InferActionsTypes<typeof actions>;\r\n","import {withAuthRedirect} from \"./redirectHOC\";\r\n\r\nexport default withAuthRedirect;","export const requiredField = value => {\r\n    if (value) return undefined;\r\n    return 'Field is required';\r\n};\r\n\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n};","import Settings from \"./settings\";\r\nexport default Settings;","import {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport React from \"react\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\ntype MapPropsType = {\r\n    isAuth: boolean,\r\n}\r\ntype MapDispatchType = {}\r\nexport function withAuthRedirect<WCP>(Component: React.ComponentType<WCP>){\r\n\r\n    const WithRedirect: React.FC<MapPropsType & MapDispatchType> = (props) => {\r\n        let {isAuth, ...restProps} = props;\r\n        if (!isAuth) return <Redirect to={'/login'}/>;\r\n        return (\r\n            <Component {...restProps as unknown as WCP}/>\r\n        );\r\n    };\r\n    const mapStateToProps = (state: AppStateType): MapPropsType => {\r\n        return {\r\n            isAuth: state.auth.isAuth\r\n        };\r\n    };\r\n    return connect<MapPropsType, MapDispatchType, WCP, AppStateType>(mapStateToProps)(WithRedirect);\r\n}","import React from \"react\";\r\nimport {logout} from \"../../redux/authReducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport withAuthRedirect from \"../redirectHOC\";\r\n\r\nconst Settings = () => {\r\n    const dispatch = useDispatch();\r\n    const onLogout = () => {\r\n        dispatch(logout());\r\n    };\r\n    return (\r\n            <div>\r\n                <span onClick={onLogout}>Logout</span>\r\n            </div>\r\n    );\r\n};\r\nexport default withAuthRedirect(Settings);","export default __webpack_public_path__ + \"static/media/avatar.00971467.png\";","import {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport classes from './dialog.module.scss';\r\nimport userPhoto from '../../../assets/img/avatar.png';\r\nimport {PhotosType} from \"../../../types/types\";\r\ntype PropTypes = {\r\n    person: string,\r\n    photos: PhotosType,\r\n    id: number\r\n}\r\n\r\nconst Dialog: React.FC<PropTypes> = ({person, id, photos}) => {\r\n    let path = `/dialogs/${id}`;\r\n    if (person.length > 15) {\r\n        person = person.slice(0,15) + '...';\r\n    }\r\n    return (\r\n        <NavLink to={path} activeClassName={classes.active} className={classes.dialog}>\r\n            <div className={classes.photo}><img src={photos.small || userPhoto} alt=\"\"/></div>\r\n            <div className={classes.name}>{person}</div>\r\n        </NavLink>\r\n    );\r\n};\r\n\r\n\r\nexport default Dialog;","import {AppStateType} from \"./reduxStore\";\r\n\r\nexport const getCaptcha = (state: AppStateType) => {\r\n    return state.auth.captcha;\r\n};\r\nexport const getIsAuth = (state: AppStateType) => {\r\n    return state.auth.isAuth;\r\n};\r\nexport const getLogin = (state: AppStateType) => {\r\n    return state.auth.login;\r\n};\r\nexport const getUserId = (state: AppStateType) => {\r\n    return state.auth.userId;\r\n};\r\n","import Message from \"./message\";\r\nexport default Message;","import classes from \"./message.module.scss\";\r\nimport React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getUserId} from \"../../../redux/authSelectors\";\r\nimport {MessageType} from \"../../../redux/dialogsReducer\";\r\ntype PropTypes = {message: MessageType}\r\n\r\nconst Message: React.FC<PropTypes> = ({message}) => {\r\n    const ownId = useSelector(getUserId);\r\n    const classname = message.senderId === ownId ? classes.message + ' ' + classes.own : classes.message + ' ' + classes.noOwn;\r\n    \r\n    return <div className={classname}>\r\n        <div className={classes.senderName}><p>{message.senderName}</p></div>\r\n        <div className={classes.text}>{message.body}</div>\r\n    </div>\r\n    ;\r\n};\r\nexport default Message;","import {DialogType, MessageType} from \"../redux/dialogsReducer\";\r\nimport {axiosInstance, GetItemsType, ResponseType} from \"./api\";\r\n\r\nexport const dialogsApi = {\r\n    getDialogs: () => {\r\n        return axiosInstance.get<GetItemsType<DialogType>>(`/dialogs`).then(res => res.data);\r\n    },\r\n    startDialog: (id: number) => {\r\n        return axiosInstance.put<ResponseType>(`/dialogs/${id}`).then(res => res.data);\r\n    },\r\n    getMessages: (id: number) => {\r\n        return axiosInstance.get<GetItemsType<MessageType>>(`/dialogs/${id}/messages`).then(res => res.data);\r\n    },\r\n    sendMessage: (id: number, body: string) => {\r\n        return axiosInstance.post<ResponseType>(`/dialogs/${id}/messages` , {body}).then(res => res.data);\r\n    }\r\n}","import {CommonThunkType, InferActionsTypes} from \"./reduxStore\";\r\nimport {FormAction} from \"redux-form\";\r\nimport {dialogsApi} from \"../api/dialogsApi\";\r\nimport {PhotosType} from \"../types/types\";\r\nimport {ResultsCodesEnum} from \"../api/api\";\r\n\r\nexport type MessageType = {\r\n    addedAt: string,\r\n    body: string,\r\n    id: string,\r\n    recipientId: number,\r\n    senderId: number,\r\n    senderName: string,\r\n    translatedBody: any,\r\n    viewed: boolean\r\n}\r\n\r\nexport type DialogType = {\r\n    hasNewMessages: boolean,\r\n    id: number,\r\n    lastDialogActivityDate: \"2020-12-30T10:41:41.887\",\r\n    lastUserActivityDate: \"2020-12-27T17:05:23.097\",\r\n    newMessagesCount: 0,\r\n    photos: PhotosType,\r\n    userName: string\r\n}\r\nconst initialState = {\r\n        messages: [\r\n        ] as Array<MessageType>,\r\n        dialogs: [\r\n        ] as Array<DialogType>\r\n};\r\n\r\nexport const dialogsReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'DIALOGS/SET_MESSAGES':\r\n            return {\r\n                ...state,\r\n                messages: action.messages\r\n            };\r\n        case \"DIALOGS/SET_DIALOGS\":\r\n            return {\r\n                ...state,\r\n                dialogs: action.dialogs\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    setMessages : (messages: Array<MessageType>) => ({type: 'DIALOGS/SET_MESSAGES', messages} as const),\r\n    setDialogs: (dialogs: any) => ({type: 'DIALOGS/SET_DIALOGS', dialogs} as const)\r\n};\r\n\r\nexport const getDialogsFromApi = (): ThunkType => async (dispatch) => {\r\n    let data = await dialogsApi.getDialogs();\r\n    dispatch(actions.setDialogs(data));\r\n};\r\n\r\nexport const getMessagesFromApi = (id: number): ThunkType => async (dispatch) => {\r\n    let data = await dialogsApi.getMessages(id);\r\n    dispatch(actions.setMessages(data.items));\r\n};\r\n\r\nexport const startDialog = (id: number): ThunkType => async (dispatch) => {\r\n    const res = await dialogsApi.startDialog(id);\r\n    if(res.resultCode === ResultsCodesEnum.Success) {\r\n        dispatch(getDialogsFromApi());\r\n    }\r\n};\r\n\r\nexport const sendMessage = (id: number, body: string): ThunkType => async (dispatch) => {\r\n    let res = await dialogsApi.sendMessage(id, body);\r\n    if (res.resultCode === ResultsCodesEnum.Success) {\r\n        dispatch(getMessagesFromApi(id));\r\n    }\r\n};\r\n\r\nexport default dialogsReducer;\r\n\r\n// Type\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = CommonThunkType<ActionsType | FormAction>","import React from \"react\";\r\nimport classes from './formControls.module.scss';\r\nimport {WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl:React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError =  touched && error;\r\n    const errorMessage = hasError ? <span>{error}</span>: null;\r\n\r\n    return (\r\n        <div className={!hasError ? classes.formControl : classes.formControl + ' ' + classes.error}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {errorMessage}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...restProps} {...input}/></FormControl>;\r\n};\r\n\r\nexport const Input: React.FC<WrappedFieldProps>  = (props) => {\r\n    const {input, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>;\r\n};\r\n","import DialogsForm from \"./dialogsForm\";\r\n\r\nexport default DialogsForm;","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../../common/formsControl/formControls\";\r\nimport {DialogsFormValuesType} from \"../dialogs\";\r\nimport classes from './dialogsForm.module.scss';\r\nimport userPhoto from '../../../assets/img/avatar.png';\r\n\r\ntype PropTypes = {}\r\nconst DialogsForm: React.FC<InjectedFormProps<DialogsFormValuesType, PropTypes> & PropTypes> = (props) => {\r\n    return (<div className={classes.wrapper}>\r\n                <div className={classes.photo}><img src={userPhoto} alt=\"userPhoto\"/></div>\r\n                <form className={classes.form} onSubmit={props.handleSubmit}>\r\n                    <Field\r\n                        component={Input}\r\n                        name={'newMessageText'}/>\r\n                        <button/>\r\n                </form>\r\n            </div>\r\n\r\n    );\r\n};\r\n\r\n\r\nexport default reduxForm<DialogsFormValuesType>({form: 'addMessageForm'})(DialogsForm);\r\n","import {AppStateType} from \"./reduxStore\";\r\n\r\nexport const getDialogs = (state: AppStateType) => {\r\n    return state.dialogsPage.dialogs;\r\n};\r\n\r\nexport const getMessages = (state: AppStateType) => {\r\n    return state.dialogsPage.messages;\r\n};","// /* eslint-disable */\r\nimport React, {useEffect} from 'react';\r\nimport classes from './dialogs.module.scss';\r\nimport Dialog from './dialogItem/dialog';\r\nimport Message from './message';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getDialogsFromApi, getMessagesFromApi, sendMessage} from \"../../redux/dialogsReducer\";\r\n\r\nimport DialogsFormRedux from \"./dialogsForm\";\r\n\r\nimport {getDialogs, getMessages} from \"../../redux/dialogsSelector\";\r\nimport {useParams} from 'react-router-dom';\r\n\r\n\r\nexport type DialogsFormValuesType = {\r\n    newMessageText: string,\r\n}\r\n\r\nconst Dialogs:React.FC = () => {\r\n\r\n    const dialogsData = useSelector(getDialogs);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getDialogsFromApi());\r\n    },[]);\r\n\r\n\r\n\r\n    const dialogs = dialogsData.map(({id, userName, photos}) => {\r\n        return <Dialog key={id} id={id} person={userName} photos={photos}/>;\r\n    });\r\n\r\n\r\n    return (\r\n            <div className={classes.dialogs}>\r\n                <div className={classes.dialogsItems}>\r\n                    {dialogs}\r\n                </div>\r\n                <MessagesPage />\r\n            </div>\r\n    );\r\n};\r\n\r\n\r\nconst MessagesPage: React.FC = () => {\r\n    const messagesData = useSelector(getMessages);\r\n    const {id} = useParams<any>();\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            dispatch(getMessagesFromApi(id));\r\n        }\r\n    }, [id]);\r\n\r\n    const addMessage = (value: DialogsFormValuesType) => {\r\n        const message = value.newMessageText;\r\n        dispatch(sendMessage(id, message));\r\n    };\r\n\r\n    const messages = messagesData.map((m) => {\r\n        return <Message key={m.id} message={m}/>;\r\n    });\r\n\r\n    return (\r\n        <div className={classes.messagesContainer}>\r\n            <div className={classes.messages}>{messages}</div>\r\n            <DialogsFormRedux onSubmit={addMessage}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dialogs;\r\n\r\n","import Dialogs from \"./dialogs\";\r\nexport default Dialogs;","import Spinner from \"./spinner\";\r\nexport default Spinner;","import React, {useEffect, useState} from \"react\";\r\nimport {ChangeEvent} from \"react\";\r\n\r\ntype PropTypes = {\r\n    status: string,\r\n    updateStatus: (value: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropTypes> = ({status, updateStatus}) => {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [value, setValue] = useState(status);\r\n\r\n    useEffect(() => {\r\n        setValue(status);\r\n    }, [status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    };\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        updateStatus(value);\r\n    };\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(e.target.value);\r\n    };\r\n\r\n    const content = editMode\r\n        ? <input\r\n            onBlur={deactivateEditMode}\r\n            autoFocus\r\n            type=\"text\"\r\n            onChange={onStatusChange}\r\n            value={value}/>\r\n        : <span onDoubleClick={activateEditMode}>{status || '...'}</span>;\r\n    return (\r\n        <>\r\n            <div>\r\n                {content}\r\n            </div>\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;","// import classes from \"./profileInfo/profileInfo.module.scss\";\r\nimport React from \"react\";\r\nimport {Field, Form, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input, Textarea} from \"../../common/formsControl/formControls\";\r\nimport {requiredField} from \"../../../utils/validators\";\r\nimport classes from \"../../common/formsControl/formControls.module.scss\";\r\nimport {ProfileType} from \"../../../types/types\";\r\n\r\ntype PropTypes = {\r\n    profile: ProfileType\r\n}\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropTypes> & PropTypes> = ({handleSubmit, profile, error}) => {\r\n\r\n    const summaryError = error ? <div className={classes.summaryError}>{error}</div> : null;\r\n\r\n    const contactsInput = Object.keys(profile.contacts).map((key) => {\r\n        return <div key={key}>{key} <Field name={`contacts.${key}`} component={Input}/></div>;\r\n    });\r\n\r\n\r\n    return (\r\n        <>\r\n            <Form onSubmit={handleSubmit}>\r\n                <div>FullName: <Field name={'fullName'} placeholder={\"Your full name\"} validate={[requiredField]}\r\n                                      component={Input}/></div>\r\n                <div>About me: <Field name={'aboutMe'} placeholder={\"About me\"} component={Input}/></div>\r\n                <div>looking for a job: <Field name={'lookingForAJob'} component={Input} type={'checkbox'}/></div>\r\n                <div>My professional skills: <Field name={'lookingForAJobDescription'}\r\n                                                    placeholder={'Your professional skills ?'} component={Textarea}/>\r\n                </div>\r\n                {contactsInput}\r\n                <div>{summaryError}</div>\r\n                <button>Save</button>\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nconst ProfileDataReduxForm = reduxForm<ProfileType, PropTypes>({form: 'edit-profile'})(ProfileDataForm);\r\nexport default ProfileDataReduxForm;","import classes from \"./profileInfo.module.scss\";\r\nimport React, {ChangeEvent, useState} from \"react\";\r\n\r\nimport Spinner from \"../../common/spinner\";\r\nimport userPhoto from '../../../assets/img/avatar.png';\r\nimport ProfileStatusWithHooks from \"../profileStatus/profileStatusWithHooks\";\r\nimport ProfileDataForm from \"./profileDataForm\";\r\nimport {ContactsType, ProfileType} from \"../../../types/types\";\r\n\r\n\r\ntype ProfileInfoPropTypes = {\r\n    profile: ProfileType | null,\r\n    status: string,\r\n    updateStatus: () => void,\r\n    isOwner: boolean,\r\n    savePhoto: (photo: File) => void,\r\n    saveProfile: (formData: ProfileType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo:React.FC<ProfileInfoPropTypes> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n    const [editMode, changeEditMode] = useState(false);\r\n\r\n    const toggleEditMode = () => {\r\n        if (!editMode) {\r\n            changeEditMode(true);\r\n        } else {\r\n            changeEditMode(false);\r\n        }\r\n    };\r\n\r\n    const onPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        e.preventDefault();\r\n        if (e.target.files?.length === 1) {\r\n            const photo = e.target.files[0];\r\n            savePhoto(photo);\r\n        }\r\n    };\r\n\r\n\r\n    const onFormSubmit = (formData: ProfileType) => {\r\n        saveProfile(formData).then(\r\n            () => {toggleEditMode();}\r\n        );\r\n    };\r\n\r\n    if (!profile) {\r\n        return <Spinner/>;\r\n    }\r\n\r\n    const {photos} = profile;\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={classes.description}>\r\n                <div>\r\n                    <img className={classes.profilePhoto} alt={'user photo'} src={photos.large || userPhoto}/>\r\n                    {isOwner && <input onChange={onPhotoSelected} type=\"file\"/>}\r\n                    <b>status: </b><ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n                </div>\r\n                {editMode\r\n                    ? <ProfileDataForm initialValues={profile}\r\n                                       profile={profile}\r\n                                       onSubmit={onFormSubmit}/>\r\n                    : <ProfileData isOwner={isOwner}\r\n                                   profile={profile}\r\n                                   toggleEditMode={toggleEditMode}/>}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\ntype ContactPropTypes = {\r\n    contactTitle: string,\r\n    contactValue: any\r\n}\r\n\r\nconst Contact: React.FC<ContactPropTypes> = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <div>{contactTitle} : {contactValue}</div>\r\n    );\r\n};\r\n\r\ntype ProfileDataPropTypes = {\r\n    profile: ProfileType,\r\n    toggleEditMode: () => void,\r\n    isOwner: any\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataPropTypes> = ({profile, toggleEditMode, isOwner}) => {\r\n    const {fullName, aboutMe, lookingForAJob, lookingForAJobDescription, contacts} = profile;\r\n    return (\r\n        <div className={classes.descr}>\r\n            data\r\n            {isOwner ? <button onClick={toggleEditMode}>edit</button> : null}\r\n            <div>FullName: {fullName}</div>\r\n            <div>About me: {aboutMe}</div>\r\n            <div>{lookingForAJob ? \"looking for a job\" : \"lol job?\"}</div>\r\n            <div>Skills: {lookingForAJob ? lookingForAJobDescription : null}</div>\r\n            <div>Contacts: {\r\n                Object.keys(contacts)\r\n                    .map((title) => {\r\n                return <Contact key={title} contactTitle={title} contactValue={contacts[title as keyof ContactsType]}/>;\r\n            })}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileInfo;","import Post from './post';\r\nexport default Post;","import React from 'react';\r\nimport classes from './post.module.scss';\r\n\r\ntype PostProps = {\r\n    img: string,\r\n    text: string,\r\n    likesCount: number\r\n}\r\n\r\nconst Post:React.FC<PostProps> = ({img, text, likesCount}) => {\r\n    return (\r\n        <div className={classes.item}>\r\n            <img src={img} alt='avatar'/>\r\n            {text}\r\n            <div>\r\n                <span>like {likesCount}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Post;","import {ResultsCodesEnum} from \"../api/api\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\nimport {PhotosType, PostType, ProfileType} from \"../types/types\";\r\nimport {CommonThunkType, InferActionsTypes} from \"./reduxStore\";\r\nimport {profileApi} from \"../api/profileApi\";\r\n\r\nconst initialState = {\r\n    posts: [\r\n        {\r\n            img: 'https://cdn4.iconfinder.com/data/icons/small-n-flat/24/user-alt-512.png',\r\n            text: 'wow',\r\n            likesCount: 2,\r\n            id: 1\r\n        },\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: '',\r\n    onProfilePage: false\r\n};\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    let newPost;\r\n    switch (action.type) {\r\n        case \"PROFILE/ADD-POST\":\r\n            newPost = {\r\n                img: 'https://cdn4.iconfinder.com/data/icons/small-n-flat/24/user-alt-512.png',\r\n                id: 2,\r\n                text: action.postText,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost]\r\n            };\r\n        case \"PROFILE/SET_PROFILE\":\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            };\r\n        case \"PROFILE/SET_STATUS\":\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n        case \"PROFILE/DELETE_POST\":\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(({id}) => id !== action.id)\r\n            };\r\n        case \"PROFILE/SAVE_PHOTO_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photos} as ProfileType\r\n            };\r\n        case \"PROFILE/SAVE_PROFILE_DATA_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, ...action.profile}\r\n            };\r\n        case \"PROFILE/ON_PROFILE_PAGE\":\r\n            return {\r\n                ...state,\r\n                onProfilePage: action.bool\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    addNewPost : (postText: string) => ({type: 'PROFILE/ADD-POST', postText} as const),\r\n    setProfile : (profile: ProfileType) => ({type: 'PROFILE/SET_PROFILE', profile} as const),\r\n    setStatus : (status: string) => ({type: 'PROFILE/SET_STATUS', status} as const),\r\n    deletePost : (id: number) => ({type: 'PROFILE/DELETE_POST', id} as const),\r\n    savePhotoSuccess : (photos: PhotosType)=> ({\r\n        type: 'PROFILE/SAVE_PHOTO_SUCCESS',\r\n        photos\r\n    } as const),\r\n    saveProfileDataSuccess : (profile: ProfileType) => ({\r\n        type: 'PROFILE/SAVE_PROFILE_DATA_SUCCESS',\r\n        profile\r\n    } as const),\r\n    onProfilePage: (bool: boolean) => ({type: 'PROFILE/ON_PROFILE_PAGE', bool}) as const\r\n};\r\n\r\nexport const getProfile = (id: number ): ThunkType => async (dispatch) => {\r\n    let profileData = await profileApi.getProfile(id);\r\n    dispatch(actions.setProfile(profileData));\r\n};\r\n\r\nexport const getStatus = (id: number): ThunkType => async (dispatch) => {\r\n    let status = await profileApi.getStatus(id);\r\n    dispatch(actions.setStatus(status));\r\n};\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    let res = await profileApi.updateStatus(status);\r\n    if (res.data.resultCode === ResultsCodesEnum.Success) {\r\n        dispatch(actions.setStatus(status));\r\n    }\r\n};\r\n\r\nexport const savePhoto = (photo: any): ThunkType => async (dispatch) => {\r\n    let data = await profileApi.uploadUserPhoto(photo);\r\n    if (data.resultCode === ResultsCodesEnum.Success) {\r\n        dispatch(actions.savePhotoSuccess(data.data.photos));\r\n    }\r\n};\r\n\r\nexport const saveProfileData = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    let data = await profileApi.uploadUserData(profile);\r\n    const userId = getState().auth.userId;\r\n    if (data.resultCode === ResultsCodesEnum.Success) {\r\n        if (userId != null){\r\n            dispatch(getProfile(userId));\r\n        }else {\r\n            throw new Error(\"User id can`t be null\");\r\n        }\r\n    } else {\r\n        let message = data.messages.length !== 0 ? data.messages[0] : \"some error\";\r\n        let action = stopSubmit(\"edit-profile\", {_error: message});\r\n        dispatch(action);\r\n        return Promise.reject(data.messages[0]);\r\n    }\r\n};\r\n\r\nexport default profileReducer;\r\n\r\n// Type\r\ntype ThunkType = CommonThunkType<ActionsType | FormAction>\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>;","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, requiredField} from \"../../../../utils/validators\";\r\nimport {Textarea} from \"../../../common/formsControl/formControls\";\r\nimport {MyPostsFormValuesType} from \"../myPosts\";\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\ntype PropTypes = {}\r\n\r\nconst MyPostForm:React.FC<InjectedFormProps<MyPostsFormValuesType, PropTypes> & PropTypes> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field placeholder={'Enter your post text'} validate={[requiredField, maxLength10]} name={\"postText\"} component={Textarea}/>\r\n            <button>Add post</button>\r\n        </form>);\r\n};\r\n\r\nexport default reduxForm<MyPostsFormValuesType>({form: 'postForm'})(MyPostForm);\r\n","import MyPostForm from \"./myPostForm\";\r\n\r\nexport default MyPostForm;","import React, {memo} from 'react';\r\nimport Post from './post';\r\nimport classes from './myPosts.module.scss';\r\nimport {actions} from \"../../../redux/profileReducer\";\r\nimport {connect} from \"react-redux\";\r\nimport MyPostForm from \"./myPostForm\";\r\nimport {InitialStateType} from \"../../../redux/profileReducer\";\r\nimport {AppStateType} from \"../../../redux/reduxStore\";\r\n\r\n\r\ntype PropTypes= {\r\n    postData: InitialStateType[\"posts\"],\r\n    addNewPost: (value: string) => void\r\n}\r\nexport type MyPostsFormValuesType = {\r\n    postText: string\r\n}\r\n\r\n// eslint-disable-next-line react/display-name\r\nconst MyPosts: React.FC<PropTypes> = memo(props => {\r\n    let {postData, addNewPost} = props;\r\n\r\n    const posts = postData.map(({img, text, id, likesCount}) => {\r\n        return <Post key={id} img={img} text={text} likesCount={likesCount}/>;\r\n    });\r\n\r\n    const addPost = (value: MyPostsFormValuesType) => {\r\n        const post = value.postText;\r\n        addNewPost(post);\r\n    };\r\n    return (\r\n        <div className={classes.postBlock}>\r\n            <h3>My post</h3>\r\n            <div>New post</div>\r\n            <MyPostForm onSubmit={addPost}/>\r\n            <div>\r\n                {posts}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        postData: state.profilePage.posts,\r\n    };\r\n};\r\n\r\nconst {addNewPost} = actions;\r\nexport default connect(mapStateToProps, {addNewPost})(MyPosts);","import React from 'react';\r\nimport classes from './profile.module.scss';\r\nimport ProfileInfo from \"./profileInfo/profileInfo\";\r\nimport MyPosts from \"./myPosts/myPosts\";\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\ntype PropTypes = {\r\n    profile: ProfileType | null,\r\n    status: string,\r\n    updateStatus: () => void,\r\n    isOwner: boolean,\r\n    savePhoto: (file: File) => void,\r\n    saveProfile: (formData: ProfileType) => Promise<any>\r\n}\r\n\r\nconst Profile: React.FC<PropTypes> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n\r\n    return (\r\n        <div className={classes.profile}>\r\n            <ProfileInfo saveProfile={saveProfile} savePhoto={savePhoto} isOwner={isOwner} status={status} profile={profile} updateStatus={updateStatus}/>\r\n            <MyPosts/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;","import Profile from \"./profile\";\r\nimport React, {Component} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {actions, getProfile, getStatus, savePhoto, saveProfileData, updateStatus} from \"../../redux/profileReducer\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\n\r\ntype PathParamsType = {\r\n    id: string\r\n}\r\ntype MapDispatchType = {\r\n    savePhoto: (photo: any) => void,\r\n    getProfile: (id: number ) => void,\r\n    getStatus: (id: number ) => void,\r\n    saveProfileData: () => Promise<void>,\r\n    updateStatus: () => void,\r\n    onProfilePage: (bool: boolean) => void\r\n}\r\ntype MapStateProps = ReturnType<typeof mapStateToProps>\r\n\r\ntype PropTypes = MapStateProps & MapDispatchType & RouteComponentProps<PathParamsType>\r\nclass ProfileAPI extends Component<PropTypes> {\r\n\r\n    savePhoto = (photo: any) => {\r\n        const {savePhoto} = this.props;\r\n        savePhoto(photo);\r\n    };\r\n\r\n    refreshProfileData = () => {\r\n        const {getProfile, match, getStatus, authUserId} = this.props;\r\n        let id: number | null = +match.params.id;\r\n        if (!id) {\r\n            id = authUserId;\r\n            if (!id) {\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n        getProfile(id as number);\r\n        getStatus(id as number);\r\n    };\r\n\r\n    componentDidMount() {\r\n        const {onProfilePage} = this.props;\r\n        onProfilePage(true);\r\n        this.refreshProfileData();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropTypes) {\r\n        if (prevProps.match.params.id !== this.props.match.params.id) {\r\n            this.refreshProfileData();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount(): void {\r\n        onProfilePage(false);\r\n    }\r\n\r\n    render() {\r\n        const {profile, status, updateStatus, saveProfileData} = this.props;\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.id}\r\n                     profile={profile}\r\n                     status={status}\r\n                     savePhoto={(photo) => this.savePhoto(photo)}\r\n                     updateStatus={updateStatus}\r\n                     saveProfile={saveProfileData}/>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authUserId: state.auth.userId,\r\n    };\r\n};\r\n\r\nconst {onProfilePage} = actions;\r\n\r\nexport default compose<React.ComponentType>(\r\n    withRouter, connect(mapStateToProps, {onProfilePage, getProfile, getStatus, updateStatus, savePhoto, saveProfileData}))(ProfileAPI);\r\n\r\n","export default __webpack_public_path__ + \"static/media/Plus-Icon-PNG.ac4270cf.png\";","export default __webpack_public_path__ + \"static/media/check.c4294ef8.png\";","import User from \"./user\";\r\nexport default User;","\r\nimport React from \"react\";\r\nimport classes from './user.module.scss';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nimport plus from './Plus-Icon-PNG.png';\r\nimport check from './check.png';\r\n\r\ntype PropsType = {\r\n    fullName: string,\r\n    onFollowClick: () => void,\r\n    startDialog: (id: number) => void,\r\n    followStatus: boolean,\r\n    photoUrl: string,\r\n    status: string,\r\n    id: number,\r\n    followingInProgress: Array<number>\r\n}\r\n\r\nconst User:React.FC<PropsType> = ({fullName, onFollowClick, followStatus,\r\n                                       photoUrl, status,\r\n                                      id: userId, followingInProgress, startDialog}) => {\r\n    return (\r\n        <div className={classes.user}>\r\n            <div className={classes.user}>\r\n                <div>\r\n                    <NavLink to={`/profile/${userId}`}>\r\n                        <img src={photoUrl} alt='user photo' className={classes.user_photo}/>\r\n                    </NavLink>\r\n                </div>\r\n                <div>\r\n                    <div className={classes.user_name}>{fullName}</div><div className={classes.user_status}>{status}</div>\r\n                </div>\r\n                <div>\r\n                    {followStatus ? <button onClick={() => startDialog(userId)}>Send</button> : null}\r\n                    <button className={classes.subscribe}\r\n                            disabled={followingInProgress.some(id => id === userId)}\r\n                            onClick={onFollowClick}>\r\n                            <img src={!followStatus ? plus : check} alt={'follow'}/>\r\n                            </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default User;","export default __webpack_public_path__ + \"static/media/next.43c0e5d8.svg\";","export default __webpack_public_path__ + \"static/media/prev.07f693de.svg\";","import Paginator from \"./paginator\";\r\n\r\nexport default Paginator;","import React, {useState} from 'react';\r\nimport styles from \"./paginator.module.scss\";\r\nimport cn from \"classnames\";\r\nimport next from './next.svg';\r\nimport prev from './prev.svg';\r\ntype PropsType = {\r\n    totalItemsCount: number,\r\n    pageSize: number,\r\n    currentPage: number,\r\n    onPageChanged: (pageNumber: number) => void,\r\n    portionSize?: number\r\n}\r\n\r\nlet Paginator: React.FC<PropsType> = ({\r\n                                          totalItemsCount, pageSize, currentPage\r\n                                          , onPageChanged, portionSize = 10\r\n                                      }) => {\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n\r\n    let pages: Array<number> = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    if (pagesCount < 2) {\r\n        return null;\r\n    }\r\n    return (\r\n        <div className={styles.paginator}>\r\n        {portionNumber > 1 &&\r\n        <span className={styles.navBtn + ' ' + styles.left} onClick={() => {\r\n            setPortionNumber(portionNumber - 1);\r\n        }}><img src={prev} alt=\"next\"/></span>}\r\n\r\n        {pages\r\n            .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n            .map((p) => {\r\n                return <span className={cn({\r\n                    [styles.selectedPage]: currentPage === p\r\n                }, styles.pageNumber)}\r\n                             key={p}\r\n                             onClick={() => {\r\n                                 onPageChanged(p);\r\n                             }}>{p}</span>;\r\n            })}\r\n        {portionCount > portionNumber &&\r\n        <span className={styles.navBtn + ' ' + styles.right} onClick={() => {\r\n            setPortionNumber(portionNumber + 1);\r\n        }}><img src={next} alt=\"next\"/></span>}\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default Paginator;","import {axiosInstance, GetItemsType, ResponseType} from \"./api\";\r\nimport {UserType} from \"../types/types\";\r\n\r\nexport const usersApi = {\r\n    getUsers: async (currentPage = 1, pageSize = 10, term: string = '', friend: null | boolean = null) => {\r\n        const url =`/users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? '': `&friend=${friend}`);\r\n        return axiosInstance.get<GetItemsType<UserType>>(url).then(res => res.data);\r\n    },\r\n    followUser: (id: number) => {\r\n        return axiosInstance.post<ResponseType>(`/follow/${id}`).then(res => res.data);\r\n    },\r\n    unFollowUser: (id: number) => {\r\n        return axiosInstance.delete(`/follow/${id}`).then(res => res.data) as Promise<ResponseType>;\r\n    }\r\n};","import {UserType} from \"../types/types\";\r\nimport {CommonThunkType, InferActionsTypes} from \"./reduxStore\";\r\nimport {usersApi} from \"../api/usersApi\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ResultsCodesEnum} from \"../api/api\";\r\n\r\nconst initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 8,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isLoading: false,\r\n    followingInProgress: [] as Array<number>, //array of users ID\r\n    filter: {\r\n        term: '',\r\n        friend: null as null | boolean,\r\n    }\r\n};\r\n\r\nconst usersReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"USERS/SET_USERS\":\r\n            return {\r\n                ...state,\r\n                users: [...action.users]\r\n            };\r\n        case \"USERS/TOGGLE_FOLLOW\":\r\n            return {\r\n                ...state,\r\n                users: state.users.map((user) => {\r\n                    if (user.id === action.id) {\r\n                        return {...user, followed: !user.followed};\r\n                    }\r\n                    return user;\r\n                })\r\n            };\r\n        case \"USERS/SET_TOTAL_USERS_COUNT\":\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.usersCount\r\n            };\r\n        case \"USERS/SET_CURRENT_PAGE\":\r\n            return {\r\n                ...state,\r\n                currentPage: action.pageNumber\r\n            };\r\n        case \"USERS/TOGGLE_LOADING\":\r\n            return {\r\n                ...state,\r\n                isLoading: !state.isLoading\r\n            };\r\n        case \"USERS/TOGGLE_FOLLOWING_PROGRESS\":\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.id]\r\n                    : state.followingInProgress.filter(id => id !== action.id)\r\n            };\r\n        case \"USERS/SET_FILTER\":\r\n            return {\r\n                ...state,\r\n                filter: action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    toggleLoadingStatus : () => ({type: 'USERS/TOGGLE_LOADING'} as const),\r\n    setTotalUsersCount : (usersCount: number) => ({\r\n        type: 'USERS/SET_TOTAL_USERS_COUNT',\r\n        usersCount\r\n    } as const),\r\n    setCurrentPage : (pageNumber: number) => ({type: 'USERS/SET_CURRENT_PAGE', pageNumber} as const),\r\n    setUsers : (users: Array<UserType>) => ({type: 'USERS/SET_USERS', users} as const),\r\n    toggleFollowingProgress : (id: number, isFetching: boolean) => ({\r\n        type: 'USERS/TOGGLE_FOLLOWING_PROGRESS',\r\n        id,\r\n        isFetching\r\n    } as const),\r\n    follow: (id: number) =>  ({type: 'USERS/TOGGLE_FOLLOW', id} as const),\r\n    setFilter: (payload: FilterFormType) => ({type: 'USERS/SET_FILTER', payload} as const),\r\n};\r\n\r\nexport const requestUsers = (currentPage: number, pageSize: number): ThunkType =>\r\n    async (dispatch, getState) => {\r\n        dispatch(actions.toggleLoadingStatus());\r\n        let res;\r\n        let filter = getState().usersPage.filter;\r\n        res = await usersApi.getUsers(currentPage, pageSize, filter.term, filter.friend);\r\n        dispatch(actions.toggleLoadingStatus());\r\n        dispatch(actions.setTotalUsersCount(res.totalCount));\r\n        dispatch(actions.setUsers(res.items));\r\n    };\r\n\r\nconst _followUnfollowFlow = async (dispatch: Dispatch<ActionsType>, id: number, action: (id: number) => ActionsType, apiMethod: any) => {\r\n    dispatch(actions.toggleFollowingProgress(id, true));\r\n    let data = await apiMethod(id);\r\n    if (data.resultCode === ResultsCodesEnum.Success) {\r\n        dispatch(action(id));\r\n        dispatch(actions.toggleFollowingProgress(id, false));\r\n    }\r\n};\r\n\r\nexport const followUser = (id: number): ThunkType => async (dispatch) => {\r\n    _followUnfollowFlow(dispatch, id, actions.follow, usersApi.followUser);\r\n};\r\n\r\nexport const unFollowUser = (id: number): ThunkType => async (dispatch) => {\r\n    _followUnfollowFlow(dispatch, id, actions.follow, usersApi.unFollowUser);\r\n};\r\n\r\n\r\nexport default usersReducer;\r\n\r\n//Type\r\nexport type FilterFormType = typeof initialState.filter\r\ntype ThunkType = CommonThunkType<ActionsType>\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>","import {AppStateType} from \"./reduxStore\";\r\n\r\nexport const getUsers = (state: AppStateType) => {\r\n    return state.usersPage.users;\r\n};\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize;\r\n};\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount;\r\n};\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage;\r\n};\r\nexport const getIsLoadingStatus = (state: AppStateType) => {\r\n    return state.usersPage.isLoading;\r\n};\r\nexport const getIsFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress;\r\n};\r\nexport const getFilter = (state: AppStateType) => {\r\n    return state.usersPage.filter;\r\n};\r\n","import {Users} from \"./Users\";\r\nexport default Users;","/* eslint-disable */\r\nimport React, {useEffect} from 'react';\r\nimport User from './user';\r\nimport userPhoto from '../../assets/img/avatar.png';\r\nimport Paginator from \"./paginator\";\r\nimport Spinner from \"../common/spinner\";\r\nimport {actions, requestUsers, followUser, unFollowUser} from \"../../redux/usersReducer\";\r\nimport classes from \"./users.module.scss\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentPage, getFilter,\r\n    getIsFollowingInProgress,\r\n    getIsLoadingStatus,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers\r\n} from \"../../redux/userSelectors\";\r\nimport {useHistory} from 'react-router-dom';\r\nimport * as queryString from \"querystring\";\r\nimport {startDialog} from \"../../redux/dialogsReducer\";\r\n\r\ntype QueryParamType = { term?: string, friend?: string, page?: string };\r\nexport const Users: React.FC = () => {\r\n    const totalUsersCount = useSelector(getTotalUsersCount);\r\n    const currentPage = useSelector(getCurrentPage);\r\n    const pageSize = useSelector(getPageSize);\r\n    const usersData = useSelector(getUsers);\r\n    const isLoading = useSelector(getIsLoadingStatus);\r\n    const followingInProgress = useSelector(getIsFollowingInProgress);\r\n    const filter = useSelector(getFilter);\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        //query param initialize\r\n        const parse = queryString.parse(history.location.search.substr(1)) as  QueryParamType;\r\n        let actualFilter = filter;\r\n        let actualPage = currentPage;\r\n\r\n        if (parse.page) actualPage = +parse.page;\r\n        if (parse.term) actualFilter = {...actualFilter, term: parse.term as string};\r\n        if (parse.friend) actualFilter = {...actualFilter, friend: parse.friend === 'null' ? null: parse.friend !== 'false'};\r\n\r\n        dispatch(actions.setCurrentPage(actualPage));\r\n        dispatch(actions.setFilter(actualFilter));\r\n        dispatch(requestUsers(actualPage, pageSize));\r\n        return () => {\r\n            dispatch(actions.setFilter({term: '', friend: null}))\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        let query: QueryParamType = {};\r\n        if (!!filter.term) query.term = filter.term;\r\n        if (filter.friend !== null) query.friend = String(filter.friend);\r\n        if (currentPage !== 1) query.page = String(currentPage);\r\n\r\n        history.push({\r\n            pathname: '/users',\r\n            search: queryString.encode(query)\r\n        });\r\n    }, [filter, currentPage]);\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(actions.setCurrentPage(pageNumber));\r\n        dispatch(requestUsers(pageNumber, pageSize));\r\n    };\r\n\r\n    const onStartDialog = (id: number) => {\r\n        history.push(`/dialogs/${id}`)\r\n        dispatch(startDialog(id));\r\n    }\r\n\r\n    const followUserClick = (id: number) => {\r\n        dispatch(followUser(id));\r\n    };\r\n\r\n    const unFollowUserClick = (id: number) => {\r\n        dispatch(unFollowUser(id));\r\n    };\r\n\r\n    const users = usersData.map(({id, name, status, followed, photos}) => {\r\n        return <User\r\n            onFollowClick={() => followed ? unFollowUserClick(id) : followUserClick(id)}\r\n            key={id}\r\n            photoUrl={photos.small ? photos.small : userPhoto}\r\n            followStatus={followed}\r\n            fullName={name}\r\n            status={status}\r\n            startDialog={onStartDialog}\r\n            id={id}\r\n            followingInProgress={followingInProgress}/>;\r\n    });\r\n\r\n    const usersContent = isLoading ? <Spinner/> : users;\r\n    if (usersData.length === 0 && !isLoading) {\r\n        return <div className={classes.users}>\r\n            <div className={classes.notFound}>\r\n                <img src=\"http://vkclub.su/_data/stickers/gribson/sticker_vk_gribson_019.png\" alt=\"oops\"/>\r\n                <p>Sorry users not found</p>\r\n            </div>\r\n        </div>;\r\n    }\r\n    return (\r\n        <div className={classes.users}>\r\n            <>\r\n                <div className={classes.usersContainer}>\r\n                    {usersContent}\r\n                </div>\r\n                <div className={classes.paginator}>\r\n                    <Paginator\r\n                        totalItemsCount={totalUsersCount}\r\n                        pageSize={pageSize}\r\n                        currentPage={currentPage}\r\n                        onPageChanged={onPageChanged}\r\n                    />\r\n                </div>\r\n            </>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n","import React from \"react\";\r\nimport {Form, Formik, Field} from \"formik\";\r\nimport {FilterFormType} from \"../../../redux/usersReducer\";\r\nimport classes from '../../header/header.module.scss';\r\nimport {useSelector} from \"react-redux\";\r\nimport {getFilter} from \"../../../redux/userSelectors\";\r\ntype UsersSearchFormPropTypes ={\r\n    onSubmit: (data: FilterFormType) => void\r\n}\r\n\r\ntype FriendFormType = \"true\" | \"false\" | \"null\";\r\ntype FormType = {\r\n    term: string,\r\n    friend: FriendFormType\r\n}\r\nconst UsersSearchForm: React.FC<UsersSearchFormPropTypes> = ({onSubmit}) => {\r\n    const filter = useSelector(getFilter);\r\n\r\n    const onButtonClick = (values: FormType) => {\r\n        const filter = {\r\n            term: values.term,\r\n            friend: values.friend === 'null' ? null : values.friend !== 'false'\r\n        };\r\n        onSubmit(filter);\r\n    };\r\n    return (\r\n            <Formik\r\n                enableReinitialize\r\n                initialValues={{term: filter.term, friend: String(filter.friend) as FriendFormType}}\r\n                onSubmit={onButtonClick}\r\n            >\r\n                {() => (\r\n                    <Form>\r\n                        <Field as=\"select\" name=\"friend\">\r\n                            <option value=\"null\">All</option>\r\n                            <option value=\"true\">Only followed</option>\r\n                            <option value=\"false\">Only unfollowed</option>\r\n                        </Field>\r\n                        <Field type=\"text\" name=\"term\"/>\r\n                             <button className={classes.submit} type=\"submit\"/>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n    );\r\n};\r\n\r\nexport default React.memo(UsersSearchForm);","import React from 'react';\nimport classes from './header.module.scss';\nimport UsersSearchFormik from \"../users/usersSearchForm/UsersSearchFormik\";\nimport {NavLink} from \"react-router-dom\";\nimport {FilterFormType} from \"../../redux/usersReducer\";\n\ntype PropTypes = {\n\n    onSearchSubmit: (filter: FilterFormType) => void\n}\n\nconst Header: React.FC<PropTypes> = ({onSearchSubmit}) => {\n    return (\n        <header className={classes.header}>\n            <HeaderContent onSearchSubmit={onSearchSubmit}/>\n        </header>\n    );\n};\n\ntype HeaderContentType = {\n    onSearchSubmit: (filter: FilterFormType) => void\n}\n\nconst HeaderContent: React.FC<HeaderContentType> = ({onSearchSubmit}) => {\n    return (\n        <div>\n            <div className={classes.content}>\n                <h1 className={classes.logo + ' ' + classes.logo_auth}>mashroom</h1>\n                <UsersSearchFormik onSubmit={onSearchSubmit}/>\n                <ul className={classes.menu}>\n                    <li><NavLink activeClassName={classes.active} to='/profile'>PROFILE</NavLink></li>\n                    <li><NavLink activeClassName={classes.active} to='/users'>USERS</NavLink></li>\n                    <li><NavLink activeClassName={classes.active} to='/dialogs'>MESSAGES</NavLink></li>\n                    <NavLink className={classes.settings} activeClassName={classes.active} to='/settings'/>\n                </ul>\n\n            </div>\n        </div>\n\n    );\n};\n\nexport default Header;","\nimport React from 'react';\nimport Header from './header';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {actions, FilterFormType, requestUsers} from \"../../redux/usersReducer\";\nimport {getPageSize} from \"../../redux/userSelectors\";\nimport {useHistory, useLocation} from 'react-router-dom';\n\n\nconst HeaderAPI: React.FC = (props) => {\n    const dispatch = useDispatch();\n    const pageSize = useSelector(getPageSize);\n    const history = useHistory();\n    const location = useLocation();\n\n\n    const onFilterChanged = (filter: FilterFormType) => {\n        if(location.pathname !== '/users' ) {\n            history.push('/users');\n        }\n\n        dispatch(actions.setCurrentPage(1));\n        dispatch(actions.setFilter(filter));\n\n        dispatch(requestUsers(1, pageSize));\n    };\n    return (\n        <Header {...props} onSearchSubmit={onFilterChanged}/>\n    );\n};\n\nexport default HeaderAPI;\n\n\n","import LoginForm from \"./loginForm\";\r\n\r\nexport default LoginForm;","import React from \"react\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Input} from \"../../common/formsControl/formControls\";\nimport {requiredField} from \"../../../utils/validators\";\nimport {LoginFormValuesType} from \"../login\";\nimport classes from './loginForm.module.scss';\n\ntype LoginFormOwnProps = {captcha: string | null}\n\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> = ({error, captcha, handleSubmit}) => {\n    const summaryError = error ? <div className={classes.summaryError}>{error}</div> : null;\n    return (\n        <form className={classes.form} onSubmit={handleSubmit}>\n            <div className={classes.input}>\n                <div>Email</div>\n                <Field validate={[requiredField]} type=\"text\" name={'email'} placeholder={'login'} component={Input}/>\n            </div>\n            <div className={classes.input}>\n                <div>Password</div>\n                <Field validate={[requiredField]} type=\"password\" name={'password'} placeholder={'password'}\n                        component={Input}/>\n            </div>\n            <div className={classes.checkbox}>\n                <Field type=\"checkbox\" name={'rememberMe'} component={Input}/>\n                <div className={classes.remember}>Remember me</div>\n            </div>\n            {summaryError}\n            {captcha ?\n                <div>\n                    <img src={captcha} alt=\"captcha\"/>\n                    <Field placeholder={\"captcha text\"} validate={[requiredField]} type=\"text\" name={\"captcha\"} component={Input}/>\n                </div>\n                : null}\n            <div className={classes.button}>\n                <button>Login</button>\n            </div>\n        </form>\n    );\n};\n\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginForm);\n\nexport default LoginReduxForm;","import {Login} from \"./login\";\r\nexport default Login;","import React from \"react\";\r\nimport LoginReduxForm from \"./loginForm\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport classes from './login.module.scss';\r\nimport {getCaptcha, getIsAuth} from \"../../redux/authSelectors\";\r\nimport {login} from \"../../redux/authReducer\";\r\n\r\nexport type LoginFormValuesType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    captcha: string\r\n}\r\n\r\nexport const Login: React.FC = () => {\r\n\r\n    const captcha = useSelector(getCaptcha);\r\n    const isAuth = useSelector(getIsAuth);\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        const {email, password, rememberMe, captcha} = formData;\r\n        dispatch(login(email, password, rememberMe, captcha));\r\n    };\r\n\r\n\r\n    if (isAuth) return <Redirect to={'/profile'}/>;\r\n\r\n    return (\r\n        <div className={classes.login}>\r\n            <LoginReduxForm captcha={captcha} onSubmit={onSubmit}/>\r\n            <div className={classes.descr}>\r\n                <p>Welcome to the mashroom</p>\r\n                <ul>\r\n                    <li>Communication</li>\r\n                    <li>News</li>\r\n                    <li>Self-expression</li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n","import {getAuth} from \"./authReducer\";\r\nimport {InferActionsTypes} from \"./reduxStore\";\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    initialized: false\r\n};\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType=> {\r\n\r\n    switch (action.type) {\r\n        case 'APP/INITIALIZED_SUCCESS':\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    initializedSuccess : () => ({type: 'APP/INITIALIZED_SUCCESS'} as const)\r\n};\r\n\r\n\r\nexport default appReducer;\r\n\r\nexport const initializeApp = () => async (dispatch : any) => {\r\n    let dispatchResult = dispatch(getAuth());\r\n    dispatchResult\r\n        .then(() => {\r\n            dispatch(actions.initializedSuccess());\r\n        });\r\n};","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer from \"./profileReducer\";\r\nimport dialogsReducer from \"./dialogsReducer\";\r\nimport sidebarReducer from \"./sidebarReducer\";\r\nimport usersReducer from \"./usersReducer\";\r\nimport authReducer from \"./authReducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport {reducer as formReducer} from 'redux-form';\r\nimport appReducer from \"./appReducer\";\r\nimport logger from 'redux-logger';\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    form: formReducer\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer;\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n\r\nexport type InferActionsTypes<T> = T extends {[keys:string]: (...args: any[]) => infer U} ? U : never\r\n\r\nexport type CommonThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware, logger)));\r\n// @ts-ignore\r\nexport default store;","import PageNotFound from \"./404page\";\n\nexport default PageNotFound;","import React from \"react\";\nimport classes from './pageNotFound.module.scss';\nconst PageNotFound = () => {\n    return (\n        <div className={classes.pageNotFound}>\n            <img src=\"http://vkclub.su/_data/stickers/gribson/sticker_vk_gribson_019.png\" alt=\"\"/>\n            <p>Oooops! <br/> Page not found</p>\n        </div>\n    );\n};\n\nexport default PageNotFound;","import React, {Component, ComponentType, Suspense} from 'react';\r\nimport NavBar from '../nav/nav';\r\nimport {Redirect, Switch, withRouter, Route, HashRouter} from \"react-router-dom\";\r\nimport './app.scss';\r\nimport Settings from \"../settings\";\r\nimport Dialogs from \"../dialogs\";\r\nimport ProfileAPI from \"../profile/profileAPI\";\r\nimport UsersPage from \"../users\";\r\nimport HeaderAPI from \"../header/headerAPI\";\r\nimport Login from \"../login\";\r\nimport {connect, Provider} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {initializeApp} from \"../../redux/appReducer\";\r\nimport Spinner from \"../common/spinner\";\r\nimport store, {AppStateType} from \"../../redux/reduxStore\";\r\nimport PageNotFound from '../404page';\r\n\r\n\r\n\r\n\r\ntype MapStateToPropsType = ReturnType<typeof mapStateToProps>\r\ntype MapDispatchToProps = {\r\n    initializeApp: () => void\r\n}\r\ntype PropTypes = MapStateToPropsType & MapDispatchToProps\r\n\r\nconst News = React.lazy(() => import('../news'));\r\nconst Music = React.lazy(() => import('../music'));\r\nconst ChatPage = React.lazy(() => import('../nav/chat/chatPage'));\r\nclass App extends Component<PropTypes> {\r\n\r\n    catchAllUnhandledErrors = () => {\r\n        alert('some error occurred');\r\n    };\r\n\r\n    componentDidMount() {\r\n        const {initializeApp} = this.props;\r\n        initializeApp();\r\n        window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors);\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) return <Spinner/>;\r\n        if (!this.props.isAuth) return <Login/>;\r\n        return (\r\n            <>\r\n            <div className='app _container'>\r\n                    <HeaderAPI/>\r\n                    {this.props.isAuth ? <NavBar/> : null}\r\n                    <div className='app-wrapper-content'>\r\n                        <Suspense fallback={<Spinner/>}>\r\n                            <Switch>\r\n                                <Route exact path='/' render={() => <Redirect to={'/profile'}/>}/>\r\n                                <Route path='/profile/:id?' render={() => <ProfileAPI />}/>\r\n                                <Route path='/dialogs/:id?' render={() => <Dialogs/>}/>\r\n                                <Route path='/chat' render={() => <ChatPage/>}/>\r\n                                <Route path='/music' component={Music}/>\r\n                                <Route path='/news' component={News}/>\r\n                                <Route path='/users' component={UsersPage}/>\r\n                                <Route path='/settings' component={Settings}/>\r\n                                <Route path='/login' component={Login}/>\r\n                                <Route path='*' component={PageNotFound}/>\r\n                            </Switch>\r\n                        </Suspense>\r\n                    </div>\r\n            </div>\r\n\r\n                </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        initialized: state.app.initialized,\r\n        isAuth: state.auth.isAuth\r\n    };\r\n};\r\nlet AppContainer = compose<ComponentType>(withRouter, connect(mapStateToProps, {initializeApp}))(App);\r\nconst MainApp: React.FC = () => {\r\n    return (\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <AppContainer/>\r\n            </Provider>\r\n        </HashRouter>\r\n    );\r\n};\r\nexport default MainApp;","import ReactDOM from \"react-dom\";\r\nimport React from \"react\";\r\nimport MainApp from \"./component/app/app\";\r\n\r\n\r\nReactDOM.render(<MainApp/>, document.getElementById('root'));\r\n\r\n\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"paginator_paginator__2ARdb\",\"pageNumber\":\"paginator_pageNumber__2YQgy\",\"selectedPage\":\"paginator_selectedPage__2Px8m\",\"navBtn\":\"paginator_navBtn__3q56V\",\"right\":\"paginator_right__1dCx0\",\"left\":\"paginator_left__1Iv1A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"loginForm_form__3Vb_K\",\"input\":\"loginForm_input__ziBHz\",\"checkbox\":\"loginForm_checkbox__3e9UO\",\"remember\":\"loginForm_remember__jXYoO\",\"button\":\"loginForm_button__1C0af\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"message_message__2SYi-\",\"own\":\"message_own__2ClmB\",\"noOwn\":\"message_noOwn__GZpCA\",\"text\":\"message_text__3wddD\",\"senderName\":\"message_senderName__3wTCt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"user\":\"user_user__1hjSD\",\"user_photo\":\"user_user_photo__15M4Y\",\"user_name\":\"user_user_name__1beMh\",\"user_status\":\"user_user_status__30yOH\",\"subscribe\":\"user_subscribe__HXmuo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"formControls_formControl__nwszG\",\"error\":\"formControls_error__23Zih\",\"summaryError\":\"formControls_summaryError__4h2HN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chat\":\"chatPage_chat__UGm6C\",\"messages\":\"chatPage_messages__1rzWI\",\"message\":\"chatPage_message__1KTs_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"users\":\"users_users__1XLYr\",\"paginator\":\"users_paginator__2pEaW\",\"notFound\":\"users_notFound__2jHfh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"dialogs_dialogs__14W0_\",\"dialogsItems\":\"dialogs_dialogsItems__oSSNC\",\"messagesContainer\":\"dialogs_messagesContainer__DD0fF\",\"messages\":\"dialogs_messages__Odv3N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"dialog_dialog__SgFmC\",\"active\":\"dialog_active__2_S4l\",\"name\":\"dialog_name__Ax5JM\",\"photo\":\"dialog_photo__27FwB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"dialogsForm_wrapper__3Ba7c\",\"form\":\"dialogsForm_form__C9lDk\",\"photo\":\"dialogsForm_photo__2t1e_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"description\":\"profileInfo_description__3o5_0\",\"profilePhoto\":\"profileInfo_profilePhoto__splgS\",\"contacts\":\"profileInfo_contacts__3I2Gx\"};"],"sourceRoot":""}